<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JavaScript</title>
  
  <subtitle>每一个不曾起舞的日子，都是对生命的辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yptup.top/"/>
  <updated>2020-04-20T12:37:53.534Z</updated>
  <id>http://www.yptup.top/</id>
  
  <author>
    <name>丶远方</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>发布组件到Nexus</title>
    <link href="http://www.yptup.top/posts/b9177d67.html"/>
    <id>http://www.yptup.top/posts/b9177d67.html</id>
    <published>2020-04-20T12:30:46.000Z</published>
    <updated>2020-04-20T12:37:53.534Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h1 id="发布Nexus"><a href="#发布Nexus" class="headerlink" title="发布Nexus"></a>发布Nexus</h1><p>最近公司需要开发一些组件，发布到Nexus中便于使用，于是操作了一下，基本上和npm发布方式一致</p><h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><p>本项目使用vue-cli 4.x创建，若存在版本差异问题，自行参考<a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">官网配置</a></p><p>项目搭建完成后，需要在根目录创建一个packages目录用来存放组件</p><p>然后将 src 目录改为 examples 用作示例</p><ul><li>精简过后的目录结构：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">|-- HelloWorld</span><br><span class="line">    |-- .browserslistrc</span><br><span class="line">    |-- .editorconfig</span><br><span class="line">    |-- .eslintrc.js</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- babel.config.js</span><br><span class="line">    |-- package-lock.json</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- README.md</span><br><span class="line">    |-- packages &#x2F;&#x2F; 用于存放组件</span><br><span class="line">    |-- public</span><br><span class="line">    |   |-- favicon.ico</span><br><span class="line">    |   |-- index.html</span><br><span class="line">    |-- examples</span><br><span class="line">        |-- App.vue</span><br><span class="line">        |-- main.js</span><br><span class="line">        |-- assets</span><br><span class="line">        |-- components</span><br><span class="line">        |-- router</span><br><span class="line">        |   |-- index.js</span><br><span class="line">        |-- store</span><br><span class="line">        |   |-- index.js</span><br><span class="line">        |-- views</span><br><span class="line">            |-- Home.vue</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="二、修改配置"><a href="#二、修改配置" class="headerlink" title="二、修改配置"></a>二、修改配置</h2><p>启动项目的时候，默认入口文件是 src/main.js</p><p>将 src 目录改为 examples 之后，就需要重新配置入口文件</p><p>在根目录下创建一个 vue.config.js 文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 将 examples 目录添加为新的页面</span></span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      entry: <span class="string">'examples/main.js'</span>,</span><br><span class="line">      <span class="comment">// 模板来源</span></span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      <span class="comment">// 输出文件名</span></span><br><span class="line">      filename: <span class="string">'index.html'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>完成这一步之后就可以正常启动项目了</p><p>vue-cli 4.x 提供了构建库的命令，所以这里不需要再为 packages 目录配置 webpack</p><h2 id="三、开发组件"><a href="#三、开发组件" class="headerlink" title="三、开发组件"></a>三、开发组件</h2><p>之前创建了一个 packages 目录，用来存放组件<br>该目录下存放每个组件单独的开发目录，包含其源码目录 src 和 index.js 便于外部引用<br>这里以 hello-world 组件为例，完整的 packages 目录结构如下</p><ul><li>目录结构：</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|-- packages</span><br><span class="line">    |-- index.js</span><br><span class="line">    |-- HelloWorld</span><br><span class="line">        |-- index.js</span><br><span class="line">        |-- src</span><br><span class="line">            |-- main.vue</span><br></pre></td></tr></table></figure></div><ul><li>HelloWorld/src/main.vue 是组件的开发文件，具体代码如下：</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span> () &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">'Hello World'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">h1&#123;</span><br><span class="line">  margin-top: 200px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>注意：组件必须声明 name，这个 name 就是组件的标签</p></blockquote><p><strong>HelloWorld/index.js 用于导出单个组件，如果要做按需引入，也需要在这里配置</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/HelloWorld/index.js</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 导入组件，组件必须声明 name</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./src/main.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为组件添加 install 方法，用于按需引入</span></span><br><span class="line">HelloWorld.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(HelloWorld.name, HelloWorld)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HelloWorld</span><br></pre></td></tr></table></figure></div><h2 id="四、整合并导出组件"><a href="#四、整合并导出组件" class="headerlink" title="四、整合并导出组件"></a>四、整合并导出组件</h2><p>编辑 packages/index.js 文件，实现组件的全局注册</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages / index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入单个组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./HelloWorld/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以数组的结构保存组件，便于遍历</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  HelloWorld</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 install 方法</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (install.installed) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 遍历并注册全局组件</span></span><br><span class="line">  components.map(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.component(component.name, component)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  install(<span class="built_in">window</span>.Vue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 导出的对象必须具备一个 install 方法</span></span><br><span class="line">  install,</span><br><span class="line">  <span class="comment">// 组件列表</span></span><br><span class="line">  ...components</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>到这里组件就已经开发完毕</strong></p><ul><li>可以在项目入口文件 src/main.js 中引入该组件</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TagTextarea <span class="keyword">from</span> <span class="string">'../packages/index'</span></span><br><span class="line">Vue.use(TagTextarea)</span><br></pre></td></tr></table></figure></div><ul><li>然后就可以直接在App.vue中使用这个组件了</li></ul><p><img src="/posts/b9177d67/helloworld.jpg" alt></p><ul><li>组件的标签就是组件内定义的的 name</li></ul><p><img src="/posts/b9177d67/hello-world-component.jpg" alt></p><p>这时候可以 npm run serve 启动项目，测试一下组件是否有 bug</p><p><img src="/posts/b9177d67/web.jpg" alt></p><p>测试完毕，可以使用</p><h2 id="五、打包组件"><a href="#五、打包组件" class="headerlink" title="五、打包组件"></a>五、打包组件</h2><p>vue-cli 4.x 提供了一个库文件打包命令</p><p>主要需要四个参数：</p><ol><li><p>target: 默认为构建应用，改为 lib 即可启用构建库模式</p></li><li><p>name: 输出文件名</p></li><li><p>dest: 输出目录，默认为 dist，这里我们改为 lib</p></li><li><p>entry: 入口文件路径，默认为 src/App.vue，这里改为 packages/index.js</p></li></ol><ul><li>基于此，在 package.json 里的 scripts 添加一个 lib 命令</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pageage.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"lib"</span>: <span class="string">"vue-cli-service build --target lib --name hello-world --dest lib packages/index.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后执行 npm run lib 命令，编译组件</p><h2 id="六、准备发布"><a href="#六、准备发布" class="headerlink" title="六、准备发布"></a>六、准备发布</h2><ul><li>配置package.json信息<br>首先需要在 package.json 添加组件信息</li></ul><p>name: 包名，该名不能和已有的名称冲突；</p><p>version: 版本号，不能和历史版本号相同；</p><p>main: 入口文件，应指向编译后的包文件；</p><p>author：作者；</p><p>private：是否私有，需要修改为 false 才能发布到 Nexus；</p><hr><ul><li>配置忽略项<br>然后创建 .npmignore 文件，设置忽略文件<br>该文件的语法和 .gitignore 的语法一样，设置发布到 npm 时忽略哪些目录或文件</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">examples&#x2F;</span><br><span class="line">packages&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">vue.config.js</span><br><span class="line">babel.config.js</span><br><span class="line">*.map</span><br><span class="line">*.html</span><br><span class="line"> </span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"> </span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"> </span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw*</span><br></pre></td></tr></table></figure></div><h2 id="七、发布到-Nexus"><a href="#七、发布到-Nexus" class="headerlink" title="七、发布到 Nexus"></a>七、发布到 Nexus</h2><p>将npm镜像地址更改到 Nexus</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry http://xxx/xxx/nexus-npm/</span><br></pre></td></tr></table></figure></div><p>需要使用命令行登陆 Nexus 仓库</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login registry http:&#x2F;&#x2F;xxx&#x2F;xxx&#x2F;nexus-npm&#x2F;</span><br></pre></td></tr></table></figure></div><p>输入账号<br>输入密码<br>输入邮箱</p><p>第一次需要登录，下次发布组件就需要登录了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --registry&#x3D;http:&#x2F;&#x2F;xxx&#x2F;xxx&#x2F;nexus-npm&#x2F;</span><br></pre></td></tr></table></figure></div><ul><li>打开 Nexus 查看一下</li></ul><p><img src="/posts/b9177d67/nexus.jpg" alt></p><p>上传成功了，接下来就可以<code>npm install hello-world</code>安装插件在项目中使用了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;发布Nexus&quot;&gt;&lt;a href=&quot;#发布Nexus&quot; class=&quot;headerlink&quot; title=&quot;发布Nexus&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue-router导航守卫</title>
    <link href="http://www.yptup.top/posts/8e5d0036.html"/>
    <id>http://www.yptup.top/posts/8e5d0036.html</id>
    <published>2020-03-28T13:48:31.000Z</published>
    <updated>2020-03-28T14:10:26.030Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><p>正如其名，<code>vue-router</code> 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。</p><p>记住<strong>参数或查询的改变并不会触发进入/离开的导航守卫</strong>。你可以通过<a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E5%93%8D%E5%BA%94%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E7%9A%84%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">观察 $route 对象</a> 来应对这些变化，或使用 <code>beforeRouteUpdate</code> 的组件内守卫。</p><a id="more"></a><h1 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h1><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中。</p><p>每个守卫方法接收三个参数：</p><ul><li><code>to: Route</code>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">路由对象</a></li><li><code>from: Route</code>: 当前导航正要离开的路由</li><li><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。<ul><li><code>next():</code> 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</li><li><code>next(false):</code> 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li><li><code>next(&#39;/&#39;)</code> 或者 <code>next({ path: &#39;/&#39; })</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</li><li><code>next(error)</code>: (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。</li></ul></li></ul><blockquote><p>确保要调用 next 方法，否则钩子就不会被 resolved。</p></blockquote><h1 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h1><blockquote><p>2.5.0 新增</p></blockquote><p>在 2.5.0+ 你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p><h1 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h1><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h1 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h1><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>这些守卫与全局前置守卫的方法参数是一样的。</p><h1 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h1><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p><ul><li>beforeRouteEnter</li><li>beforeRouteUpdate (2.2 新增)</li><li>beforeRouteLeave</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>beforeRouteEnter</code> 守卫 不能 访问 <code>this</code>，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="keyword">this</span>.name = to.params.name</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <code>next(false)</code> 来取消。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">'Do you really want to leave? you have unsaved changes!'</span>)</span><br><span class="line">  <span class="keyword">if</span> (answer) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h1><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;导航守卫&quot;&gt;&lt;a href=&quot;#导航守卫&quot; class=&quot;headerlink&quot; title=&quot;导航守卫&quot;&gt;&lt;/a&gt;导航守卫&lt;/h1&gt;&lt;p&gt;正如其名，&lt;code&gt;vue-router&lt;/code&gt; 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。&lt;/p&gt;&lt;p&gt;记住&lt;strong&gt;参数或查询的改变并不会触发进入/离开的导航守卫&lt;/strong&gt;。你可以通过&lt;a href=&quot;https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E5%93%8D%E5%BA%94%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E7%9A%84%E5%8F%98%E5%8C%96&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;观察 $route 对象&lt;/a&gt; 来应对这些变化，或使用 &lt;code&gt;beforeRouteUpdate&lt;/code&gt; 的组件内守卫。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>12 种使用 Vue 的最佳做法</title>
    <link href="http://www.yptup.top/posts/42fe3f00.html"/>
    <id>http://www.yptup.top/posts/42fe3f00.html</id>
    <published>2020-03-22T13:38:50.000Z</published>
    <updated>2020-03-22T13:54:52.351Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>随着 VueJS 的使用越来越广泛，出现了几种最佳实践并逐渐成为标准。在本文中，主要分享在平时开发中一些有用资源和技巧，废话少说，我们开始吧。</p><a id="more"></a><h2 id="始终在-v-for-中使用-key"><a href="#始终在-v-for-中使用-key" class="headerlink" title="始终在 v-for 中使用 :key"></a>始终在 v-for 中使用 :key</h2><p>在需要操纵数据时，将<code>key</code>属性与<code>v-for</code>指令一起使用可以让程序保持恒定且可预测。</p><p>这是很有必要的，这样Vue就可以跟踪组件状态，并对不同的元素有一个常量引用。在使用动画或Vue转换时，<code>key</code> 非常有用。</p><p>如果没有<code>key</code> ，Vue只会尝试使DOM尽可能高效。 这可能意味着<code>v-for</code>中的元素可能会出现乱序，或者它们的行为难以预测。 如果我们对每个元素都有唯一的键引用，那么我们可以更好地预测Vue应用程序将如何精确地处理DOM操作。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不好的做法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'product in products'</span>&gt;</span>  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 好的做法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'product in products'</span> <span class="attr">:key</span>=<span class="string">'product.id'</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="在事件中使用短横线命名"><a href="#在事件中使用短横线命名" class="headerlink" title="在事件中使用短横线命名"></a>在事件中使用短横线命名</h2><p>在发出定制事件时，最好使用短横线命名，这是因为在父组件中，我们使用相同的语法来侦听该事件。</p><p>因此，为了确保我们各组件之间的一致性，并使您的代码更具可读性，请在两个地方都坚持使用短横线命名。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'close-window'</span>)</span><br><span class="line"><span class="comment">// 在父组件中</span></span><br><span class="line">&lt;popup-<span class="built_in">window</span> @close-<span class="built_in">window</span>=<span class="string">'handleEvent()'</span> /&gt;</span><br></pre></td></tr></table></figure></div><h2 id="使用驼峰式声明-props，并在模板中使用短横线命名来访问-props"><a href="#使用驼峰式声明-props，并在模板中使用短横线命名来访问-props" class="headerlink" title="使用驼峰式声明 props，并在模板中使用短横线命名来访问 props"></a>使用驼峰式声明 props，并在模板中使用短横线命名来访问 props</h2><p>最佳做法只是遵循每种语言的约定。 在 JS 中，驼峰式声明是标准，在HTML中，是短横线命名。 因此，我们相应地使用它们。</p><p>幸运的是，Vue 已经提供了驼峰式声明和短横线命名之间转换，因此除了实际声明它们之外，我们不必担心任何事情。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的做法</span></span><br><span class="line">&lt;PopupWindow titleText=<span class="string">'hello world'</span> /&gt; </span><br><span class="line">props: &#123; <span class="string">'title-text'</span>: <span class="built_in">String</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line">&lt;PopupWindow title-text=<span class="string">'hello world'</span> /&gt; </span><br><span class="line">props: &#123; <span class="attr">titleText</span>: <span class="built_in">String</span> &#125;</span><br></pre></td></tr></table></figure></div><h2 id="data-应始终返回一个函数"><a href="#data-应始终返回一个函数" class="headerlink" title="data 应始终返回一个函数"></a>data 应始终返回一个函数</h2><p>声明组件<code>data</code>时，<code>data</code>选项应始终返回一个函数。 如果返回的是一个对象，那么该<code>data</code>将在组件的所有实例之间共享。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的做法</span></span><br><span class="line">data: &#123;</span><br><span class="line">  name: <span class="string">'My Window'</span>,</span><br><span class="line">  articles: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当然这么写的话，控制台会报错的哦，哈哈</span></span><br></pre></td></tr></table></figure></div><p>但是，大多数情况下，我们的目标是构建可重用的组件，因此我们希望每个组件返回一个惟一的对象。我们通过在函数中返回数据对象来实现这一点。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">'My Window'</span>,</span><br><span class="line">    articles: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="不要在同个元素上同时使用v-if和v-for指令"><a href="#不要在同个元素上同时使用v-if和v-for指令" class="headerlink" title="不要在同个元素上同时使用v-if和v-for指令"></a>不要在同个元素上同时使用v-if和v-for指令</h2><p>为了过滤数组中的元素，我们很容易将<code>v-if</code>与<code>v-for</code>在同个元素同时使用。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 不好的做法</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">'product in products'</span> <span class="attr">v-if</span>=<span class="string">'product.price &lt; 500'</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>问题是在 Vue 优先使用<code>v-for</code>指令，而不是<code>v-if</code>指令。它循环遍历每个元素，然后检查<code>v-if</code>条件。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.products.map(<span class="function"><span class="keyword">function</span> (<span class="params">product</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (product.price &lt; <span class="number">500</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> product</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>这意味着，即使我们只想渲染列表中的几个元素，也必须遍历整个数组。</p><p>这对我们来当然没有任何好处。</p><p>一个更聪明的解决方案是遍历一个计算属性，可以把上面的例子重构成下面这样的：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">'product in cheapProducts'</span>&gt;</span><br><span class="line"> </span><br><span class="line">computed: &#123;</span><br><span class="line">  cheapProducts: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.products.filter(<span class="function"><span class="keyword">function</span> (<span class="params">product</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> product.price &lt; <span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这么做有几个好处：</p><ul><li><p>渲染效率更高，因为我们不会遍历所有元素</p></li><li><p>仅当依赖项更改时，才会重使用过滤后的列表</p></li><li><p>这写法有助于将组件逻辑从模板中分离出来，使组件更具可读性</p></li></ul><h2 id="用正确的定义验证我们的-props"><a href="#用正确的定义验证我们的-props" class="headerlink" title="用正确的定义验证我们的 props"></a>用正确的定义验证我们的 props</h2><p>可以这条是很重要，为什么？</p><p>在设计大型项目时，很容易忘记用于props的确切格式、类型和其他约定。如果你在一个更大的开发团队中，你的同事不会读心术，所以你要清楚地告诉他们如何使用你的组件。</p><p>因此，我们只需编写props验证即可，不必费力地跟踪组件来确定props的格式</p><p>从Vue文档中查看此示例。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  status: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'syncing'</span>,</span><br><span class="line">        <span class="string">'synced'</span>,</span><br><span class="line">        <span class="string">'version-conflict'</span>,</span><br><span class="line">        <span class="string">'error'</span></span><br><span class="line">      ].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="组件全名使用驼峰或或者短横线"><a href="#组件全名使用驼峰或或者短横线" class="headerlink" title="组件全名使用驼峰或或者短横线"></a>组件全名使用驼峰或或者短横线</h2><p>组件的通用命名约定是使用驼峰或短横线。无论我们使用哪咱，最重要的是始终保持一致。我认为驼峰方式 效果最好，因为大多数IDE自动完成功能都支持它。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 不好的做法</span><br><span class="line"></span><br><span class="line">mycomponent.vue</span><br><span class="line">myComponent.vue</span><br><span class="line">Mycomponent.vue</span><br><span class="line"></span><br><span class="line"># 好做法</span><br><span class="line"></span><br><span class="line">MyComponent.vue</span><br></pre></td></tr></table></figure></div><h2 id="基本组件应该相应地加上前缀"><a href="#基本组件应该相应地加上前缀" class="headerlink" title="基本组件应该相应地加上前缀"></a>基本组件应该相应地加上前缀</h2><p>根据Vue样式指南，基本组件是仅包含以下内容的组件：</p><ul><li>HTML 元素</li><li>额外的基础组件</li><li>第三方的UI组件</li></ul><p>为这些组件命名的最佳实践是为它们提供前缀<code>Base</code>、V或<code>App</code>。同样，只要我们在整个项目中保持一致，可以使用其中任何一种。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BaseButton.vue</span><br><span class="line">BaseIcon.vue</span><br><span class="line">BaseHeading.vue</span><br></pre></td></tr></table></figure></div><p>该命名约定的目的是使基本组件按字母顺序分组在文件系统中。 另外，通过使用webpack导入功能，我们可以搜索与命名约定模式匹配的组件，并将所有组件自动导入为Vue项目中的全局变量。</p><p>单实例组件命名应该带有前缀 The</p><p>与基本组件类似，单实例组件(每个页面使用一次，不接受任何<code>prop</code>)应该有自己的命名约定。这些组件特定于我们的应用，通常是 <code>footer</code>，<code>header</code>或<code>sider</code>。</p><p>该组件只能有一个激活实例。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TheHeader.vue</span><br><span class="line">TheFooter.vue</span><br><span class="line">TheSidebar.vue</span><br><span class="line">ThePopup.vue</span><br></pre></td></tr></table></figure></div><h2 id="保持指令简写的一致性"><a href="#保持指令简写的一致性" class="headerlink" title="保持指令简写的一致性"></a>保持指令简写的一致性</h2><p>在Vue开发人员中，一种常见的技术是使用指令的简写。例如：</p><ul><li>@是v-on的简写</li><li>: 是 v-bind 的简写</li><li><h1 id="是-v-slot-的简写"><a href="#是-v-slot-的简写" class="headerlink" title="是 v-slot 的简写"></a>是 v-slot 的简写</h1></li></ul><p>在你的Vue项目中使用这些缩写是很好的。但是要在整个项目中创建某种约定，总是使用它们或从不使用它们,会使我们的项目更具内聚性和可读性。</p><h2 id="不要在“created”和“watch”中调用方法"><a href="#不要在“created”和“watch”中调用方法" class="headerlink" title="不要在“created”和“watch”中调用方法"></a>不要在“created”和“watch”中调用方法</h2><p>Vue开发人员经常犯的一个错误是他们不必要地在<code>created</code>和<code>watch</code>中调用方法。 其背后的想法是，我们希望在组件初始化后立即运行<code>watch</code>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  不好的做法</span></span><br><span class="line">created: () &#123;</span><br><span class="line"><span class="keyword">this</span>.handleChange()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">handleChange() &#123;</span><br><span class="line"><span class="comment">// stuff happens</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">watch() &#123;</span><br><span class="line">property() &#123;</span><br><span class="line"><span class="keyword">this</span>.handleChange()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但是，Vue为此提供了内置的解决方案，这是我们经常忘记的Vue <code>watch</code>属性。</p><p>我们要做的就是稍微重组<code>watch</code>并声明两个属性：</p><ol><li><code>handler (newVal, oldVal)-</code>这是我们的<code>watch</code>方法本身。</li><li><code>immediate: true-</code>代表如果在 <code>wacth</code> 里声明了之后，就会立即先去执行里面的<code>handler</code>方法，如果为 <code>false</code>就跟我们以前的效果一样，不会在绑定的时候就执行</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  handleChange() &#123;</span><br><span class="line">    <span class="comment">// stuff happens</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch () &#123;</span><br><span class="line">  property &#123;</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">    handler() &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleChange()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="模板表达式应该只有基本的-JS-表达式"><a href="#模板表达式应该只有基本的-JS-表达式" class="headerlink" title="模板表达式应该只有基本的 JS 表达式"></a>模板表达式应该只有基本的 JS 表达式</h2><p>在模板中添加尽可能多的内联功能是很自然的。但是这使得我们的模板不那么具有声明性，而且更加复杂，也让模板会变得非常混乱。</p><p>为此，让我们看看Vue样式指南中另一个规范化字符串的示例，看看它有多混乱。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不好的做法</span></span><br><span class="line">&#123;&#123;</span><br><span class="line">  fullName.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;).join(<span class="string">' '</span>)</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>基本上，我们希望模板中的所有内容都直观明了。 为了保持这一点，我们应该将复杂的表达式重构为适当命名的组件选项。</p><p>分离复杂表达式的另一个好处是可以重用这些值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 好的做法</span></span><br><span class="line">&#123;&#123; normalizedFullName &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The complex expression has been moved to a computed property</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedFullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fullName.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;).join(<span class="string">' '</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是12个最常见的最佳实践，它们将使我们的Vue代码更易于维护、可读性更好、更专业。希望这些技巧对您有用（因为它们绝对是我一直想记住的东西）。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;随着 VueJS 的使用越来越广泛，出现了几种最佳实践并逐渐成为标准。在本文中，主要分享在平时开发中一些有用资源和技巧，废话少说，我们开始吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>TS和JS共同的数据类型</title>
    <link href="http://www.yptup.top/posts/54f489af.html"/>
    <id>http://www.yptup.top/posts/54f489af.html</id>
    <published>2020-03-20T08:54:34.000Z</published>
    <updated>2020-03-20T09:26:02.324Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>JavaScript 中现有的八个数据类型，当然这并不是 JavaScript 中的所有数据类型，而是现在版本的 TypeScript 支持的基本类型，在学习基础类型之前，我们先来看下如何为一个变量指定类型：</p><a id="more"></a><p>为一个变量指定类型的语法是使用”变量: 类型”的形式，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span></span><br></pre></td></tr></table></figure></div><p>如果你没有为这个变量指定类型，编译器会自动根据你赋给这个变量的值来推断这个变量的类型：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123</span></span><br><span class="line">num = <span class="string">'abc'</span> <span class="comment">// error 不能将类型“"123"”分配给类型“number”</span></span><br></pre></td></tr></table></figure></div><p>当我们给num赋值为123但没有指定类型时，编译器推断出了num的类型为number数值类型，所以当给num再赋 值为字符串”abc”时，就会报错。</p><p>这里还有一点要注意，就是number和Number的区别：TS中指定类型的时候要用number，这个是TypeScript的类 型关键字。而Number为JavaScript的原生构造函数，用它来创建数值类型的值，它俩是不一样的。包括你后面见 到的string、boolean等都是TypeScript的类型关键字，不是JavaScript语法，这点要区分开。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>类型为布尔类型的变量的值只能是 true 或 false，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = <span class="literal">false</span>; </span><br><span class="line">bool = <span class="literal">true</span>; </span><br><span class="line">bool = <span class="number">123</span>; <span class="comment">// error 不能将类型"123"分配给类型"boolean"</span></span><br></pre></td></tr></table></figure></div><p>当然了，赋给 bool 的值也可以是一个计算之后结果是布尔值的表达式，比如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = !!<span class="number">0</span> </span><br><span class="line"><span class="built_in">console</span>.log(bool) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>TypeScript 和 JavaScript 一样，所有数字都是浮点数，所以只有一个 number类型，而没有int或者float类型。而 且 TypeScript 还支持 ES6 中新增的二进制和八进制数字字面量，所以 TypeScript 中共支持二、八、十和十六四种进制的数值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span>; </span><br><span class="line">num = <span class="number">123</span>; </span><br><span class="line">num = <span class="string">"123"</span>; <span class="comment">// error 不能将类型"123"分配给类型"number" </span></span><br><span class="line">num = <span class="number">0b1111011</span>; <span class="comment">//  二进制的123 </span></span><br><span class="line">num = <span class="number">0o173</span>; <span class="comment">// 八进制的123 </span></span><br><span class="line">num = <span class="number">0x7b</span>; <span class="comment">// 十六进制的123</span></span><br></pre></td></tr></table></figure></div><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串类型中你可以使用单引号和双引号包裹内容，但是可能你使用的 tslint 规则会对引号进行检测，使用单引号 还是双引号可以在 tslint 规则里配置。你还可以使用 ES6 语法——模板字符串，拼接变量和字符串更为方便。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">"Lison"</span>; </span><br><span class="line">str = <span class="string">"Li"</span>; </span><br><span class="line"><span class="keyword">const</span> first = <span class="string">"Lison"</span>; </span><br><span class="line"><span class="keyword">const</span> last = <span class="string">"Li"</span>; </span><br><span class="line">str = <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// 打印结果为:Lison Li</span></span><br></pre></td></tr></table></figure></div><p>另外还有个和字符串相关的类型： 字符串字面量类型 字符串字面量类型 。即把一个字符串字面量作为一种类型，比如上面的字符 串”Lison”，当你把一个变量指定为这个字符串类型的时候，就不能再赋值为其他字符串值了，如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="string">'Lison'</span> </span><br><span class="line">str = <span class="string">'haha'</span> <span class="comment">// error 不能将类型“"haha"”分配给类型“"Lison"”</span></span><br></pre></td></tr></table></figure></div><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在 TypeScript 中有两种定义数组的方式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></div><p>第一种形式通过<code>number[]</code>的形式来指定这个类型元素均为<code>number</code>类型的数组类型，这种写法是推荐的写法，当然 你也可以使用第二种写法。注意，这两种写法中的<code>number</code>指定的是数组元素的类型，你也可以在这里将数组的元 素指定为任意类型。如果你要指定一个数组里的元素既可以是数值也可以是字符串，那么你可以使用这种方式：<code>nu mber|string[]</code>，这种方式我们在后面学习联合类型的时候会讲到。</p><p>当你使用第二种形式定义时，<code>tslint</code> 可能会警告让你使用第一种形式定义，如果你就是想用第二种形式，可以通过在 <code>tslint.json</code> 的 <code>rules</code> 中加入”array-type”: [false]关闭 <code>tslint</code> 对这条的检测。</p><p>后面我们讲接口的时候，还会讲到数组的一个特殊类型：<code>ReadonlyArray</code>，即只读数组。</p><h2 id="null-和-和-undefined"><a href="#null-和-和-undefined" class="headerlink" title="null 和 和 undefined"></a>null 和 和 undefined</h2><p><code>null</code> 和 <code>undefined</code> 有一些共同特点，所以我们放在一起讲。说它们有共同特点，是因为在 JavaScript 中，<code>undefined</code> 和 <code>null</code> 是两个基本数据类型。在 TypeScript 中，这两者都有各自的类型即 <code>undefined</code> 和 <code>null</code>，也就是说它们既是实<br>际的值，也是类型，来看实际例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;<span class="comment">// 这里可能会报一个tslint的错误：Unnecessary initialization to 'undefined'，就是不能给一个值赋undefined，但我们知道这 是可以的，所以如果你的代码规范想让这种代码合理化，可以配置tslint，将"no-unnecessary-initializer"设为false即可 </span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></div><p>默认情况下 undefined 和 null 可以赋值给任意类型的值，也就是说你可以把 undefined 赋值给 void 类型，也可以赋 值给 number 类型。当你在 tsconfig.json 的”compilerOptions”里设置了<code>&quot;strictNullChecks&quot;: true</code>时，那必须严格对 待。undefined 和 null 将只能赋值给它们自身和 void 类型，void类型我们后面会学习。</p><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>object 在 JS 中是引用类型，它和 JS 中的其他基本类型不一样，像 number、string、boolean、undefined、null 这 些都是基本类型，这些类型的变量存的是他们的值，而 object 类型的变量存的是引用，看个简单的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strInit = <span class="string">"abc"</span>; </span><br><span class="line"><span class="keyword">let</span> strClone = strInit; </span><br><span class="line">strClone = <span class="string">"efg"</span>; </span><br><span class="line"><span class="built_in">console</span>.log(strInit); <span class="comment">// 'abc'</span></span><br><span class="line"><span class="keyword">let</span> objInit = &#123; a: <span class="string">"aa"</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> objClone = objInit; </span><br><span class="line"><span class="built_in">console</span>.log(objClone) <span class="comment">// &#123;a:"aa"&#125; </span></span><br><span class="line">objInit.a = <span class="string">"bb"</span>; </span><br><span class="line"><span class="built_in">console</span>.log(objClone); <span class="comment">// &#123; a: 'bb' &#125;</span></span><br></pre></td></tr></table></figure></div><p>通过例子可以看出，我们修改 objInit 时，objClone 也被修改了，是因为 objClone 保存的是 objInit 的引用，实际上 objInit 和 objClone 是同一个对象。</p><p>当我们希望一个变量或者函数的参数的类型是一个对象的时候，使用这个类型，比如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object </span><br><span class="line">obj = &#123; name: <span class="string">'Lison'</span> &#125; </span><br><span class="line">obj = <span class="number">123</span> <span class="comment">// error 不能将类型“123”分配给类型“object”</span></span><br></pre></td></tr></table></figure></div><p>这里有一点要注意了，你可能会想到给 obj 指定类型为 object 对象类型，然后给它赋值一个对象，后面通过属性访<br>问操作符访问这个对象的某个属性，实际操作一下你就会发现会报错：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object </span><br><span class="line">obj = &#123; name: <span class="string">'Lison'</span> &#125; </span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// error 类型“object”上不存在属性“name”</span></span><br></pre></td></tr></table></figure></div><p>这里报错说类型 object 上没有 name 这个属性。如果你想要达到这种需求你应该使用我们后面章节要讲到的接口， 那 object 类型适合什么时候使用呢？我们前面说了，当你希望一个值必须是对象而不是数值等类型时，比如我们定 义一个函数，参数必须是对象，这个时候就用到object类型了：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKeys</span> (<span class="params">obj: object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj) <span class="comment">// 会以列表的形式返回obj中的值 </span></span><br><span class="line">&#125; </span><br><span class="line">getKeys(&#123; a: <span class="string">'a'</span> &#125;) <span class="comment">// ['a'] </span></span><br><span class="line">getKeys(<span class="number">123</span>) <span class="comment">// error 类型“123”的参数不能赋给类型“object”的参数</span></span><br></pre></td></tr></table></figure></div><p>这里涉及到的函数的相关知识，后续会有详细介绍，你只要在这里明白object类型的使用就可以了。</p><h2 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h2><p>Symbol 是 ES6 加入的新的基础数据类型，因为它的知识比较多，所以我们单独在后面的一节进行讲解。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;JavaScript 中现有的八个数据类型，当然这并不是 JavaScript 中的所有数据类型，而是现在版本的 TypeScript 支持的基本类型，在学习基础类型之前，我们先来看下如何为一个变量指定类型：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue组件设计</title>
    <link href="http://www.yptup.top/posts/f8035fa5.html"/>
    <id>http://www.yptup.top/posts/f8035fa5.html</id>
    <published>2020-03-19T14:28:56.000Z</published>
    <updated>2020-03-22T09:15:34.819Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>由于近日找工作的原因，面试的时候，被面试官问到Vue组件的设计问题，咳咳，然后一时语塞，竟然不知道怎么回答，可能由于态度过于紧张导致，后来自己梳理了一下，Vue组件的设计原则，以本文为记录</p><a id="more"></a><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/posts/f8035fa5/component1.png" alt></p><hr><p><img src="/posts/f8035fa5/component2.png" alt></p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><blockquote><p>注：虽然现在已经出现大量优秀的UI框架，如elementUI，iviewUI，单从业务、功能及性能仍不能满足项目所有需求，这时，就要考虑如何设计适合自己的组件。</p></blockquote><p>组件设计其实就是模块的设计。我把它分为4个部分：<strong>UI设计，基本功能，业务拓展需求，性能</strong>。以下我已我自己设计的高性能table为例，剖析我是如何优雅的设计一个组件。</p><p><img src="/posts/f8035fa5/setComponent.png" alt></p><ul><li>UI设计交互就好比模块的<code>import</code>、<code>exports</code>，要保持统一的出口。即统一风格配色，统一交互。</li><li>基本功能就好比模块的基本作用。必须保证基本功能的同时，兼容其他。</li><li>业务拓展就好比模块间的集成，这就要求组件可依耐性低、可拔插集成、高聚低耦合。</li><li>性能要考虑到大量数据或大量计算与<code>GUI</code>渲染线程互斥导致的性能问题。</li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><blockquote><p>注：一个组件的设计先从基本功能开始。</p></blockquote><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>先看table的基本功能包括：头部、序号列、多选列、左右固定列、总计行；</p><p>业务拓展功能：列搜索。</p><blockquote><p>考虑到左右固定列需要单独的头部、搜索行、内容、总计行。可将km-grid设计为3个单独的table，每个单独的table都是一个独立的km-grid-item。</p></blockquote><p><img src="/posts/f8035fa5/main.png" alt></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"cls"</span> <span class="attr">:style</span>=<span class="string">"tableStyles"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">km-grid-item</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-if</span>=<span class="string">"fixedLeftCol&amp;&amp;fixedLeftCol.length"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">fixed</span>=<span class="string">"left"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-on</span>=<span class="string">"$listeners"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:columns</span>=<span class="string">"fixedLeftCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:header-styles</span>=<span class="string">"leftFixedHeaderStyles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:body-styles</span>=<span class="string">"leftFixedBodyStyles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">km-grid-item</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">km-grid-item</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-on</span>=<span class="string">"$listeners"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:columns</span>=<span class="string">"centerCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:expandColumn</span>=<span class="string">"expandCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:header-styles</span>=<span class="string">"headerStyles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:body-styles</span>=<span class="string">"bodyStyles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">km-grid-item</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">km-grid-item</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-if</span>=<span class="string">"fixedRightCol&amp;&amp;fixedRightCol.length"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">fixed</span>=<span class="string">"right"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-on</span>=<span class="string">"$listeners"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:columns</span>=<span class="string">"fixedRightCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:header-styles</span>=<span class="string">"rightFixedHeaderStyles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:body-styles</span>=<span class="string">"rightFixedBodyStyles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">km-grid-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>这样，整个table的设计便会轻便且简洁。</p></blockquote><p>单个table的设计又怎么办呢？<br>那我是如何在单个组件驱动其他组件的呢？</p><p><img src="/posts/f8035fa5/setComponent2.png" alt></p><p>首先在km-grid-item mounted是，发送当前的VueComponent：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.dispatch(<span class="string">"KmGrid"</span>, <span class="string">"on-km-grid-item-add"</span>, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在km-grid接收：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;  </span><br><span class="line"><span class="keyword">this</span>.$on(<span class="string">'on-km-grid-item-add'</span>, item =&gt; &#123;    </span><br><span class="line"><span class="keyword">this</span>.itemVms.push(item)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>接着在事件中触发同步驱动整个table：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HandleBodyScroll (event) &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs.header.scrollLeft = event.target.scrollLeft  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.$parent.itemVms &amp;&amp; <span class="keyword">this</span>.$parent.itemVms.length &gt; <span class="number">0</span>) &#123; </span><br><span class="line">   <span class="keyword">this</span>.$parent.itemVms.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> scrollDom = v.$el.querySelectorAll(<span class="string">'.km-grid-noscroll'</span>)[<span class="number">0</span>]      </span><br><span class="line"> <span class="keyword">if</span> (scrollDom) &#123; </span><br><span class="line">    scrollDom.scrollTop = event.target.scrollTop     </span><br><span class="line">  &#125;    </span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="业务拓展需求"><a href="#业务拓展需求" class="headerlink" title="业务拓展需求"></a>业务拓展需求</h3><p>业务拓展需求有：根据行数据显示不同按钮，不同行为，数据格式化，行下拉动态渲染。</p><h4 id="根据行数据显示不同按钮"><a href="#根据行数据显示不同按钮" class="headerlink" title="根据行数据显示不同按钮"></a>根据行数据显示不同按钮</h4><p><img src="/posts/f8035fa5/setComponent3.png" alt></p><p>把需求转化为数据操作就是先获取行数据，根据行数据展示不同的按钮，然后自定义行为在业务中编写：</p><p>先定义column及操作:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">title: <span class="string">'操作'</span>,  </span><br><span class="line">type: <span class="string">'handle'</span>,  </span><br><span class="line">handle: [</span><br><span class="line">   &#123;      </span><br><span class="line">      type: <span class="string">'edit'</span>    </span><br><span class="line">&#125;,    </span><br><span class="line">&#123;      </span><br><span class="line">  type: <span class="string">'warehouse'</span>,      </span><br><span class="line">  icon: <span class="string">'km-stock'</span>,      </span><br><span class="line">  click: <span class="function"><span class="params">row</span> =&gt;</span> &#123;        </span><br><span class="line">      <span class="keyword">this</span>.$refs.listpage.showList = <span class="literal">false</span>        </span><br><span class="line">  <span class="keyword">this</span>.$refs.WarehouseInfo.loadEntity(row.id)      </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;  </span><br><span class="line">],  </span><br><span class="line">width: <span class="number">90</span>,  </span><br><span class="line">align: <span class="string">'left'</span>,  </span><br><span class="line">fixed: <span class="string">'right'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>根据行数据渲染：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">showCustomOperate: &#123;  </span><br><span class="line">   warehouse: <span class="function"><span class="params">row</span> =&gt;</span> &#123;    </span><br><span class="line">      <span class="keyword">switch</span> (row.type) &#123;      </span><br><span class="line">     <span class="keyword">case</span> <span class="string">'4'</span>:        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>      </span><br><span class="line">     <span class="keyword">default</span>:        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RebuildTableDataByColOperate (columns, data) &#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;    </span><br><span class="line">    handles.forEach(<span class="function"><span class="params">handle</span> =&gt;</span> &#123;</span><br><span class="line">  v[<span class="string">'__'</span> + handle.type] =       </span><br><span class="line">    <span class="keyword">this</span>.showCustomOperate[handle.type](v) || <span class="literal">false</span></span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HandleIconClick (item, row) &#123;</span><br><span class="line">  <span class="keyword">return</span> item.click(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>通过这种集成方式组件不必关心业务需求，自动化配置自定义按钮及操作行为，可拔插的集成，避免影响平台组件维护。</p></blockquote><h4 id="行下拉动态渲染"><a href="#行下拉动态渲染" class="headerlink" title="行下拉动态渲染"></a>行下拉动态渲染</h4><p><img src="/posts/f8035fa5/setComponent4.png" alt></p><p>首先在columns里配置：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   type: <span class="string">'expand'</span>,  </span><br><span class="line">   width: <span class="number">50</span>,  </span><br><span class="line">   render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;    </span><br><span class="line">      <span class="keyword">return</span> h(inventoryControl, &#123;      </span><br><span class="line">     props: &#123;        </span><br><span class="line">   row: params.row      </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">  inventoryControl: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/view/main-components/inventoryControl.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后在km-grid-item的tr里面根据行数据动态render：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"!fixed&amp;&amp;expandColumn.render"</span> <span class="attr">:class</span>=<span class="string">"cls+'-tr-expand'"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">v-if</span>=<span class="string">"row._clicked"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">td-render</span> <span class="attr">:row</span>=<span class="string">"row"</span> <span class="attr">:render</span>=<span class="string">"expandColumn.render"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td-render</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>通过这种集成方式组件不必关心业务需求，返回行数据让业务自己交互，不会污染当前组件DOM及多余的代码逻辑。</p></blockquote><h4 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h4><p><img src="/posts/f8035fa5/setComponent5.png" alt></p><p>数据格式化是一个老生常谈的问题，例如下面我们只用通过这个方法即可格式化系统数据：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">GetTdData(row, col) &#123;</span><br><span class="line"><span class="keyword">if</span> (col.enumData) &#123;</span><br><span class="line"><span class="keyword">let</span> desc = (col.desc &amp;&amp; row[col.desc(row)]) ? <span class="string">'('</span> + row[col.desc(row)] + <span class="string">')'</span> : <span class="string">''</span></span><br><span class="line"><span class="keyword">return</span> col.desc ? col.enumData[row[col.key]] + desc : col.enumData[row[col.key]]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.valueKey) &#123;</span><br><span class="line"><span class="keyword">return</span> row[col.key] ? <span class="string">`[<span class="subst">$&#123;row[col.key]&#125;</span>]<span class="subst">$&#123;row[col.valueKey]&#125;</span>`</span> : <span class="string">''</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="string">'date'</span>, <span class="string">'datetime'</span>, <span class="string">'time'</span>].includes(col.type)) &#123;</span><br><span class="line"><span class="keyword">const</span> dateEnum = &#123;</span><br><span class="line">date: <span class="string">'yyyy-MM-dd'</span>,</span><br><span class="line">datetime: <span class="string">'yyyy-MM-dd HH:mm:ss'</span>,</span><br><span class="line">time: <span class="string">'HH:mm:ss'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!row[col.key]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> formatDate(row[col.key], col.format || dateEnum[col.type])</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.bizType &amp;&amp; [<span class="string">'price'</span>, <span class="string">'amt'</span>, <span class="string">'qty'</span>, <span class="string">'rate'</span>].includes(col.bizType)) &#123;</span><br><span class="line"><span class="keyword">const</span> formatEnum = &#123;</span><br><span class="line">price: <span class="number">4</span>,</span><br><span class="line">amt: <span class="number">2</span>,</span><br><span class="line">qty: <span class="number">3</span>,</span><br><span class="line">rate: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (typeOf(row[col.key]) === <span class="string">'null'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'-'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseFloat</span>(row[col.key]).toFixed(col.format || formatEnum[col.bizType])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> row[col.key]</span><br><span class="line">&#125;, GetTotalData(col) &#123;</span><br><span class="line"><span class="keyword">if</span> (!col.total) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.totalValue) &#123;</span><br><span class="line"><span class="keyword">return</span> col.totalValue</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.bizType &amp;&amp; [<span class="string">'price'</span>, <span class="string">'qty'</span>, <span class="string">'amt'</span>].includes(col.bizType)) &#123;</span><br><span class="line"><span class="keyword">const</span> formatEnum = &#123;</span><br><span class="line">price: <span class="number">4</span>,</span><br><span class="line">qty: <span class="number">3</span>,</span><br><span class="line">amt: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.$parent.data.map(<span class="function"><span class="params">row</span> =&gt;</span> <span class="built_in">Number</span>(row[col.key])).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>).toFixed(col.format ||</span><br><span class="line">formatEnum[col.bizType])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这种默认配置是前端与后端约定好，前端在columns规定好，即可有序展开。</p><blockquote><p>总结一下就是，拓展需求就是要可尽量少的配置、自动化、可拔插、不污染组件、减少增加组件逻辑、无代码侵入的支持业务功能。</p></blockquote><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>经测试，<code>km-grid</code>拥有高效的性能并兼容主流浏览器（ie11以上，包含ie11）。对比了同样的<code>iview-table</code>，<code>element-table</code>，在500条级数据时，<code>km-grid</code>表现更佳，大大超越<code>iview-table</code>。各位同学可直接在<code>npm install</code>。</p><h2 id="组件API设计"><a href="#组件API设计" class="headerlink" title="组件API设计"></a>组件API设计</h2><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><table><thead><tr><th>属性名</th><th>属性类型</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>Array</td><td>元数据</td></tr><tr><td>headerRowHeight</td><td>Number</td><td>头部高度</td></tr><tr><td>rowHeight</td><td>Number</td><td>行高度</td></tr><tr><td>totalRowHeight</td><td>Number</td><td>总计高度</td></tr><tr><td>height</td><td>Number</td><td>指定高度</td></tr><tr><td>width</td><td>Number</td><td>指定宽度</td></tr><tr><td>border</td><td>Boolean</td><td>显示分割线</td></tr><tr><td>pageSize</td><td>Number</td><td>分页数据</td></tr><tr><td>current</td><td>Number</td><td>分页数据</td></tr><tr><td>draggable</td><td>Boolean</td><td>是否可拖拽列宽</td></tr><tr><td>clickAsync</td><td>Number</td><td>点击事件是否异步加载</td></tr></tbody></table><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>on-selection-change</td><td>全选，单选时触发</td></tr><tr><td>on-row-click</td><td>点击</td></tr><tr><td>on-row-dblclick</td><td>双击</td></tr><tr><td>on-sort-change</td><td>排序</td></tr></tbody></table><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>GetSelectRows</td><td>获取勾选选行</td></tr><tr><td>ClearSelectRows</td><td>清除沟选行</td></tr><tr><td>GetCurrentRow</td><td>获取选中行</td></tr></tbody></table><p><code>km-grid</code>在设计上精简，使用<code>v-on=&quot;$listeners&quot;</code>向上抛出事件，所以写<code>km-grid-item的emit</code>事件不用重复的再往上面抛，而对于需要对外开放的API，<code>km-grid</code>则故意将需要开放的API写在<code>km-grid</code>里面。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public API so i Expose in km-grid</span></span><br><span class="line">GetSelectRows() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.itemVms[<span class="number">0</span>].GetSelectRows()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// public API so i Expose in km-grid</span></span><br><span class="line">ClearSelectRows() &#123;</span><br><span class="line"><span class="keyword">this</span>.data.forEach(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(row, '_checked', false)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">// public API so i Expose in km-grid</span><br><span class="line">GetCurrentRow() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.data.find(<span class="function"><span class="params">row</span> =&gt;</span> row._clicked)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="可编辑的双向绑定table"><a href="#可编辑的双向绑定table" class="headerlink" title="可编辑的双向绑定table"></a>可编辑的双向绑定table</h3><p>现在的前端越来越后后端化，从npm仓库到模块化，自动化，前端早已不是几年前的那个画页面前端。更多的考虑是模块化组件的同时，处理好组件与平台，平台与业务这三方面的“交互”。如果你能很好的理解VUE的VueComponent响应式，将在VUE的海洋如鱼得水，同时也对面向对象编程有自己独到的见解。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;由于近日找工作的原因，面试的时候，被面试官问到Vue组件的设计问题，咳咳，然后一时语塞，竟然不知道怎么回答，可能由于态度过于紧张导致，后来自己梳理了一下，Vue组件的设计原则，以本文为记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>九种跨域方式实现原理</title>
    <link href="http://www.yptup.top/posts/cb3decc6.html"/>
    <id>http://www.yptup.top/posts/cb3decc6.html</id>
    <published>2020-03-12T15:40:01.000Z</published>
    <updated>2020-03-12T16:05:00.533Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。</p><a id="more"></a><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><h3 id="什么是同源策略及其限制内容？"><a href="#什么是同源策略及其限制内容？" class="headerlink" title="什么是同源策略及其限制内容？"></a>什么是同源策略及其限制内容？</h3><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p><img src="/posts/cb3decc6/cross-domain.png" alt></p><p><strong>同源策略限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><p><strong>但是有三个标签是允许跨域加载资源：</strong></p><ul><li><code>&lt;img src=XXX&gt;</code></li><li><code>&lt;link href=XXX&gt;</code></li><li><code>&lt;script src=XXX&gt;</code></li></ul><h3 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h3><p><strong>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域</strong>。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p><img src="/posts/cb3decc6/cross-domain1.png" alt></p><p>特别说明两点：</p><p><strong>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</strong></p><p><strong>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。</strong></p><p>这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</strong>你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h4 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h4><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</p><h4 id="JSONP和AJAX对比"><a href="#JSONP和AJAX对比" class="headerlink" title="JSONP和AJAX对比"></a>JSONP和AJAX对比</h4><p>JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><h4 id="JSONP优缺点"><a href="#JSONP优缺点" class="headerlink" title="JSONP优缺点"></a>JSONP优缺点</h4><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</p><h4 id="JSONP的实现流程"><a href="#JSONP的实现流程" class="headerlink" title="JSONP的实现流程"></a>JSONP的实现流程</h4><ul><li><p>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。</p></li><li><p>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</p></li><li><p>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是<code>show(&#39;我不爱你&#39;)</code>。</p></li><li><p>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</p></li></ul><p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP函数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// wd=b&amp;callback=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:3000/say'</span>,</span><br><span class="line">  params: &#123; <span class="attr">wd</span>: <span class="string">'Iloveyou'</span> &#125;,</span><br><span class="line">  callback: <span class="string">'show'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面这段代码相当于向<code>http://localhost:3000/say?wd=Iloveyou&amp;callback=show</code>这个地址请求数据，然后后台返回<code>show(&#39;我不爱你&#39;)</code>，最后会运行<code>show()</code>这个函数，打印出’我不爱你’</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.get(<span class="string">'/say'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; wd, callback &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(wd) <span class="comment">// Iloveyou</span></span><br><span class="line">  <span class="built_in">console</span>.log(callback) <span class="comment">// show</span></span><br><span class="line">  res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>('我不爱你')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></div><h4 id="jQuery的jsonp形式"><a href="#jQuery的jsonp形式" class="headerlink" title="jQuery的jsonp形式"></a>jQuery的jsonp形式</h4><p>JSONP都是GET和异步请求的，不存在其他的请求方式和同步请求，且jQuery默认就会给JSONP的请求清除缓存。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"http://crossdomain.com/jsonServerResponse"</span>,</span><br><span class="line">dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">type:<span class="string">"get"</span>,<span class="comment">//可以省略</span></span><br><span class="line">jsonpCallback:<span class="string">"show"</span>,<span class="comment">//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span></span><br><span class="line">jsonp:<span class="string">"callback"</span>,<span class="comment">//-&gt;把传递函数名的那个形参callback，可省略</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><strong>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。</strong></p><p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求</p><p>条件1：使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件2：Content-Type 的值仅限于下列三者之一：</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><h4 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h4><p>不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>我们用<code>PUT</code>向后台请求时，属于复杂请求，后台需做如下配置：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 预检的存活时间</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">  res.end() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义后台返回的内容</span></span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiamen'</span> <span class="comment">// cookie不能跨域</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'xiamen'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">      <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server1.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>] <span class="comment">//设置白名单</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'jw'</span>) <span class="comment">//返回一个响应头，后台需设置</span></span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure></div><p>上述代码由<code>http://localhost:3000/index.html</code>向<code>http://localhost:4000/</code>跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。</p><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><p><code>postMessage</code>是<code>HTML5 XMLHttpRequest Level 2</code>中的API，且是为数不多可以跨域操作的<code>window</code>属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p><code>postMessage()</code>方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p><blockquote><p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p></blockquote><ul><li>message: 将要发送到其他 window的数据。</li><li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li><li>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“我爱你”,然后后者传回”我不爱你”。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">&lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;&lt;<span class="regexp">/iframe&gt; /</span><span class="regexp">/等它加载完触发一个事件</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/内嵌在http:/</span><span class="regexp">/localhost:3000/</span>a.html</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span><br><span class="line">frame.contentWindow.postMessage(<span class="string">'我爱你'</span>, <span class="string">'http://localhost:4000'</span>) <span class="comment">//发送数据</span></span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//接受返回数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.data) <span class="comment">//我不爱你</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">  <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data) <span class="comment">//我爱你</span></span><br><span class="line">    e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>原生WebSocket API使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>我们先来看个例子：本地文件<code>socket.html</code>向localhost:3000发生数据和接受数据</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// socket.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      socket.send(<span class="string">'我爱你'</span>);<span class="comment">//向服务器发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);<span class="comment">//记得安装ws</span></span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">'我不爱你'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="Node中间件代理-两次跨域"><a href="#Node中间件代理-两次跨域" class="headerlink" title="Node中间件代理(两次跨域)"></a>Node中间件代理(两次跨域)</h3><p>实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。 代理服务器，需要做以下几个步骤：</p><ul><li>接受客户端请求 。</li><li>将请求 转发给服务器。</li><li>拿到服务器 响应 数据。</li><li>将 响应 转发给客户端。</li></ul><p><img src="/posts/cb3decc6/node.png" alt></p><p>我们先来看个例子：本地文件index.html文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html(http://127.0.0.1:5500)</span></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">url: 'http:/</span><span class="regexp">/localhost:3000',</span></span><br><span class="line"><span class="regexp">type: 'post',</span></span><br><span class="line"><span class="regexp">data: &#123; name: 'xiamen', password: '123456' &#125;,</span></span><br><span class="line"><span class="regexp">contentType: 'application/</span>json;charset=utf<span class="number">-8</span><span class="string">',</span></span><br><span class="line"><span class="string">success: function(result) &#123;</span></span><br><span class="line"><span class="string">  console.log(result) // &#123;"title":"fontend","password":"123456"&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">error: function(msg) &#123;</span></span><br><span class="line"><span class="string">  console.log(msg)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server1.js 代理服务器(http://localhost:3000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 第一步：接受客户端请求</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'Content-Type'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 第二步：将请求转发给服务器</span></span><br><span class="line">  <span class="keyword">const</span> proxyRequest = http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="number">4000</span>,</span><br><span class="line">        url: <span class="string">'/'</span>,</span><br><span class="line">        method: request.method,</span><br><span class="line">        headers: request.headers</span><br><span class="line">      &#125;,</span><br><span class="line">      serverResponse =&gt; &#123;</span><br><span class="line">        <span class="comment">// 第三步：收到服务器的响应</span></span><br><span class="line">        <span class="keyword">var</span> body = <span class="string">''</span></span><br><span class="line">        serverResponse.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">          body += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        serverResponse.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'The data is '</span> + body)</span><br><span class="line">          <span class="comment">// 第四步：将响应结果转发给浏览器</span></span><br><span class="line">          response.end(body)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end()</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The proxyServer is running at http://localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js(http://localhost:4000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">title</span>: <span class="string">'fontend'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The server is running at http://localhost:4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出<code>{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p><h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>实现原理类似于<code>Node</code>中间件代理，需要你搭建一个中转<code>nginx</code>服务器，用于转发请求。</p><p>使用<code>nginx</code>反向代理实现跨域，是最简单的跨域方式。只需要修改<code>nginx</code>的配置即可解决跨域问题，支持所有浏览器，支持<code>session</code>，不需要修改任何代码，并且不会影响服务器性能。</p><p>实现思路：通过<code>nginx</code>配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改<code>cookie</code>中domain信息，方便当前域<code>cookie</code>写入，实现跨域登录。</p><p>先下载<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx</a>，然后将nginx目录下的nginx.conf修改如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最后通过命令行<code>nginx -s reload</code>启动nginx</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure></div><h3 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h3><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>其中a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html(http://localhost:3000/b.html)</span></span><br><span class="line"> &lt;iframe src=<span class="string">"http://localhost:4000/c.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span> id=<span class="string">"iframe"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   let first = true</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/ onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line"><span class="regexp">   function load() &#123;</span></span><br><span class="line"><span class="regexp">     if(first)&#123;</span></span><br><span class="line"><span class="regexp">     /</span><span class="regexp">/ 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line"><span class="regexp">       let iframe = document.getElementById('iframe');</span></span><br><span class="line"><span class="regexp">       iframe.src = 'http:/</span><span class="regexp">/localhost:3000/</span>b.html<span class="string">';</span></span><br><span class="line"><span class="string">       first = false;</span></span><br><span class="line"><span class="string">     &#125;else&#123;</span></span><br><span class="line"><span class="string">     // 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span><br><span class="line"><span class="string">       console.log(iframe.contentWindow.name);</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"> &lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>b.html为中间代理页，与a.html同域，内容为空。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.html(http://localhost:4000/c.html)</span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.name = <span class="string">'我不爱你'</span>  </span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h3><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。<br>同样的，a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line"> &lt;iframe src=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   window.onhashchange = function () &#123; /</span><span class="regexp">/检测hash的变化</span></span><br><span class="line"><span class="regexp">     console.log(location.hash);</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.parent.parent.location.hash = location.hash </span><br><span class="line">   <span class="comment">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.html</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);</span><br><span class="line"> <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"> iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure></div><h3 id="document-domain-iframe"><a href="#document-domain-iframe" class="headerlink" title="document.domain + iframe"></a>document.domain + iframe</h3><p>该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中a的值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line"> helloa</span><br><span class="line">  &lt;iframe src=<span class="string">"http://b.zf1.cn:3000/b.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span> id=<span class="string">"frame"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    document.domain = 'zf1.cn'</span></span><br><span class="line"><span class="regexp">    function load() &#123;</span></span><br><span class="line"><span class="regexp">      console.log(frame.contentWindow.a);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">   hellob</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li><li>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li><li>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。</li><li>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</li></ul><p>给大家推荐一个好用的BUG监控工具<a href="https://www.fundebug.com/?utm_source=liao" target="_blank" rel="noopener">Fundebug</a>，欢迎免费试用！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">window.postMessage</a><br><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a><br><a href="https://juejin.im/post/5afd79aa6fb9a07ac162a540" target="_blank" rel="noopener">深入跨域问题(4) - 利用代理解决跨域</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《终身成长》读后感</title>
    <link href="http://www.yptup.top/posts/40c42b37.html"/>
    <id>http://www.yptup.top/posts/40c42b37.html</id>
    <published>2020-03-02T15:33:51.000Z</published>
    <updated>2020-03-02T15:44:36.593Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>&ensp;&ensp;&ensp;&ensp;记得曾经读过一句话：在这个世界上，有八十岁的“常青树”，也有二十岁的“朽木”。活到老，学到老，只有不断学习才能顺应现代快速发展的时代。而《终身成长》这本书让我们从思维模式的角度，找到了自己恐惧、苦恼和失败的原因。同时，它也帮助我们突破这些阻碍，获得更多成长。</p><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;本书把人的思维模式分成两种：一种是固定型思维，他们对自身能力评估非好即坏；相信自身才能是不变的，不屑于努力，并且热衷、在乎别人的评判和结果导向，总是掩饰自己不足，往往更易焦虑和抑郁，遇挫时容易放弃，拒绝自省，一旦失败，一蹶不振。而成长型思维模式的人相信能力可以培养，认为能力是可以通过努力来培养的，信任团队和人才的力量，会把挫折、失败当作一种体验和学习经历，善于总结经验，不会因为失败而气馁。</p><p>&ensp;&ensp;&ensp;&ensp;固定型思维决定你能用多长时间进入一个专业领域；成长型思维决定你能在专业领域走多远。固定型思维模式会限制人的成就，相反，成长型思维模式能够帮助人们的发展能力，取得成就。书中作者通过对某医科大学学生的行为跟踪观察，发现拥有成长型思维模式的学生，在学习中注重学习方法，他们善于寻找学习规律，并能从错误中吸取教训。</p><p>&ensp;&ensp;&ensp;&ensp;那么如何实现终身成长呢？其实，我们每个人都是固定型思维和成长型思维的矛盾体。我们首先要能勇于发现并承认自己的固定型思维，分析自身原因，勇敢面对和接受，用成长型思维去帮助自己拥有正确的成长心态，训练积极强大的内心，通过自己的努力，克服脆弱、克服恐惧，消除自我，化阻碍为支持，从失败和挫折里受益，让自己变得更强大。成长是每个人一辈子的事，它无关年纪。无论何时，停滞成长，才是最可怕的衰老。改变也许艰难，却从未有人说过不值。从现在起，就培养我们的成长型思维吧，让我们终身成长。</p><blockquote><p>注：吾不以不及第为耻,吾以不及第动吾心为耻<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;——王阳明</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;记得曾经读过一句话：在这个世界上，有八十岁的“常青树”，也有二十岁的“朽木”。活到老，学到老，只有不断学习才能顺应现代快速发展的时代。而《终身成长》这本书让我们从思维模式的角度，找到了自己恐惧、苦恼和失败的原因。同时，它也帮助我们突破这些阻碍，获得更多成长。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/categories/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/tags/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>echarts疫情地图</title>
    <link href="http://www.yptup.top/posts/9651c684.html"/>
    <id>http://www.yptup.top/posts/9651c684.html</id>
    <published>2020-02-09T06:12:01.000Z</published>
    <updated>2020-03-09T06:25:35.683Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>最近每天早上醒来第一件事就是看看当天新增人数是否减少了，出院了多少，每个省目前还有多少确诊人数，见到最多的就是中国地图的分布图，由于各位都憋在家里不能出门，自己也使用echarts实现了一个。效果如下：<br><a href="/production/epidemic.html">点击查看疫情分布图</a><br><img src="/posts/9651c684/echarts.webp" alt="疫情地图"></p><h2 id="认识echarts"><a href="#认识echarts" class="headerlink" title="认识echarts"></a>认识echarts</h2><p>ECharts，缩写来自 Enterprise Charts，商业级数据图表，是百度的一个开源的数据可视化工具，一个纯 Javascript 的图表库。目前很多商业项目都在使用，不但好用而且是免费。</p><ol><li><p>官网上面很多实例可供大家参考，这是地图的实例连接<a href="https://www.echartsjs.com/examples/en/editor.html?c=doc-example/map-visualMap-pieces&edit=1" target="_blank" rel="noopener">echarts</a></p></li><li><p>在页面左侧框中输入一下数据:</p></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'中国疫情图'</span>,</span><br><span class="line">        left: <span class="string">'center'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'left'</span>,</span><br><span class="line">        data: [<span class="string">'中国疫情图'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    visualMap: &#123;</span><br><span class="line">        type: <span class="string">'piecewise'</span>,</span><br><span class="line">        pieces: [</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">1000</span>, <span class="attr">max</span>: <span class="number">1000000</span>, <span class="attr">label</span>: <span class="string">'大于等于1000人'</span>, <span class="attr">color</span>: <span class="string">'#372a28'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">500</span>, <span class="attr">max</span>: <span class="number">999</span>, <span class="attr">label</span>: <span class="string">'确诊500-999人'</span>, <span class="attr">color</span>: <span class="string">'#4e160f'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">100</span>, <span class="attr">max</span>: <span class="number">499</span>, <span class="attr">label</span>: <span class="string">'确诊100-499人'</span>, <span class="attr">color</span>: <span class="string">'#974236'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">10</span>, <span class="attr">max</span>: <span class="number">99</span>, <span class="attr">label</span>: <span class="string">'确诊10-99人'</span>, <span class="attr">color</span>: <span class="string">'#ee7263'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'确诊1-9人'</span>, <span class="attr">color</span>: <span class="string">'#f5bba7'</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">        color: [<span class="string">'#E0022B'</span>, <span class="string">'#E09107'</span>, <span class="string">'#A3E00B'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        top: <span class="string">'center'</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">            mark: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            dataView: &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">            restore: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            saveAsImage: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    roamController: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        mapTypeControl: &#123;</span><br><span class="line">            <span class="string">'china'</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'确诊数'</span>,</span><br><span class="line">            type: <span class="string">'map'</span>,</span><br><span class="line">            mapType: <span class="string">'china'</span>,</span><br><span class="line">            roam: <span class="literal">false</span>,</span><br><span class="line">            label: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                color: <span class="string">'rgb(249, 249, 249)'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: [</span><br><span class="line">               &#123;</span><br><span class="line">                  name: <span class="string">'北京'</span>,</span><br><span class="line">                  value: <span class="number">212</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'天津'</span>,</span><br><span class="line">                  value: <span class="number">60</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'上海'</span>,</span><br><span class="line">                  value: <span class="number">208</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'重庆'</span>,</span><br><span class="line">                  value: <span class="number">337</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'河北'</span>,</span><br><span class="line">                  value: <span class="number">126</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'河南'</span>,</span><br><span class="line">                  value: <span class="number">675</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'云南'</span>,</span><br><span class="line">                  value: <span class="number">117</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'辽宁'</span>,</span><br><span class="line">                  value: <span class="number">74</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'黑龙江'</span>,</span><br><span class="line">                  value: <span class="number">155</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'湖南'</span>,</span><br><span class="line">                  value: <span class="number">593</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'安徽'</span>,</span><br><span class="line">                  value: <span class="number">480</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'山东'</span>,</span><br><span class="line">                  value: <span class="number">270</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'新疆'</span>,</span><br><span class="line">                  value: <span class="number">29</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'江苏'</span>,</span><br><span class="line">                  value: <span class="number">308</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'浙江'</span>,</span><br><span class="line">                  value: <span class="number">829</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'江西'</span>,</span><br><span class="line">                  value: <span class="number">476</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'湖北'</span>,</span><br><span class="line">                  value: <span class="number">13522</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'广西'</span>,</span><br><span class="line">                  value: <span class="number">139</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'甘肃'</span>,</span><br><span class="line">                  value: <span class="number">55</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'山西'</span>,</span><br><span class="line">                  value: <span class="number">74</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'内蒙古'</span>,</span><br><span class="line">                  value: <span class="number">34</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'陕西'</span>,</span><br><span class="line">                  value: <span class="number">142</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'吉林'</span>,</span><br><span class="line">                  value: <span class="number">42</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'福建'</span>,</span><br><span class="line">                  value: <span class="number">179</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'贵州'</span>,</span><br><span class="line">                  value: <span class="number">56</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'广东'</span>,</span><br><span class="line">                  value: <span class="number">797</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'青海'</span>,</span><br><span class="line">                  value: <span class="number">15</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'西藏'</span>,</span><br><span class="line">                  value: <span class="number">1</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'四川'</span>,</span><br><span class="line">                  value: <span class="number">282</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'宁夏'</span>,</span><br><span class="line">                  value: <span class="number">34</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'海南'</span>,</span><br><span class="line">                  value: <span class="number">79</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'台湾'</span>,</span><br><span class="line">                  value: <span class="number">10</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'香港'</span>,</span><br><span class="line">                  value: <span class="number">15</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'澳门'</span>,</span><br><span class="line">                  value: <span class="number">9</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>此时页面右侧就会渲染出中国疫情地图了。以上是Echarts的Example环境，真实项目中需要加入china.js。</p><ol start="3"><li>在自己的项目中如何使用echarts实现疫情图，静态页面代码如下：</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;疫情地图展示&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    #myEcharts &#123;</span></span><br><span class="line"><span class="regexp">      width: 800px;</span></span><br><span class="line"><span class="regexp">      height: 500px;</span></span><br><span class="line"><span class="regexp">      border: solid 1px red;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">  &lt;!-- 引入 echarts.js --&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://www.echartsjs.com/examples/vendors/echarts/echarts.min.js?_v_=1578305236132"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!--引入中国的地图数据js文件，引入后会自动注册地图名字和数据--&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/www.echartsjs.com/</span>examples/vendors/echarts/map/js/china.js?_v_=<span class="number">1578305236132</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;!--为echarts准备一个dom容器--&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myEcharts<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    //初始化echarts实例</span></span><br><span class="line"><span class="string">    var myChart = echarts.init(document.getElementById('myEcharts'));</span></span><br><span class="line"><span class="string">    // 指定图表的配置项和数据</span></span><br><span class="line"><span class="string">    option = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: '中国疫情图',</span></span><br><span class="line"><span class="string">        left: 'center'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: 'item'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      legend: &#123;</span></span><br><span class="line"><span class="string">        orient: 'vertical',</span></span><br><span class="line"><span class="string">        left: 'left',</span></span><br><span class="line"><span class="string">        data: ['中国疫情图']</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      visualMap: &#123;</span></span><br><span class="line"><span class="string">        type: 'piecewise',</span></span><br><span class="line"><span class="string">        pieces: [</span></span><br><span class="line"><span class="string">          &#123; min: 1000, max: 1000000, label: '大于等于1000人', color: '#372a28' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 500, max: 999, label: '确诊500-999人', color: '#4e160f' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 100, max: 499, label: '确诊100-499人', color: '#974236' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 10, max: 99, label: '确诊10-99人', color: '#ee7263' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 1, max: 9, label: '确诊1-9人', color: '#f5bba7' &#125;,</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        color: ['#E0022B', '#E09107', '#A3E00B']</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      toolbox: &#123;</span></span><br><span class="line"><span class="string">        show: true,</span></span><br><span class="line"><span class="string">        orient: 'vertical',</span></span><br><span class="line"><span class="string">        left: 'right',</span></span><br><span class="line"><span class="string">        top: 'center',</span></span><br><span class="line"><span class="string">        feature: &#123;</span></span><br><span class="line"><span class="string">          mark: &#123; show: true &#125;,</span></span><br><span class="line"><span class="string">          dataView: &#123; show: true, readOnly: false &#125;,</span></span><br><span class="line"><span class="string">          restore: &#123; show: true &#125;,</span></span><br><span class="line"><span class="string">          saveAsImage: &#123; show: true &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      roamController: &#123;</span></span><br><span class="line"><span class="string">        show: true,</span></span><br><span class="line"><span class="string">        left: 'right',</span></span><br><span class="line"><span class="string">        mapTypeControl: &#123;</span></span><br><span class="line"><span class="string">          'china': true</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          name: '确诊数',</span></span><br><span class="line"><span class="string">          type: 'map',</span></span><br><span class="line"><span class="string">          mapType: 'china',</span></span><br><span class="line"><span class="string">          roam: false,</span></span><br><span class="line"><span class="string">          label: &#123;</span></span><br><span class="line"><span class="string">            show: true,</span></span><br><span class="line"><span class="string">            color: 'rgb(249, 249, 249)'</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          data: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              name: '北京',</span></span><br><span class="line"><span class="string">              value: 212</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '天津',</span></span><br><span class="line"><span class="string">              value: 60</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '上海',</span></span><br><span class="line"><span class="string">              value: 208</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '重庆',</span></span><br><span class="line"><span class="string">              value: 337</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '河北',</span></span><br><span class="line"><span class="string">              value: 126</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '河南',</span></span><br><span class="line"><span class="string">              value: 675</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '云南',</span></span><br><span class="line"><span class="string">              value: 117</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '辽宁',</span></span><br><span class="line"><span class="string">              value: 74</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '黑龙江',</span></span><br><span class="line"><span class="string">              value: 155</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '湖南',</span></span><br><span class="line"><span class="string">              value: 593</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '安徽',</span></span><br><span class="line"><span class="string">              value: 480</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '山东',</span></span><br><span class="line"><span class="string">              value: 270</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '新疆',</span></span><br><span class="line"><span class="string">              value: 29</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '江苏',</span></span><br><span class="line"><span class="string">              value: 308</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '浙江',</span></span><br><span class="line"><span class="string">              value: 829</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '江西',</span></span><br><span class="line"><span class="string">              value: 476</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '湖北',</span></span><br><span class="line"><span class="string">              value: 13522</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '广西',</span></span><br><span class="line"><span class="string">              value: 139</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '甘肃',</span></span><br><span class="line"><span class="string">              value: 55</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '山西',</span></span><br><span class="line"><span class="string">              value: 74</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '内蒙古',</span></span><br><span class="line"><span class="string">              value: 34</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '陕西',</span></span><br><span class="line"><span class="string">              value: 142</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '吉林',</span></span><br><span class="line"><span class="string">              value: 42</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '福建',</span></span><br><span class="line"><span class="string">              value: 179</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '贵州',</span></span><br><span class="line"><span class="string">              value: 56</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '广东',</span></span><br><span class="line"><span class="string">              value: 797</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '青海',</span></span><br><span class="line"><span class="string">              value: 15</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '西藏',</span></span><br><span class="line"><span class="string">              value: 1</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '四川',</span></span><br><span class="line"><span class="string">              value: 282</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '宁夏',</span></span><br><span class="line"><span class="string">              value: 34</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '海南',</span></span><br><span class="line"><span class="string">              value: 79</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '台湾',</span></span><br><span class="line"><span class="string">              value: 10</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '香港',</span></span><br><span class="line"><span class="string">              value: 15</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '澳门',</span></span><br><span class="line"><span class="string">              value: 9</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //使用指定的配置项和数据显示图表</span></span><br><span class="line"><span class="string">    myChart.setOption(option);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div><ol start="4"><li>数据调取</li></ol><p>数据使用腾讯的数据：接口地址：<a href="https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=jQuery34102581268431257997_1582545445186&_=1582545445187" target="_blank" rel="noopener">数据接口</a></p><p><img src="/posts/9651c684/inewsqq.webp" alt></p><p>拿到数据后，发现数据格式是这样子的：</p><p><img src="/posts/9651c684/data.webp" alt></p><p>这个数据是腾讯根据自己的需求组装好的数据格式，我们需要用到的是areaTree下面的children。拿到数据后我们需要处理成图表需要的数据格式。需要的格式是这样子的：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  name: <span class="string">'北京11'</span>,</span><br><span class="line">  value: <span class="number">212</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'天津'</span>,</span><br><span class="line">  value: <span class="number">60</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></div><p>直接上对接数据后的代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;疫情地图展示&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    .container &#123;</span></span><br><span class="line"><span class="regexp">      width: 1200px;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #myEcharts &#123;</span></span><br><span class="line"><span class="regexp">      width: 800px;</span></span><br><span class="line"><span class="regexp">      height: 500px;</span></span><br><span class="line"><span class="regexp">      border: solid 1px red;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://www.echartsjs.com/examples/vendors/jquery/jquery.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- 引入 echarts.js --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/www.echartsjs.com/</span>examples/vendors/echarts/echarts.min.js?_v_=<span class="number">1578305236132</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!--引入中国的地图数据js文件，引入后会自动注册地图名字和数据--&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>https:<span class="comment">//www.echartsjs.com/examples/vendors/echarts/map/js/china.js?_v_=1578305236132"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3&gt;累计确诊人数如下：&lt;/</span>h3&gt;</span><br><span class="line">    &lt;!--为echarts准备一个dom容器--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"myEcharts"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">//初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'myEcharts'</span>));</span><br><span class="line">    <span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line">    option = &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        text: <span class="string">'中国疫情图'</span>,</span><br><span class="line">        left: <span class="string">'center'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'left'</span>,</span><br><span class="line">        data: [<span class="string">'中国疫情图'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      visualMap: &#123;</span><br><span class="line">        type: <span class="string">'piecewise'</span>,</span><br><span class="line">        pieces: [</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">1000</span>, <span class="attr">max</span>: <span class="number">1000000</span>, <span class="attr">label</span>: <span class="string">'大于等于1000人'</span>, <span class="attr">color</span>: <span class="string">'#372a28'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">500</span>, <span class="attr">max</span>: <span class="number">999</span>, <span class="attr">label</span>: <span class="string">'确诊500-999人'</span>, <span class="attr">color</span>: <span class="string">'#4e160f'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">100</span>, <span class="attr">max</span>: <span class="number">499</span>, <span class="attr">label</span>: <span class="string">'确诊100-499人'</span>, <span class="attr">color</span>: <span class="string">'#974236'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">10</span>, <span class="attr">max</span>: <span class="number">99</span>, <span class="attr">label</span>: <span class="string">'确诊10-99人'</span>, <span class="attr">color</span>: <span class="string">'#ee7263'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'确诊1-9人'</span>, <span class="attr">color</span>: <span class="string">'#f5bba7'</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        color: [<span class="string">'#E0022B'</span>, <span class="string">'#E09107'</span>, <span class="string">'#A3E00B'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      toolbox: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        top: <span class="string">'center'</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">          mark: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">          dataView: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">          restore: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">          saveAsImage: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      roamController: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        mapTypeControl: &#123;</span><br><span class="line">          <span class="string">'china'</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'确诊数'</span>,</span><br><span class="line">          type: <span class="string">'map'</span>,</span><br><span class="line">          mapType: <span class="string">'china'</span>,</span><br><span class="line">          roam: <span class="literal">false</span>,</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            color: <span class="string">'rgb(249, 249, 249)'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          data: []</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用指定的配置项和数据显示图表</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5"</span>,</span><br><span class="line">        dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//  console.log(data.data)</span></span><br><span class="line">          <span class="keyword">var</span> res = data.data || <span class="string">""</span>;</span><br><span class="line">          res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">          <span class="keyword">var</span> newArr = [];</span><br><span class="line">          <span class="comment">//newArr的数据格式为：</span></span><br><span class="line">          <span class="comment">// [&#123;</span></span><br><span class="line">          <span class="comment">//   name: '北京11',</span></span><br><span class="line">          <span class="comment">//   value: 212</span></span><br><span class="line">          <span class="comment">// &#125;, &#123;</span></span><br><span class="line">          <span class="comment">//   name: '天津',</span></span><br><span class="line">          <span class="comment">//   value: 60</span></span><br><span class="line">          <span class="comment">// &#125;]</span></span><br><span class="line">          <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            <span class="comment">//获取到各个省份的数据</span></span><br><span class="line">            <span class="keyword">var</span> province = res.areaTree[<span class="number">0</span>].children;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; province.length; i++) &#123;</span><br><span class="line">              <span class="keyword">var</span> json = &#123;</span><br><span class="line">                name: province[i].name,</span><br><span class="line">                value: province[i].total.confirm</span><br><span class="line">              &#125;</span><br><span class="line">              newArr.push(json)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(newArr)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(newArr))</span><br><span class="line">            <span class="comment">//使用指定的配置项和数据显示图表</span></span><br><span class="line">            myChart.setOption(&#123;</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  name: <span class="string">'确诊数'</span>,</span><br><span class="line">                  type: <span class="string">'map'</span>,</span><br><span class="line">                  mapType: <span class="string">'china'</span>,</span><br><span class="line">                  roam: <span class="literal">false</span>,</span><br><span class="line">                  label: &#123;</span><br><span class="line">                    show: <span class="literal">true</span>,</span><br><span class="line">                    color: <span class="string">'rgb(249, 249, 249)'</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  data: newArr</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    getData();</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="知识点解析"><a href="#知识点解析" class="headerlink" title="知识点解析"></a>知识点解析</h2><p>option参数的含义：</p><ul><li>title：显示图标的标题</li><li>tooltip：展示提示框，当你鼠标点击某个省份时用来展示对应的确诊人数</li><li>legend：图例，设置图例展示的位置</li><li>visualMap：视觉映射，每个颜色代表什么含义</li><li>series：地图数据可视化，添加data数据</li></ul><ol><li><p>插件自带的地图省份名字是默认出现在省会城市的位置，导致很多省份的名字有点挤甚至偏移，大家可以打开map/js/china.js</p></li><li><p>检索自己想要更改的省份名字，如湖南</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"properties"</span>:&#123;<span class="string">"cp"</span>:[<span class="number">112.982279</span>,<span class="number">28.19409</span>],<span class="string">"name"</span>:<span class="string">"湖南"</span>,<span class="string">"childNum"</span>:<span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>其中cp即表示文字的位置，两个坐标表示经纬度，大家根据需要调整。有兴趣的小伙伴可以试试哦！</p></li></ol><blockquote><p>愿我们心存美好，总将走过寒冬，春回人间！祝福国泰民安，疫情早消，祝愿各位朋友百毒不侵，健康平安！<br>中国加油，武汉加油！！！</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;最近每天早上醒来第一件事就是看看当天新增人数是否减少了，出院了多少，每个省目前还有多少确诊人数，见到最多的就是中国地图的分布图，由于各位都憋在家
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>玩转JS面向对象</title>
    <link href="http://www.yptup.top/posts/d37f7175.html"/>
    <id>http://www.yptup.top/posts/d37f7175.html</id>
    <published>2020-01-12T10:05:00.000Z</published>
    <updated>2020-03-12T14:30:43.110Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>面向对象在面试中会经常问起，特别是对于继承的理解，关于面向对象的定义我就不说了，我主要从继承方面来讲面向对象的好处，更重要的是收获一种编程思维。</p><a id="more"></a><p>或许光看文字不太好理解，也可以对应着代码敲一下，来感受一下继承是怎样的~</p><p>接下来我给大家讲下我对javascript面向对象的理解。</p><h2 id="面向对象的好处、特性"><a href="#面向对象的好处、特性" class="headerlink" title="面向对象的好处、特性"></a>面向对象的好处、特性</h2><p>好处：</p><ol><li>更方便</li><li>复用性好</li><li>高内聚和低耦合</li><li>代码冗余度低</li></ol><p>特性：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.封装</span></span><br><span class="line"><span class="comment">// 假设需要登记学籍，分别记录小明和小红的学籍号、姓名</span></span><br><span class="line"><span class="keyword">let</span> name1 = <span class="string">"小明"</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="string">"030578001"</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">"小红"</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="string">"030578002"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要登记大量的数据，则弊端会非常明显，而且不好维护，那么我们会使用以下方法来登录，这也是面向对象的特性之一：封装</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = &#123;</span><br><span class="line">    name:<span class="string">"小明"</span>,</span><br><span class="line">    num:<span class="string">"030578001"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = &#123;</span><br><span class="line">    name:<span class="string">"小红"</span>,</span><br><span class="line">    num:<span class="string">"030578002"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.继承</span></span><br><span class="line"><span class="comment">// 从已有的对象上，获取属性、方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"远方"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1.eat() <span class="comment">// 吃饭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person()</span><br><span class="line">p2.eat() <span class="comment">// 吃饭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.多态</span></span><br><span class="line"><span class="comment">// 同一操作，针对不同对象，会有不同的结果</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.toString() <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj.toString() <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure></div><h2 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字面量</span></span><br><span class="line"><span class="comment">// 该方式的劣势比较明显，就是无法复用，如果创建大量同类型的对象，则代码会非常冗余</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name:<span class="string">"远方"</span>,</span><br><span class="line">    age:<span class="number">26</span>,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.利用内置对象的方式创建对象</span></span><br><span class="line"><span class="comment">// 该方式的劣势也比较明显，就是没办法判断类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    obj.name = name</span><br><span class="line">    obj.age = age</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = createObj(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = createObj(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor) <span class="comment">// Object 指向的构造函数是Object</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor) <span class="comment">// Object 指向的构造函数是Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么为什么说没办法判断类型呢？那么我们创建一条狗的对象</span></span><br><span class="line"><span class="comment">// 可以看出，狗的constructor也是指向Object，那么我们人和狗的类型就没办法去区分了</span></span><br><span class="line"><span class="keyword">let</span> dog = createObj(<span class="string">'旺财'</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.constructor) <span class="comment">// Object 指向的构造函数是Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.利用构造函数的方式创建对象</span></span><br><span class="line"><span class="comment">// 其执行的过程:</span></span><br><span class="line"><span class="comment">// 3.1 使用new这个关键词来创建对象</span></span><br><span class="line"><span class="comment">// 3.2 在构造函数内部把新创建出来的对象赋予给this</span></span><br><span class="line"><span class="comment">// 3.3 在构造函数内部把新创建（将来new的对象）的属性方法绑到this上</span></span><br><span class="line"><span class="comment">// 3.4 默认是返回新创建的对象，特别需要注意的是</span></span><br><span class="line"><span class="comment">//     如果显式return一个对象数据类型，那么将来new的对象，就是显式return的对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.系统自动创建对象，并且把这个对象赋值到this上，此步不需要我们操作</span></span><br><span class="line">    <span class="comment">// let this = new Object()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.给这个对象赋属性、方法，需要我们自己操作</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name + <span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.系统自动返回创建的对象</span></span><br><span class="line">    <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor) <span class="comment">// Person 指向的构造函数是Person</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺财"</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.constructor) <span class="comment">// Dog 指向的构造函数是Dog</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认是返回新创建的对象，特别需要注意的是</span></span><br><span class="line"><span class="comment">// 如果显式return一个对象数据类型，那么将来new的对象，就是显式return的对象</span></span><br><span class="line"><span class="comment">// 这个是之前一个小伙伴问的，我们看下面的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们显式return一个原始数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>) <span class="comment">// &#123; name: '远方', age: 28 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们显式return一个对象数据类型时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>) <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="comment">// 我们发现，当显式return一个对象数据类型时，我们new出来的对象，得到的是return的值</span></span><br></pre></td></tr></table></figure></div><h2 id="实例属性方法、静态属性方法、原型属性方法"><a href="#实例属性方法、静态属性方法、原型属性方法" class="headerlink" title="实例属性方法、静态属性方法、原型属性方法"></a>实例属性方法、静态属性方法、原型属性方法</h2><h3 id="实例属性方法"><a href="#实例属性方法" class="headerlink" title="实例属性方法"></a>实例属性方法</h3><p>都是绑定在将来通过构造函数创建的实例上，并且需要通过这个实例来访问的属性、方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 实例属性 </span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造函数创建出实例p</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="comment">// 通过实例p去访问实例属性</span></span><br><span class="line"><span class="built_in">console</span>.log(p.name) <span class="comment">// 远方</span></span><br><span class="line"><span class="comment">// 通过实例p去访问实例方法</span></span><br><span class="line">p.eat() <span class="comment">// 远方吃饭</span></span><br></pre></td></tr></table></figure></div><h3 id="静态属性方法"><a href="#静态属性方法" class="headerlink" title="静态属性方法"></a>静态属性方法</h3><p>绑定在构造函数上的属性方法，需要通过构造函数访问</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我们想取出这个Person构造函数创建了多少个实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">if</span> (!Person.total) &#123;</span><br><span class="line">    Person.total = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  Person.total++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">'远方'</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Person.total) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">'ypt'</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Person.total) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div><h3 id="原型属性方法"><a href="#原型属性方法" class="headerlink" title="原型属性方法"></a>原型属性方法</h3><p>构造函数new出来的实例，都共享这个构造函数的原型对象上的属性方法，类似共享库。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 使用prototype找到该Person的原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.eat === p2.eat) <span class="comment">// true</span></span><br><span class="line">p1.eat() <span class="comment">// 远方吃饭</span></span><br></pre></td></tr></table></figure></div><h2 id="我们为什么需要原型对象（共享库）？"><a href="#我们为什么需要原型对象（共享库）？" class="headerlink" title="我们为什么需要原型对象（共享库）？"></a>我们为什么需要原型对象（共享库）？</h2><p>因为通过new生成的实例，相当于是重新开辟了一个堆区，虽然是同类型，拥有类似的属性和方法，但是这些属性和方法，并不是相同的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.eat === p2.eat) <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure></div><p>从上面可以得出，p1和p2的eat方法，行为是一致的，但是他们却不等，是因为他们不同在一个堆区，如果只有1、2个实例还好，如果大量的实例，那么会大量生成这种原本可以复用共用的属性方法，非常耗费性能，不利于复用，此时我们就需要一个类似共享库的对象，让实例能够沿着原型链，去找。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = functoin()&#123; <span class="comment">// 通过构造函数Person的prototype属性找到Person的原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.eat === p2.eat) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>这样可以增加复用性，但是还存在一个问题，如果我们要给原型对象添加大量属性方法时，我们不断的Person.prototype.xxx = xxx、Person.prototype.xxxx = xxxx，这样也是很繁琐，那么我们该怎么解决这个问题？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让Person.prototype指针指向一个新的对象</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="/posts/d37f7175/prototype.png" alt></p><h3 id="如何找到原型对象"><a href="#如何找到原型对象" class="headerlink" title="如何找到原型对象"></a>如何找到原型对象</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'远方'</span>,<span class="number">28</span>)</span><br><span class="line"><span class="comment">// 访问原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Peroson.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__) <span class="comment">// __proto__仅用于测试，不能写在正式代码中</span></span><br></pre></td></tr></table></figure></div><h3 id="和原型对象有关几个常用方法"><a href="#和原型对象有关几个常用方法" class="headerlink" title="和原型对象有关几个常用方法"></a>和原型对象有关几个常用方法</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.hasOwnProperty 在对象自身查找属性而不到原型上查找</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="string">'name'</span></span><br><span class="line"><span class="keyword">if</span>((key <span class="keyword">in</span> p) &amp;&amp; p.hasOwnProperty(key))&#123;</span><br><span class="line">    <span class="comment">// name仅在p对象中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.isPrototypeOf 判断一个对象是否是某个实例的原型对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = Person.prototype </span><br><span class="line">obj.isPrototypeOf(p) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h3 id="更改原型对象constructor指针"><a href="#更改原型对象constructor指针" class="headerlink" title="更改原型对象constructor指针"></a>更改原型对象constructor指针</h3><p>原型对象默认是有一个指针constructor指向其构造函数的，</p><p>如果我们把构造函数的原型对象，替换成另外一个原型对象，那么这个新的原型</p><p>对象的constructor则不是指向该构造函数，会导致类型判断的错误</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123; <span class="comment">// 把Person构造函数的原型对象替换成该对象</span></span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor) <span class="comment">// Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们发现，该原型对象的constructor指向的是Object而不是Person</span></span><br><span class="line"><span class="comment">// 那么我们现在解决一下这个问题，把原型对象的constructor指向到Person</span></span><br><span class="line">Person.prototype.constructor = Person</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor) <span class="comment">// Person</span></span><br></pre></td></tr></table></figure></div><h3 id="构造函数、原型对象、实例之间的关系"><a href="#构造函数、原型对象、实例之间的关系" class="headerlink" title="构造函数、原型对象、实例之间的关系"></a>构造函数、原型对象、实例之间的关系</h3><p><img src="/posts/d37f7175/relation.png" alt></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>面向对象的继承方式有很多种，原型链继承、借用构造函数继承、组合继承、原型式继承、寄生式继承、寄生式组合继承、深拷贝继承等等。</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>利用原型链的特性，当在自身找不到时，会沿着原型链往上找。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// undefined</span></span><br><span class="line">student.eat() <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></div><p>从上面我们可以看到，Student没有继承Person，此时它们之间的联系是这样的。</p><p><img src="/posts/d37f7175/objectProrotype.png" alt></p><p>既然要让实例student访问到Person的原型对象属性方法，</p><p>我们会想到，把Student.prototype改写为Person.prototype</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 改写Student.prototype指针指向</span></span><br><span class="line">Student.prototype = Person.prototype</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// undefined</span></span><br><span class="line">student.eat() <span class="comment">// * '吃饭'</span></span><br></pre></td></tr></table></figure></div><p>此时关系图为</p><p><img src="/posts/d37f7175/objectProrotype1.png" alt></p><p>现在修改了Student.prototype指针指向为Person.prototype后，可以访问Person.prototype上的eat方法，但是student还不能继承Person.name和Person.pets，那我会想到，是Person的实例，才会同时拥有实例属性方法和原型属性方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * new一个Person的实例，同时拥有其实例属性方法和原型属性方法</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 把Student的原型对象指向实例p</span></span><br><span class="line">Student.prototype = p</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 把Student的原型对象的constructor指向Student，解决类型判断问题</span></span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// * '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br></pre></td></tr></table></figure></div><p>因为实例p是由Person构造函数实例化出来的，所以同时拥有其实例属性方法和原型属性方法，并且把这个实例p作为Student的原型对象，此时的关系图如下</p><p><img src="/posts/d37f7175/objectProrotype3.png" alt></p><p>这种称为原型链继承，到此为止原型链继承就结束了</p><h3 id="借助构造函数继承"><a href="#借助构造函数继承" class="headerlink" title="借助构造函数继承"></a>借助构造函数继承</h3><p>通过这样的方式，会有一个问题，原型对象类似一个共享库，所有实例共享原型对象同一个属性方法，如果原型对象上有引用类型，那么会被所有实例共享，也就是某个实例更改了，则会影响其他实例，我们可以看一下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student() <span class="comment">// * new多一个实例</span></span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时我们修改某一个实例，pets是原型对象上的引用类型 数组</span></span><br><span class="line">student.pets.push(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(student2.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br></pre></td></tr></table></figure></div><p>从上面可以看出，student的pets（实际就是原型对象上的pets）被修改后，相关的实例student2也会受到影响。</p><p>那么我们能不能把Person上的属性方法，添加到Student上呢？以防都存在原型对象上，会被所有实例共享，特别是引用类型的修改，会影响所有相关实例。</p><p>可以利用call来实现。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>) <span class="comment">// * 利用call调用Person上的属性方法拷贝一份到Student</span></span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * 此时我们修改某一个实例，pets是原型对象上的引用类型 数组</span></span><br><span class="line">student.pets.push(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(student2.pets) <span class="comment">// * [ '旺财', '小黄' ]</span></span><br></pre></td></tr></table></figure></div><p><strong>上面在子构造函数（Student）中利用call调用父构造函数（Person）的方式，叫做借助构造函数继承</strong></p><p><strong>结合上面所看，使用了原型链继承和借助构造函数继承，两者结合起来使用叫组合继承，关系图如下：</strong></p><p><img src="/posts/d37f7175/objectProrotype4.png" alt></p><p>那么还有个问题，当父构造函数需要接收参数时，怎么处理？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,pets</span>)</span>&#123; <span class="comment">// * 父构造函数接收name，pets参数</span></span><br><span class="line">    <span class="keyword">this</span>.name = name <span class="comment">// * 赋值到this上</span></span><br><span class="line">    <span class="keyword">this</span>.pets = pets <span class="comment">// * 赋值到this上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">num,name,pets</span>)</span>&#123; <span class="comment">// * 在子构造函数中也接收参数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>,name,pets) <span class="comment">// * 在这里把name和pets传参数</span></span><br><span class="line">    <span class="keyword">this</span>.num = num <span class="comment">// * 赋值到this上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student(<span class="string">"030578000"</span>,<span class="string">"远方"</span>,[<span class="string">"旺财"</span>,<span class="string">"小黄"</span>])</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student(<span class="string">"030578001"</span>,<span class="string">"iamypt"</span>,[<span class="string">"小红"</span>])</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br><span class="line"></span><br><span class="line">student.pets.push(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(student2.pets) <span class="comment">// * [ '小红' ]</span></span><br></pre></td></tr></table></figure></div><p><img src="/posts/d37f7175/objectProrotype5.png" alt></p><p>这样我们就可以在子构造函数中给父构造函数传参了，而且我们也发现上图中，2个红圈的地方，代码是重复了，那么接下来我们怎么解决呢？</p><p>能否在子构造函数设置原型对象的时候，只要父构造函数的原型对象属性方法呢？</p><p>当然是可以的，接下来我们讲寄生式组合继承，也是目前程序猿认为解决继承问题最好的方案</p><h3 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,pets</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.pets = pets</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">num,name,pets</span>)</span>&#123; </span><br><span class="line">    Person.call(<span class="keyword">this</span>,name,pets) </span><br><span class="line">    <span class="keyword">this</span>.num = num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 寄生式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// * 声明一个空的构造函数，用于桥梁作用</span></span><br><span class="line">Temp.prototype = Person.prototype <span class="comment">// * 把Temp构造函数的原型对象指向Person的原型对象</span></span><br><span class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> Temp() <span class="comment">// * 用构造函数Temp实例化一个实例temp</span></span><br><span class="line">Student.prototype = temp <span class="comment">// * 把子构造函数的原型对象指向temp</span></span><br><span class="line">temp.constructor = Student <span class="comment">// * 把temp的constructor指向Student</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student1 = <span class="keyword">new</span> Student(<span class="string">'030578001'</span>,<span class="string">'远方'</span>,[<span class="string">'旺财'</span>,<span class="string">'小黄'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(student1) <span class="comment">// Student &#123; name: '远方',  pets: [ '旺财', '小黄' ], num: '030578001' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student(<span class="string">'030578002'</span>,<span class="string">'iamypt'</span>,[<span class="string">'小红'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(student2) <span class="comment">// Student &#123; name: 'iamypt',pets: [ '小红' ], num: '030578002' &#125;</span></span><br></pre></td></tr></table></figure></div><p><strong>至此为止，我们就完成了寄生式组合继承了，主要逻辑就是用一个空的构造函数，来当做桥梁，并且把其原型对象指向父构造函数的原型对象，并且实例化一个temp，temp会沿着这个原型链，去找到父构造函数的原型对象</strong></p><p><img src="/posts/d37f7175/objectProrotype6.png" alt></p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObjWithObj</span>(<span class="params">obj</span>)</span>&#123; <span class="comment">// * 传入一个原型对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    Temp.prototype = obj</span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> Temp()</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 把Person的原型对象当做temp的原型对象</span></span><br><span class="line"><span class="keyword">let</span> temp = createObjWithObj(Person.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 也可以使用Object.create实现</span></span><br><span class="line"><span class="comment">// * 把Person的原型对象当做temp2的原型对象</span></span><br><span class="line"><span class="keyword">let</span> temp2 = <span class="built_in">Object</span>.create(Person.prototype)</span><br></pre></td></tr></table></figure></div><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生式继承</span></span><br><span class="line"><span class="comment">// 我们在原型式的基础上，希望给这个对象新增一些属性方法</span></span><br><span class="line"><span class="comment">// 那么我们在原型式的基础上扩展</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewObjWithObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = createObjWithObj(obj)</span><br><span class="line">    o.name = <span class="string">"远方"</span></span><br><span class="line">    o.age = <span class="number">28</span></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="深拷贝继承"><a href="#深拷贝继承" class="headerlink" title="深拷贝继承"></a>深拷贝继承</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：利用JSON.stringify和JSON.parse</span></span><br><span class="line"><span class="keyword">let</span> ypt = &#123;</span><br><span class="line">    name:<span class="string">"远方"</span>,</span><br><span class="line">    age:<span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> yptcopy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(ypt))</span><br><span class="line"><span class="built_in">console</span>.log(yptcopy) <span class="comment">// &#123; name:"远方",age:26 &#125;</span></span><br><span class="line"><span class="comment">// 此时我们修改ypt的属性</span></span><br><span class="line">ypt.age = <span class="number">29</span></span><br><span class="line"><span class="built_in">console</span>.log(ypt) <span class="comment">// &#123; name:"远方",age:29 &#125;</span></span><br><span class="line"><span class="comment">// 但是yptcopy却不会受ypt影响</span></span><br><span class="line"><span class="built_in">console</span>.log(yptcopy) <span class="comment">// &#123; name:"远方",age:26 &#125;</span></span><br><span class="line"><span class="comment">// 这种方式进行深拷贝，只针对json数据这样的键值对有效</span></span><br><span class="line"><span class="comment">// 对于函数等等反而无效，不好用，接着继续看方法二、三。</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">fromObj,toObj</span>) </span>&#123; <span class="comment">// 深拷贝函数</span></span><br><span class="line">  <span class="comment">// 容错</span></span><br><span class="line">  <span class="keyword">if</span>(fromObj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span> <span class="comment">// 当fromObj为null</span></span><br><span class="line">  <span class="keyword">if</span>(fromObj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(fromObj) <span class="comment">// 当fromObj为正则</span></span><br><span class="line">  <span class="keyword">if</span>(fromObj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(fromObj) <span class="comment">// 当fromObj为Date</span></span><br><span class="line"></span><br><span class="line">  toObj = toObj || &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> fromObj)&#123; <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fromObj[key] !== <span class="string">'object'</span>)&#123; <span class="comment">// 是否为对象</span></span><br><span class="line">      toObj[key] = fromObj[key] <span class="comment">// 如果为原始数据类型，则直接赋值</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      toObj[key] = <span class="keyword">new</span> fromObj[key].constructor <span class="comment">// 如果为object，则new这个object指向的构造函数</span></span><br><span class="line">      deepCopy(fromObj[key],toObj[key]) <span class="comment">// 递归</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  name:<span class="string">"小白"</span>,</span><br><span class="line">  sex:<span class="string">"公"</span>,</span><br><span class="line">  firends:[</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"小黄"</span>,</span><br><span class="line">      sex:<span class="string">"母"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dogcopy = deepCopy(dog)</span><br><span class="line"><span class="comment">// 此时我们把dog的属性进行修改</span></span><br><span class="line">dog.firends[<span class="number">0</span>].sex = <span class="string">'公'</span></span><br><span class="line"><span class="built_in">console</span>.log(dog) <span class="comment">// &#123; name: '小白', sex: '公', firends: [ &#123; name: '小黄', sex: '公' &#125;] &#125;</span></span><br><span class="line"><span class="comment">// 当我们打印dogcopy，会发现dogcopy不会受dog的影响</span></span><br><span class="line"><span class="built_in">console</span>.log(dogcopy) <span class="comment">// &#123; name: '小白',sex: '公',firends: [ &#123; name: '小黄', sex: '母' &#125; ] &#125;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法三：</span></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  name:<span class="string">"小白"</span>,</span><br><span class="line">  sex:<span class="string">"公"</span>,</span><br><span class="line">  firends:[</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"小黄"</span>,</span><br><span class="line">      sex:<span class="string">"母"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj)</span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj)</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.constructor</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    newObj[key] = deepCopy(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dogcopy = deepCopy(dog)</span><br><span class="line">dog.firends[<span class="number">0</span>].sex = <span class="string">'公'</span></span><br><span class="line"><span class="built_in">console</span>.log(dogcopy)</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;面向对象在面试中会经常问起，特别是对于继承的理解，关于面向对象的定义我就不说了，我主要从继承方面来讲面向对象的好处，更重要的是收获一种编程思维。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目开发总结</title>
    <link href="http://www.yptup.top/posts/8075ddb6.html"/>
    <id>http://www.yptup.top/posts/8075ddb6.html</id>
    <published>2019-12-28T15:34:30.000Z</published>
    <updated>2020-03-22T09:08:21.375Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="046c6ca8e1612d2d8d5f94ffa6c32e7366257835bb65e06597c74bb321fc5a40"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="http://www.yptup.top/posts/139b1e40.html"/>
    <id>http://www.yptup.top/posts/139b1e40.html</id>
    <published>2019-12-18T10:02:46.000Z</published>
    <updated>2020-02-25T04:35:24.767Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h2 id="原型对象prototype"><a href="#原型对象prototype" class="headerlink" title="原型对象prototype"></a>原型对象prototype</h2><ul><li>每一个函数对象都有一个prototype属性，但是普通对象是没有的</li><li>普通对象都是通过函数创建的<a id="more"></a><blockquote><p>在 ECMAScript 核心所定义的全部属性中，最耐人寻味的就要数 prototype 属性了。对于 ECMAScript 中的引用类型而言，prototype 是保存着它们所有实例方法的真正所在。换句话所说，诸如 toString()和 valuseOf()等方法实际上都保存在 prototype 名下，只不过是通过各自对象的实例访问罢了。—-《JavaScript 高级程序设计》</p></blockquote></li></ul><p>JS所有对象分为函数对象和普通对象。凡是通过new Function()创建得来的对象都是函数对象。函数对象拥有prototype属性和proto属性。</p><p><strong>prototype</strong></p><blockquote><p>JS设计之初为了实现简单继承，引入了prototype属性，也叫原型对象（显式原型）。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Animal.prototype) <span class="comment">//Object  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype) <span class="comment">// Object</span></span><br></pre></td></tr></table></figure></div><p>可以看出，从本质上讲，prototype是一个普通对象，是函数对象的构造函数创建的一个实例。相当于在Animal创建的时候，自动创建了一个它的实例，并且把这个实例赋值给了prototype。</p><p>但是存在一个特例Function， Function.prototype是原型对象，本质却是函数对象。作为一个函数对象，又没有prototype属性</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype) <span class="comment">// 特殊 Function  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype) <span class="comment">//undefined 函数对象却没有prototype属性</span></span><br></pre></td></tr></table></figure></div><p><strong>proto属性</strong><br>所有的对象obj(null和undefined除外)都具有proto属性（隐式原型），proto属性在本质上为一个指针，指向创造obj对象的函数对象的prototype属性。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age= age;</span><br><span class="line">        &#125;</span><br><span class="line">        Animal.prototype = &#123;</span><br><span class="line">            alertName()&#123;</span><br><span class="line">                alert(<span class="keyword">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建实例</span></span><br><span class="line">        <span class="keyword">var</span> dog = <span class="keyword">new</span> Animal(<span class="string">"大黄"</span>);</span><br><span class="line">        dog .print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             alert(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">        dog.print();  <span class="comment">//大黄</span></span><br><span class="line">        dog.alertName();  <span class="comment">//大黄</span></span><br></pre></td></tr></table></figure></div><p>print()方法是dog实例本身具有的方法，所以dog.print()输出“大黄”；alertName()不属于dog实例的方法，属于构造函数的方法，dog.alertName()也会输出“大黄”，是因为dog实例继承了构造函数的方法。</p><p>实例dog的隐式原型指向它构造函数的显式原型，指向的意思是恒等于，即</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog.__proto__ === Animal.prototype<span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="构造器constructor"><a href="#构造器constructor" class="headerlink" title="构造器constructor"></a>构造器constructor</h2><p>构造器constructor就是用来构造函数对象的，constructor 属性返回对创建此对象的函数对象的引用。通俗了讲就是指向当前对象的爸爸</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.constructor===<span class="built_in">Function</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a.prototype.constructor===a); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div><p>函数a是由Function创造出来,那么它的constructor指向的Function,a.prototype是由new a()方式创造出来,那么a.prototype.constructor理应指向a。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链是JS中实现继承的主要方法。其基本思想就是让一个引用类型继承另一个引用类型的属性和方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.animalType = <span class="string">"animal"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Animal.prototype.getAnimalType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.animalType ;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.Dogtype = <span class="string">"dog"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();  </span><br><span class="line"></span><br><span class="line">Dog.prototype.getDogType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Dogtype ;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dahuang = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">alert(dahuang.getAnimalType ());<span class="comment">// animal</span></span><br></pre></td></tr></table></figure></div><p>dahuang.getAnimalType ()打印结果为animal，dahuang自身没有getAnimalType ()方法，那么就会去它的proto(即它的构造函数的prototype)中寻找，发现Dog中也没有，于是顺着proto再往上找，在<code>Animal.prototype.getAnimalType</code>找到，返回结果 。</p><p><code>如果Animal中还是没有，就接着往上找，一直到Object.prototype原型对象终止</code></p><ul><li>总结得出<strong>原型链</strong>就是：<br>如果在对象上没有找到需要的属性或者方法引用，引擎就会在[[prototype]]关联的对象上进行查找。同理，如果在后者中也没有找到需要的引用就会继续查找它[[prototype]，以此类推。一直到<code>Object.prototype</code>原型对象终止，这就是原型链。<code>Object.prototype</code>是原型链的顶端。</li></ul><p><code>如果找到Object.prototype上还找不到，原路返回，告诉实例此方法或属性没有找到或者没有定义。如果说在中间的任意一个环节找到了，就停止向上查找直接返回结果</code></p><h2 id="原型对象和原型链的作用"><a href="#原型对象和原型链的作用" class="headerlink" title="原型对象和原型链的作用"></a>原型对象和原型链的作用</h2><p>如果构造函数中有很多属性和方法，那么构造函数所有的实例化对象都是公用这些属性和方法的，当有多个实例想用共用这些东西的时候，每个实例都拷贝一份，就造成极大的资源浪费，那是不是可以考虑存把这些需要共用的属性和方法放到一个共同的东西上。这个共同的东西就是原型对象（prototype）。</p><p><code>当然原型链实现继承也会存在一些问题，最主要的问题来自包含引用类型的原型。其次就是在创建子类型的实例时，不能向超类型的构造函数中传递参数。</code></p><h2 id="构造函数、实例对象、原型对象三者之间的关系"><a href="#构造函数、实例对象、原型对象三者之间的关系" class="headerlink" title="构造函数、实例对象、原型对象三者之间的关系"></a>构造函数、实例对象、原型对象三者之间的关系</h2><p><img src="/posts/139b1e40/yuanxing.webp" alt="构造函数、实例对象、原型三者的关系"></p><p>任何函数都具有一个 prototype 属性，该属性是一个对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></div><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></div><p><code>__proto__</code> 是非标准属性。</p><p>实例对象可以直接访问原型对象成员。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure></div><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;原型对象prototype&quot;&gt;&lt;a href=&quot;#原型对象prototype&quot; class=&quot;headerlink&quot; title=&quot;原型对象prototype&quot;&gt;&lt;/a&gt;原型对象prototype&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;每一个函数对象都有一个prototype属性，但是普通对象是没有的&lt;/li&gt;&lt;li&gt;普通对象都是通过函数创建的&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的Event Loop</title>
    <link href="http://www.yptup.top/posts/889ebc65.html"/>
    <id>http://www.yptup.top/posts/889ebc65.html</id>
    <published>2019-11-29T14:14:28.000Z</published>
    <updated>2020-02-29T14:47:45.385Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h2 id="Event-Loop是什么"><a href="#Event-Loop是什么" class="headerlink" title="Event Loop是什么"></a>Event Loop是什么</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p><ul><li><p>浏览器的Event Loop是在html5的规范中明确定义。</p></li><li><p>NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</p></li><li><p>libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</p></li></ul><h2 id="宏队列和微队列"><a href="#宏队列和微队列" class="headerlink" title="宏队列和微队列"></a>宏队列和微队列</h2><p>宏队列，<code>macrotask</code>，也叫<code>tasks</code>。 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate (Node独有)</li><li>requestAnimationFrame (浏览器独有)</li><li>I/O</li><li>UI rendering (浏览器独有)</li></ul><p>（注：这里只针对浏览器和NodeJS）</p><h2 id="浏览器的Event-Loop"><a href="#浏览器的Event-Loop" class="headerlink" title="浏览器的Event Loop"></a>浏览器的Event Loop</h2><p>我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。</p><p><img src="http://blog.yptup.top/imageEvent-Loop.png" alt="Event-Loop.png"></p><p>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p><ol><li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li><li>全局Script代码执行完毕后，调用栈Stack会清空；</li><li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li><li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。<strong>注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</strong></li><li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li><li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li><li>执行完毕后，调用栈Stack为空；</li><li>重复第3-7个步骤；</li><li>重复第3-7个步骤；</li><li>……</li></ol><p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong></p><p>这里归纳3个重点：</p><ol><li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li><li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li><li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li></ol><p>好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>);</span><br></pre></td></tr></table></figure></div><p>这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确答案</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></div><p>我们来分析一下整个流程：</p><blockquote><p><strong>执行全局Script代码</strong></p></blockquote><p><strong>Step 1</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [console]<br>Macrotask Queue: []<br>Microtask Queue: []</p><blockquote><p>打印结果：<br>1</p></blockquote><p><strong>Step 2</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback1，setTimeout属于macrotask，所以放到macrotask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [setTimeout]</p><p>Macrotask Queue: [callback1]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1</p></blockquote><p><strong>Step 3</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 注意，这里是同步执行的</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback2，promise属于microtask，所以放到microtask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [promise]</p><p>Macrotask Queue: [callback1]</p><p>Microtask Queue: [callback2]</p><blockquote><p>打印结果：<br>1<br>4</p></blockquote><p><strong>Step 5</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback3，setTimeout属于macrotask，所以放到macrotask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [setTimeout]</p><p>Macrotask Queue: [callback1, callback3]</p><p>Microtask Queue: [callback2]</p><blockquote><p>打印结果：<br>1<br>4</p></blockquote><p><strong>Step 6</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [console]</p><p>Macrotask Queue: [callback1, callback3]</p><p>Microtask Queue: [callback2]</p><blockquote><p>打印结果：<br>1<br>4<br>7</p></blockquote><ul><li>好啦，全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。</li></ul><p><strong>Step 7</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(data) <span class="comment">// 这里data是Promise的决议值5</span></span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback2]</p><p>Macrotask Queue: [callback1, callback3]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5</p></blockquote><ul><li>这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行</li></ul><p><strong>Step 8</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback1]</p><p>Macrotask Queue: [callback3]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2</p></blockquote><p>但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数</p><p><strong>Step 9</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback4，promise属于microtask，所以放到microtask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [promise]</p><p>Macrotask v: [callback3]</p><p>Microtask Queue: [callback4]</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2</p></blockquote><ul><li>取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行</li></ul><p><strong>Step 10</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback4]</p><p>Macrotask Queue: [callback3]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2<br>3</p></blockquote><ul><li>微任务队列全部执行完，再去宏任务队列中取第一个任务执行</li></ul><p><strong>Step 11</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback3]</p><p>Macrotask Queue: []</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2<br>3<br>6</p></blockquote><ul><li>以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空</li></ul><p>Stack Queue: []</p><p>Macrotask Queue: []</p><p>Microtask Queue: []</p><blockquote><p>最终打印结果：<br>1<br>4<br>7<br>5<br>2<br>3<br>6</p></blockquote><p><strong>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</strong></p><p>注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的</p><p>未完待续…</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Event-Loop是什么&quot;&gt;&lt;a href=&quot;#Event-Loop是什么&quot; class=&quot;headerlink&quot; title=&quot;E
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS数组常用技巧</title>
    <link href="http://www.yptup.top/posts/133a37.html"/>
    <id>http://www.yptup.top/posts/133a37.html</id>
    <published>2019-11-23T13:23:55.000Z</published>
    <updated>2020-03-12T13:13:55.210Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p><canter>你必须知道的 JS 数组技巧</canter></p><p>在 Javascript 中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名 Javascript 工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！</p><a id="more"></a><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>怎么对 JS 的数组去重。在 ES6 的时代，有个非常快速且简单的方法，使用<code>new Set()</code>以及<code>Array.from()</code>或者<code>展开运算符(...)</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'watermelon'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'grape'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> uniqueFruits = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(fruits));</span><br><span class="line"><span class="built_in">console</span>.log(uniqueFruits); <span class="comment">// returns ['banana', 'apple', 'orange', 'watermelon', 'grape']</span></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> uniqueFruits2 = […<span class="keyword">new</span> <span class="built_in">Set</span>(fruits)];</span><br><span class="line"><span class="built_in">console</span>.log(uniqueFruits2); <span class="comment">// returns ['banana', 'apple', 'orange', 'watermelon', 'grape']</span></span><br></pre></td></tr></table></figure></div><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>日常开发中经常需要替换或者删除一些指定的数据，遇到这种场景时一定要联想到<code>Array.protoType.splice</code>这个方法。传参时稍微复杂点，第一个参数是开始的索引，第二个参数是需要删除的数量，剩下的就是需要添加的值（可以是一个或者多个）。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [</span><br><span class="line">  <span class="string">'banana'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'watermelon'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'grape'</span>,</span><br><span class="line">  <span class="string">'apple'</span></span><br><span class="line">]</span><br><span class="line">fruits.splice(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fruits) <span class="comment">// returns ['potato', 'tomato', 'orange', 'watermelon', 'apple', 'orange', 'grape', 'apple']</span></span><br></pre></td></tr></table></figure></div><h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><p>有时我们需要清空一个数组，比如用户点击了清空购物车。可以一条一条地删除，但是很少有这么可爱的程序员，哈哈。其实一行代码就能搞定，那就是直接将之 length 设置成 0</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [</span><br><span class="line">  <span class="string">'banana'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'watermelon'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'grape'</span>,</span><br><span class="line">  <span class="string">'apple'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">fruits.length = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(fruits) <span class="comment">// returns []</span></span><br></pre></td></tr></table></figure></div><h2 id="数组转换成对象"><a href="#数组转换成对象" class="headerlink" title="数组转换成对象"></a>数组转换成对象</h2><p>有时候需要将数组转换成对象的形式，使用<code>.map()</code>一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的 key 就是数组的索引</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'watermelon'</span>];</span><br><span class="line"><span class="keyword">var</span> fruitsObj = &#123; …fruits &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fruitsObj); <span class="comment">// returns &#123;0: 'banana', 1: 'apple', 2: 'orange', 3: 'watermelon', 4: 'apple', 5: 'orange', 6: 'grape', 7: 'apple'&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="填充数组"><a href="#填充数组" class="headerlink" title="填充数组"></a>填充数组</h2><p>创建数组的时候，你有没有遇到过需要填充上默认值的场景，你肯定首先想到的就是循环这个数组。ES6 提供了更便捷的<code>fill</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newArray) <span class="comment">// returns ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']</span></span><br></pre></td></tr></table></figure></div><h2 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h2><p>你知道如何合并数组吗，答案就是<code>concat()</code>。哈哈，但是今天的主角是 ES6 的展开运算符<code>(...)</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>];</span><br><span class="line"><span class="keyword">var</span> meat = [<span class="string">'poultry'</span>, <span class="string">'beef'</span>, <span class="string">'fish'</span>];</span><br><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'potato'</span>, <span class="string">'tomato'</span>, <span class="string">'cucumber'</span>];</span><br><span class="line"><span class="keyword">var</span> food = […fruits, …meat, …vegetables];</span><br><span class="line"><span class="built_in">console</span>.log(food); <span class="comment">// ['apple', 'banana', 'orange', 'poultry', 'beef', 'fish', 'potato', 'tomato', 'cucumber']</span></span><br></pre></td></tr></table></figure></div><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p>方法很多，这里直接上最简洁的方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numOne = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> numTwo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> duplicatedValues = […<span class="keyword">new</span> <span class="built_in">Set</span>(numOne)].filter(<span class="function"><span class="params">item</span> =&gt;</span> numTwo.includes(item));</span><br><span class="line"><span class="built_in">console</span>.log(duplicatedValues); <span class="comment">// returns [2, 4, 6]</span></span><br></pre></td></tr></table></figure></div><h2 id="去除假值"><a href="#去除假值" class="headerlink" title="去除假值"></a>去除假值</h2><p>首先，我们熟悉下假值<code>(falsy values)</code>是什么？在 JS 中，假值有：<code>false、0、&#39;&#39;、null、NaN、undefined</code>。现在我们找到这些假值并将它们移除，这里使用的是<code>filter</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixedArr = [<span class="number">0</span>, <span class="string">'blue'</span>, <span class="string">''</span>, <span class="literal">NaN</span>, <span class="number">9</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="string">'white'</span>, <span class="literal">false</span>]</span><br><span class="line"><span class="keyword">var</span> trueArr = mixedArr.filter(<span class="built_in">Boolean</span>)</span><br><span class="line"><span class="built_in">console</span>.log(trueArr) <span class="comment">// returns ['blue', 9, true, 'white']</span></span><br></pre></td></tr></table></figure></div><h2 id="随机值"><a href="#随机值" class="headerlink" title="随机值"></a>随机值</h2><p>从数组中获取随机的一个值，核心知识是随机生成一个值 x,x &gt;= 0 并且 x &lt; 数组的 length</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [</span><br><span class="line">  <span class="string">'blue'</span>,</span><br><span class="line">  <span class="string">'white'</span>,</span><br><span class="line">  <span class="string">'green'</span>,</span><br><span class="line">  <span class="string">'navy'</span>,</span><br><span class="line">  <span class="string">'pink'</span>,</span><br><span class="line">  <span class="string">'purple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'yellow'</span>,</span><br><span class="line">  <span class="string">'black'</span>,</span><br><span class="line">  <span class="string">'brown'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> randomColor = colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length)]</span><br></pre></td></tr></table></figure></div><h2 id="倒序"><a href="#倒序" class="headerlink" title="倒序"></a>倒序</h2><p>怎么对数组进行倒序？只需要一行代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [</span><br><span class="line">  <span class="string">'blue'</span>,</span><br><span class="line">  <span class="string">'white'</span>,</span><br><span class="line">  <span class="string">'green'</span>,</span><br><span class="line">  <span class="string">'navy'</span>,</span><br><span class="line">  <span class="string">'pink'</span>,</span><br><span class="line">  <span class="string">'purple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'yellow'</span>,</span><br><span class="line">  <span class="string">'black'</span>,</span><br><span class="line">  <span class="string">'brown'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> reversedColors = colors.reverse()</span><br><span class="line"><span class="comment">// 或者 colors.slice().reverse();</span></span><br><span class="line"><span class="comment">// 两者有啥区别？</span></span><br><span class="line"><span class="built_in">console</span>.log(reversedColors) <span class="comment">// returns ['brown', 'black', 'yellow', 'orange', 'purple', 'pink', 'navy', 'green', 'white', 'blue']</span></span><br></pre></td></tr></table></figure></div><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>很多时候我们查找元素是否存在于某个数组中，经常使用<code>indexOf</code>方法，常常忽略<code>lastIndexOf</code>方法，后者会被使用的一个场景就是，某个数组中有重复的数据。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> lastIndex = nums.lastIndexOf(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(lastIndex) <span class="comment">// returns 9</span></span><br></pre></td></tr></table></figure></div><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><p>答案也是很多，条条大道通罗马，这里使用的是<code>reduce</code>，<code>reduce</code>方法是很值得学习的知识点，用处很多。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> sum = nums.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// returns 14</span></span><br></pre></td></tr></table></figure></div><p>本文主要列举了一些简洁的方法，实现方法很多，不在此一一列举<br>未完待续…</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;canter&gt;你必须知道的 JS 数组技巧&lt;/canter&gt;&lt;/p&gt;&lt;p&gt;在 Javascript 中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名 Javascript 工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的异步</title>
    <link href="http://www.yptup.top/posts/5cd28b9d.html"/>
    <id>http://www.yptup.top/posts/5cd28b9d.html</id>
    <published>2019-10-25T04:13:38.000Z</published>
    <updated>2020-02-25T04:29:48.238Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h2 id="异步出现的前提"><a href="#异步出现的前提" class="headerlink" title="异步出现的前提"></a>异步出现的前提</h2><p>首先，因为JavaScript语言是单线程的<strong>(目标为浏览器端，出生即为单线程)</strong>,所以就需要异步，否则JavaScript脚本智能自上而下执行，如果在上部存在一些极其复杂的代码需要解析很长的时间的话，下面的代码就会遭到阻塞，也就是用户感受到的卡死.</p><h2 id="异步如何实现"><a href="#异步如何实现" class="headerlink" title="异步如何实现"></a>异步如何实现</h2><p>由于是单线程语言，所以JavaScript实现异步的方法是通过<strong>事件循环(event loop)</strong>来实现异步.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'I’m first one code!'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I’m setTimeout function code!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'I’m last one code! '</span>);</span><br></pre></td></tr></table></figure></div><p>这段代码的运行结果为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I’m first one code!</span><br><span class="line">I’m last one code!</span><br><span class="line">I’m setTimeout <span class="keyword">function</span> code!</span><br></pre></td></tr></table></figure></div><p>所以，代码并没有是自上而下执行，setTimeout函数是延迟了一段时间，等其他语句执行完了采取执行，这种情况就为异步。</p><h3 id="eventloop的机制"><a href="#eventloop的机制" class="headerlink" title="eventloop的机制"></a>eventloop的机制</h3><p>根据上一部分我们知道，JavaScript把事件分为两类:同步与异步</p><p>所以JavaScript的执行机制其实是:</p><ul><li>判断一个任务是同步任务还是异步任务，同步进入主线程，异步进入event table</li><li>异步任务在event table中注册函数，满足该函数触发条件后，推入事件队列</li><li>同步任务在主线程按顺序执行，当主线程空闲时，再去事件队列中查看是否有可执行的异步任务，如果有就进入主线程</li></ul><p><strong>这个循环即为 event loop</strong></p><h3 id="异步也有小区别"><a href="#异步也有小区别" class="headerlink" title="异步也有小区别"></a>异步也有小区别</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;).then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure></div><p>如果按照我们刚才的理解，这段代码的结果应该为 2,4,1,3</p><p>但是很不幸的是，他的结果为 2,4,3,1<br>这也引入了另外两个概念：<strong>宏任务与微任务</strong></p><p>所以任务应该分为这两类:</p><ul><li>宏任务(macro-task): 包括整段script代码,<code>setTimeout</code>,<code>setInterval</code></li><li>微任务(micro-task): <code>Promise，catch， finally，process.nextTick(Node端)</code></li></ul><p>所以js的执行机制其实是:<br>先执行一个宏任务，过程中如果遇到微任务先把他放到微任务的事件队列中,当宏任务执行完毕后，再去查看微任务的事件队列，将微任务一次执行完，执行完毕后再去进行下一个队列的宏任务,以此循环.</p><p>借用一张图演示</p><p><img src="/posts/5cd28b9d/event-loop.jpg" alt></p><h2 id="介绍主角Async"><a href="#介绍主角Async" class="headerlink" title="介绍主角Async"></a>介绍主角Async</h2><p><code>async</code>，一个在ES2017中提出的异步方案，有人说他是<code>Generator</code>函数的语法糖，只是把<code>Generator</code>函数的 * 替换为 <code>async</code>，把yield替换为await。我们先不讨论这句话说得对不对:speak_no_evil:,但它确实是基于了<code>Generator</code>的一种改进，它让异步变得更简单了。</p><h3 id="他做了什么"><a href="#他做了什么" class="headerlink" title="他做了什么?"></a>他做了什么?</h3><p>如果要简述的话，一旦你的函数前带上了async,你的函数返回值就必定是promise对象.(他就像真香定律一样是没有可以逃过的)就算你写的函数里返回的不是promise，他也会自动用Promise.resolve()包装起来让他成为一个promise对象。<br>所以，如果我们简单理解<code>async</code>关键字的话，他其实就是给函数加上一个标识，说明这个函数内部有异步操作。</p><h2 id="What-is-await-waiting-for"><a href="#What-is-await-waiting-for" class="headerlink" title="What is await waiting for?"></a>What is await waiting for?</h2><p>我们再次简单的介绍以下 await，await 其实等的是右侧表达式的结果.</p><blockquote><p>如果右侧是一个函数，则是这个函数的返回值。如果是一个值则就为此值.</p></blockquote><p>我们通过一个例子来”见识见识”它</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun1 is started!'</span>);</span><br><span class="line">    <span class="keyword">await</span> fun2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun1 ending!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun2 is running!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun1();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br></pre></td></tr></table></figure></div><p>我们知道，await是通过执行到此时让出线程，通过阻塞后面的代码来执行，但我们执行上面的代码发现结果为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun1 is started!</span><br><span class="line">fun2 is running!</span><br><span class="line">script start</span><br><span class="line">fun1 endding!</span><br></pre></td></tr></table></figure></div><p>注意，这里fun2先于”script start” 执行，所以 <code>await</code> 的那个表达式的执行顺序其实是从右到左，即为执行了fun2后读到了<code>await</code>关键字，然后阻塞后面的代码，这点非常重要，因为之前因为”一旦遇到<code>await</code>就立马退出线程，阻塞后面的代码”的观点，认为 <code>await</code>也会阻塞他后面的那个表达式，但其实不然。</p><blockquote><p>await 与 async 的关系就像鱼和水， await必须要有async才可以存在，而async却不一定需要有await。</p></blockquote><h2 id="await-的下一步操作"><a href="#await-的下一步操作" class="headerlink" title="await 的下一步操作"></a>await 的下一步操作</h2><p>一般来说 await等到的右侧表达式结果有两种情况：</p><p>Promise or Not Promise。</p><ul><li>如果不是promise，await会阻塞之后的代码，就先去执行async外面的同步代码，同步代码执行完后再回到async内部，把这个不是promise的结果作为await的结果。</li><li>如果是promise对象，await也会先阻塞async后面的代码，然后执行async外面的同步代码，等待这个promise对象到达fulfilled状态后，把 resolve 的参数作为 await的运算结果。其实就是执行了await Promise.resolve()，这里不做详细解释.</li></ul><h2 id="Async-与-Promise-和-Generator的一些比较"><a href="#Async-与-Promise-和-Generator的一些比较" class="headerlink" title="Async 与 Promise 和 Generator的一些比较"></a>Async 与 Promise 和 Generator的一些比较</h2><ul><li>首先Promise的提出是解决了之前令人头疼的回调地狱(callback hell)问题，但直观的看上去其实就像用了一个类库，通过Promise的api来完成了异步操作，操作本身的可调控性不是很高，但已经很实用了。</li><li>Generator函数的语义相较于Promise清晰了许多，但问题就是如果他要自动执行的话必须实用任务运行器来自动执行它。</li><li>Async相较于Generator函数实现起来相对简洁，更贴切语义。它在语言层面提供了Generator的自动执行器，代码量也大大减少。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 标准入门</a><br><a href="https://www.cnblogs.com/jiasm/p/9482443.html" target="_blank" rel="noopener">微任务、宏任务与Event-Loop</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;异步出现的前提&quot;&gt;&lt;a href=&quot;#异步出现的前提&quot; class=&quot;headerlink&quot; title=&quot;异步出现的前提&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《掌控习惯》读后感</title>
    <link href="http://www.yptup.top/posts/a0834705.html"/>
    <id>http://www.yptup.top/posts/a0834705.html</id>
    <published>2019-10-02T15:07:05.000Z</published>
    <updated>2020-03-02T15:37:27.194Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>很多人想养成早起阅读的好习惯，也有很多人想要戒烟戒酒，摒除一些坏的习惯，但我们往往会半途而废，导致我们丧失信心，没有了继续下去的勇气。最近读了一本书，叫《掌控习惯》，为什么大家的好习惯一直难以养成，为什么大家的坏习惯很难戒除，其实不是我们没有决心，只是我们用错了方法。</p><a id="more"></a><p><img src="http://blog.yptup.top/new-old.jpeg" alt></p><p>大家先想一想自己有哪些坏习惯，有人会说我沉迷网络游戏，有人会说，我喜欢抽烟，还有大部分大学生都普遍有一个坏习惯，那就是熬夜。我们先来分析一下，沉迷网络游戏这个坏习惯，网络游戏它是一个什么机制呢？它是一种让人上瘾的机制，你在击杀一个敌人，或者赢得一次比赛之后，当时你就会感到特别的喜悦也就是说你获得的快乐，获得的满足感，是有即刻性的。于是我们慢慢的喜欢上了这种感觉，一次又一次的重复，我们便沉迷上了网络游戏。其实我们沉迷的并不是网络游戏，而是沉迷在完成网络游戏之后即可获得的喜悦感。现在大家再来看看，抽烟和熬夜，是不是也有相同的性质呢？</p><p><img src="http://blog.yptup.top/game.jpeg" alt></p><p>我们都很想去养成一个很好的习惯，有人想要让自己习惯于健身，有人想要习惯于让自己早起，我们往往会发现这些习惯是很不容易养成的，每次健身之后，你不会很明显的看到自己身上多了一块儿腹肌，或者你的胳膊变得更粗壮了，健身便失去了即刻的满足感，在一次两次三次健身之后，我们都无法获得自己想要的结果，于是我们的内心就会告诉我们放弃吧，健身，没有很好的效果，意志力相对薄弱的人，会马上放弃，而一些意志力比较强一些的人，他们会坚持一段时间以后选择放弃，一个好习惯便被无情的终止了。</p><p><img src="http://blog.yptup.top/timg.jpg" alt></p><p>相信很多人看到这里已经对好习惯和坏习惯，有了大致的了解，也有很多人已经在为养成一个好习惯，找到了一个大致的方向，下面给大家介绍一个养成好习惯的方法：早起之后给自己画一个美美的妆;健身以后，奖励自己拿出手机，看一看朋友圈;阅读之后奖励自己一杯咖啡，这就叫喜好绑定法。在完成一个自己想要坚持的习惯以后，给自己一个小小的奖励，让自己获得即刻的满足感，我们对这个习惯的坚持便多了一份喜悦。</p><p><img src="http://blog.yptup.top/coffee.jpeg" alt></p><p>想象一下，你每天早上起床之后，可以给自己画美美的妆，是不是很开心呢?我们大家都希望开心，养成属于我们自己的好习惯，让我们的生活更加美丽。</p><p><img src="http://blog.yptup.top/sunshine.jpeg" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;很多人想养成早起阅读的好习惯，也有很多人想要戒烟戒酒，摒除一些坏的习惯，但我们往往会半途而废，导致我们丧失信心，没有了继续下去的勇气。最近读了一本书，叫《掌控习惯》，为什么大家的好习惯一直难以养成，为什么大家的坏习惯很难戒除，其实不是我们没有决心，只是我们用错了方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/categories/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/tags/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 transform 中的坑</title>
    <link href="http://www.yptup.top/posts/f4adc94f.html"/>
    <id>http://www.yptup.top/posts/f4adc94f.html</id>
    <published>2019-09-19T14:23:54.000Z</published>
    <updated>2020-03-12T13:13:14.793Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>transform 对普通元素的影响是个巨坑，自己亲身体验的总共有三点</p><blockquote><ol><li>提升元素的垂直地位，也就是 z-index 会变大</li><li>改变元素的定位属性，fixed 变成 absolute，absolute 变成 relative</li><li>使绝对定位(absolute)的子元素受父元素 overflow:hidden 的作用。（ps:绝对定位(absolute)的子元素宽度大于父元素，如果父容器的定位是 static，也就是默认时，overflow:hidden 无效）</li></ol></blockquote><p style="color:red">下面我们来看一下没有没有transform属性的状态</p><p><img src="/posts/f4adc94f/no-transform.png" alt="no-transform"></p><p>再来看一下给红色框增加 transform 属性后的状态</p><p><img src="/posts/f4adc94f/transform.png" alt="transform"></p><p>注:<br>CSS3 新增的一些属性虽然才艺高超，但是在非必要的情况下，还是尽量不要用它<br>CSS3 虽好，但是不要贪杯哦</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;transform 对普通元素的影响是个巨坑，自己亲身体验的总共有三点&lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;提升元素的垂直地位，也就是
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://www.yptup.top/categories/CSS/"/>
    
    
      <category term="前端踩坑记" scheme="http://www.yptup.top/tags/%E5%89%8D%E7%AB%AF%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>页面性能优化</title>
    <link href="http://www.yptup.top/posts/d333b549.html"/>
    <id>http://www.yptup.top/posts/d333b549.html</id>
    <published>2019-08-21T12:19:27.000Z</published>
    <updated>2020-03-12T13:12:04.578Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p><canter>优化前端性能，提升用户体验，一直是从事前端工作人员必须考虑的问题，之前参考过很多资料，大多说的不是很详细，重点描述的也不是很到位，鄙人不才，愿集百家之所长，供大家参考(其实大概意思就是本文非本人原创，都是参考自别人的资料，由于资源来自四面八方，就不在这里一一列举了)</canter></p><a id="more"></a><h2 id="性能优化概述"><a href="#性能优化概述" class="headerlink" title="性能优化概述"></a>性能优化概述</h2><p><strong>从输入 URL 到页面加载完成，完整的链路</strong></p><p><img src="http://blog.yptup.top/gaishu.webp" alt></p><ol><li>DNS 解析</li><li>TCP 连接</li><li>HTTP 请求抛出</li><li>服务端处理请求，HTTP 响应返回</li><li>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</li></ol><h2 id="整个性能消化"><a href="#整个性能消化" class="headerlink" title="-整个性能消化"></a>-整个性能消化</h2><p><img src="http://blog.yptup.top/xingneng.webp" alt></p><h2 id="HTTP-层面优化"><a href="#HTTP-层面优化" class="headerlink" title="HTTP 层面优化"></a>HTTP 层面优化</h2><ul><li>DNS 解析:<br>DNS 实现域名到 IP 的映射。通过域名访问站点，每次请求都要做 DNS 解析。目前每次 DNS 解析，通常在 200ms 以下。一般采用 DNS Prefetch 一种 DNS 预解析技术，当你浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页中的连接时就无需进行 DNS 的解析，减少用户等待时间，提高用户体验。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"www.baidu.com"</span> /&gt;</span><br><span class="line"><span class="comment">// 只支持部分浏览器</span></span><br></pre></td></tr></table></figure></div><ul><li><p>TCP 连接：<br>采用 http2.0，可以复用 tcp 通道，采用二进制格式而非文本格式，使用报头压缩，HTTP/2 降低了开销，支持 cache push</p></li><li><p>浏览器并发<br>基于端口跟线程切换开销，浏览器不可能无限的并发请求。chrome 的并发为 6，超过限制数目的请求就会被阻塞；<br>对于某些静态资源，图片等等，我们可以对其 URL 分散处理 ，不同的资源域名(部署在 cdn 上)。</p></li><li><p>http 请求次数<br>减少 http 的请求次数，将多个请求合并成同一个，减少 http 的开销</p></li><li><p>webpack<br>充分利用 webpack 提供给我们的能力，利用 DllPlugin 与 commonPlugins 等插件对我们代码进行<br>优化，文件的分割与合并，公共代码的提取，长缓存等策略</p></li><li><p>HTTP 压缩<br>采用 Gzip 压缩：HTTP 压缩就是以缩小体积为目的，对 HTTP 内容进行重新编码的过程，原理是找出一些重复出现的字符串、临时替换它们，从而使整个文件变小，文件中代码的重复率越高，那么压缩的效率就越高，使用 Gzip 的收益也就越大</p></li></ul><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><p><img src="http://blog.yptup.top/img.webp" alt></p><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><ul><li>强缓存：<br>浏览器在请求某一资源时，会先获取该资源缓存的 header 信息，判断是否命中强缓存（cache-control 和 expires 信息），若命中直接从缓存中获取资源信息，包括缓存 header 信息；本次请求根本就不会与服务器进行通信</li></ul><ol><li><p>expires:这是 http1.0 时的规范；它的值为一个绝对时间的 GMT 格式的时间字符串，如 Mon, 10 Jun 2015 21:31:12 GMT，如果发送请求的时间在 expires 之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源</p></li><li><p>cache-control：max-age=number，这是 http1.1 时出现的 header 信息，主要是利用该字段的 max-age 值来进行判断，它是一个相对值；资源第一次的请求时间和 Cache-Control 设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；cache-control 除了该字段外，还有下面几个比较常用的设置值：no-cache ，no-store，public，private</p></li></ol><ul><li>协商缓存（对比缓存）</li></ul><ol><li>Last-Modified/If-Modified-Since:第一次请求，服务端在 Response Headers ：Last-Modified:Fri, 27 Oct 2017 06:35:57 GMT，也就是服务端最后修改该资源的时间。浏览器再次跟服务器请求这个资源时，会在 request 的 header 上加上 If-Modified-Since 的 header，这个 header 的值就是上一次请求时返回的 Last-Modified 的值，服务器进行比较，如果相同则返回 304，否则浏览器直接从服务器加载资源时，Last-Modified 的 Header 在重新加载的时候会被更新，下次请求时，If-Modified-Since 会启用上次返回的 Last-Modified 值</li><li>Etag/If-None-Match: 服务器会为每个资源生成一个唯一的标识字符串，只要文件内容不同，它们对应的 Etag 就是不同的；If-Modified-Since 能检查到的精度是 s 级的，某些服务器不能精确的得到文件的最后修改时间，我们编辑了文件，但文件的内容没有改变。因为服务器是根据文件的最后修改时间来判断的，导致重新请求所以才出现了 Etag，Etag 对服务器也有性能损耗</li></ol><blockquote><p>Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。</p></blockquote><ul><li>请求过程总结：<br><img src="http://blog.yptup.top/modified.webp" alt></li></ul><h2 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h2><ul><li><p>DOM 树:<br>解析 HTML 以创建的是 DOM 树（DOM tree ）：渲染引擎开始解析 HTML 文档，转换树中的标签到 DOM 节点，它被称为“内容树”。</p></li><li><p>CSSOM 树：<br>解析 CSS（包括外部 CSS 文件和样式元素）创建的是 CSSOM 树。CSSOM 的解析过程与 DOM 的解析过程是并行的。</p></li><li><p>渲染树：<br>CSSOM 与 DOM 结合，之后我们得到的就是渲染树（Render tree ）。</p></li><li><p>布局渲染树：<br>从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标，我们便得到了基于渲染树的布局渲染树（Layout of the render tree）。</p></li><li><p>绘制渲染树:<br>遍历渲染树，每个节点将使用 UI 后端层来绘制。整个过程叫做绘制渲染树（Painting the render tree）。</p></li></ul><center class="color-ccc">渲染流程图</center><p><img src="http://blog.yptup.top/Image.png" alt></p><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><ul><li>普通模式，JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执⾏完毕才能去做其它事情。一般将此类 js 放在在<code>body</code>标签的底部，减少对整个页面下载的影响</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>async 模式：JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行，async 模式没有执行顺序，先返回的优先执行，先到先得</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>defer 模式：JS 的加载是异步的，执行是被推迟的。等整个文档解析完成 DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">"index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</p><ul><li>动态加载脚本：此文件当元素添加到页面之后立刻开始下载。无论在何处启动下载，文件的下载和运行都不会阻塞其他页面处理过程。甚至可以将这些代码放在<head>部分而不会对其余部分的页面代码造成影响</head></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.type = <span class="string">'text/javascript'</span></span><br><span class="line">script.src = <span class="string">'script1.js'</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script)</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;canter&gt;优化前端性能，提升用户体验，一直是从事前端工作人员必须考虑的问题，之前参考过很多资料，大多说的不是很详细，重点描述的也不是很到位，鄙人不才，愿集百家之所长，供大家参考(其实大概意思就是本文非本人原创，都是参考自别人的资料，由于资源来自四面八方，就不在这里一一列举了)&lt;/canter&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS运行机制</title>
    <link href="http://www.yptup.top/posts/6fdc6fb4.html"/>
    <id>http://www.yptup.top/posts/6fdc6fb4.html</id>
    <published>2019-08-20T08:18:14.000Z</published>
    <updated>2020-03-12T13:11:21.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><h2 id="一、引子"><a href="#一、引子" class="headerlink" title="一、引子"></a>一、引子</h2><p>本文介绍JavaScript运行机制，这一部分比较抽象，我们先从一道面试题入手：</p><a id="more"></a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 请问数字打印顺序是什么？</span></span><br></pre></td></tr></table></figure></div><p>这一题看似很简单，但如果你不了解JavaScript运行机制，很容易就答错了。题目的答案是依次输出1 2 3，如果你有疑惑，下文有详细解释。</p><h2 id="二、理解JS的单线程的概念"><a href="#二、理解JS的单线程的概念" class="headerlink" title="二、理解JS的单线程的概念"></a>二、理解JS的单线程的概念</h2><p>JavaScript语言的一大特点就是单线程，也就是说，<strong>同一个时间只能做一件事</strong>。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><h2 id="三、理解任务队列-消息队列"><a href="#三、理解任务队列-消息队列" class="headerlink" title="三、理解任务队列(消息队列)"></a>三、理解任务队列(消息队列)</h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。JavaScript语言的设计者意识到这个问题，将所有任务分成两种，<span style="color:#f40">一种是同步任务（synchronous），另一种是异步任务（asynchronous）</span>。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<span style="color:#f40">异步任务包括宏任务和微任务(后面会重点介绍)</span>，接下来我们通过两个例子说明同步任务和异步任务的区别：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line"><span class="comment">// 请问最后的输出结果是什么？</span></span><br></pre></td></tr></table></figure></div><p>如果你的回答是A,恭喜你答对了，因为这是同步任务，程序由上到下执行，遇到while()死循环，下面语句就没办法执行。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line"><span class="comment">// 请问最后的输出结果是什么？</span></span><br></pre></td></tr></table></figure></div><p>如果你的答案是A，恭喜你现在对js运行机制已经有个粗浅的认识了！题目中的setTimeout()就是个异步任务。<strong>在所有同步任务执行完之前，任何的异步任务是不会执行的</strong>，关于这点下文还会详细说明。</p><h2 id="四、理解Event-Loop"><a href="#四、理解Event-Loop" class="headerlink" title="四、理解Event Loop"></a>四、理解Event Loop</h2><p><strong>异步执行的运行机制如下：</strong></p><ol><li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</li><li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面的第三步。</li></ol><p><strong>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。</strong>这个过程会循环反复。以下这张图可以很好说明这点。<br><img src="/posts/6fdc6fb4/event-loop.png" alt="Event Loop"></p><h2 id="五、哪些语句会放入异步任务队列及放入时机"><a href="#五、哪些语句会放入异步任务队列及放入时机" class="headerlink" title="五、哪些语句会放入异步任务队列及放入时机"></a>五、哪些语句会放入异步任务队列及放入时机</h2><p><strong>一般来说，有以下四种会放入异步任务队列：</strong></p><ol><li>setTimeout和setlnterval</li><li>DOM事件</li><li>ES6中的Promise</li><li>Ajax异步请求</li></ol><p><strong>javascript 代码运行分两个阶段：</strong></p><ol><li>预解析—把所有的函数定义提前，所有的变量声明提前，变量的赋值不提前</li><li>执行—从上到下执行（按照js运行机制）</li></ol><p>至于放入异步任务队列的时机，我们通过 setTimeout的例子和Ajax例子来详细说明：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例题1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(i);  </span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请问最后的输出结果是什么？</span></span><br></pre></td></tr></table></figure></div><p>for循环一次碰到一个 setTimeout()，<span style="color:#f40">并不是马上把setTimeout()拿到异步队列中，而要等到一秒后，才将其放到任务队列里面</span>，一旦”执行栈”中的所有同步任务执行完毕（即for循环结束，此时i已经为5），系统就会读取已经存放”任务队列”的setTimeout()（有五个），于是答案是输出5个5。</p><p>上面也提到，<span style="color:#EFEFDA"><strong>在到达指定时间时，定时器就会将相应回调函数插入“任务队列”尾部。这就是“定时器（timer）”功能。</strong></span></p><ul><li>关于定时器的重要补充：<br>定时器包括setTimeout与 setInterval 两个方法。它们的第二个参数是指定其回调函数推迟/每隔多少毫秒数后执行。</li></ul><p>对于第二个参数有以下需要注意的地方：</p><p>当第二个参数缺省时，默认为 0；</p><p>当指定的值小于 4 毫秒，则增加到 4ms(4ms 是 HTML5 标准指定的，对于 2010 年及之前的浏览器则是 10ms);也就是说至少需要4毫秒，该setTimeout()拿到任务队列中。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例题2</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url：“xxxxx<span class="string">",</span></span><br><span class="line"><span class="string">success:function (result)&#123;</span></span><br><span class="line"><span class="string">console.log("</span>a<span class="string">")</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">setTimeout(function ()&#123;</span></span><br><span class="line"><span class="string">console.log("</span>b<span class="string">")</span></span><br><span class="line"><span class="string">&#125;,100)</span></span><br><span class="line"><span class="string">setTimeout(function ()&#123;</span></span><br><span class="line"><span class="string">console.log("</span>c<span class="string">")</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">console.log("</span>d<span class="string">");</span></span><br></pre></td></tr></table></figure></div><p><img src="/posts/6fdc6fb4/ajax.png" alt></p><p>ajax加载完成时才会放入异步队列，至于这段时间不确定，所有有两种情况：①大于100ms,最后的结果是 d c b a ;②小于100ms,最后的结果便是d c a b。</p><h2 id="六、微任务-Microtask-与宏任务-Macrotask"><a href="#六、微任务-Microtask-与宏任务-Macrotask" class="headerlink" title="六、微任务(Microtask)与宏任务(Macrotask)"></a>六、微任务(Microtask)与宏任务(Macrotask)</h2><p>我们上面提到异步任务分为宏任务和微任务，宏任务队列可以有多个，微任务队列只有一个。</p><ul><li>宏任务包括：script(全局任务), setTimeout, setInterval, setImmediate, I/O, UI rendering。</li><li>微任务包括: new Promise().then(回调), process.nextTick, Object.observe(已废弃), MutationObserver(html5新特性)</li></ul><p><strong>当执行栈中的所有同步任务执行完毕时，是先执行宏任务还是微任务呢？</strong></p><ul><li>由于执行代码入口都是全局任务 script，而全局任务属于宏任务，所以当栈为空，同步任务任务执行完毕时，会先执行微任务队列里的任务。</li><li>微任务队列里的任务全部执行完毕后，会读取宏任务队列中拍最前的任务。</li><li>执行宏任务的过程中，遇到微任务，依次加入微任务队列。</li><li>栈空后，再次读取微任务队列里的任务，依次类推。</li></ul><p><img src="/posts/6fdc6fb4/no-referrer.png" alt="no-referrer"></p><p>一句话概括上面的流程图：<span style="color:#f40">当某个宏任务队列的中的任务全部执行完以后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，就查看是否有其他宏任务队列。</span></p><p>接下来我们看两道例子来介绍上面流程：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise1'</span>)  </span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise2'</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><p>最后输出结果是Promise1，setTimeout1，Promise2，setTimeout2</p><ul><li>一开始执行栈的同步任务执行完毕，会去查看是否有微任务队列，上题中存在(有且只有一个)，然后执行微任务队列中的所有任务输出Promise1，同时会生成一个宏任务 setTimeout2</li><li>然后去查看宏任务队列，宏任务 setTimeout1 在 setTimeout2 之前，先执行宏任务 setTimeout1，输出 setTimeout1</li><li>在执行宏任务setTimeout1时会生成微任务Promise2 ，放入微任务队列中，接着先去清空微任务队列中的所有任务，输出 Promise2</li><li>清空完微任务队列中的所有任务后，就又会去宏任务队列取一个，这回执行的是 setTimeout2</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'----------------- start -----------------'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">  resolve();  <span class="comment">// 修改promise实例对象的状态为成功的状态</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise实例成功回调执行'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'----------------- end -----------------'</span>);</span><br></pre></td></tr></table></figure></div><p><img src="/posts/6fdc6fb4/start-end.png" alt></p><h2 id="七、解析"><a href="#七、解析" class="headerlink" title="七、解析"></a>七、解析</h2><p>如果要输出0~4，上面例题应该如何修改？</p><ol><li><p>将var变为let</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>加个立即执行函数</p></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li>也可以通过这样加闭包</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="number">5</span>;i++)&#123;  </span><br><span class="line">  <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">      <span class="keyword">var</span> j = i;    </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">          <span class="built_in">console</span>.log(j);  </span><br><span class="line">      &#125;,<span class="number">1000</span>)  </span><br><span class="line">  &#125;    </span><br><span class="line">a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、引子&quot;&gt;&lt;a href=&quot;#一、引子&quot; class=&quot;headerlink&quot; title=&quot;一、引子&quot;&gt;&lt;/a&gt;一、引子&lt;/h2&gt;&lt;p&gt;本文介绍JavaScript运行机制，这一部分比较抽象，我们先从一道面试题入手：&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>太极24式-ES6</title>
    <link href="http://www.yptup.top/posts/c7506d5c.html"/>
    <id>http://www.yptup.top/posts/c7506d5c.html</id>
    <published>2019-08-15T13:42:57.000Z</published>
    <updated>2020-03-06T13:59:44.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>本文主要介绍 24 中 es6 方法，这些方法都挺实用的，本本请记好，时不时翻出来看看。</p><h2 id="1-如何隐藏所有指定的元素"><a href="#1-如何隐藏所有指定的元素" class="headerlink" title="1.如何隐藏所有指定的元素"></a>1.如何隐藏所有指定的元素</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hide = <span class="function">(<span class="params">el</span>) =&gt;</span> <span class="built_in">Array</span>.from(el).forEach(<span class="function"><span class="params">e</span> =&gt;</span> (e.style.display = <span class="string">'none'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例:隐藏页面上所有`&lt;img&gt;`元素?</span></span><br><span class="line">hide(<span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>))</span><br></pre></td></tr></table></figure></div><h2 id="2-如何检查元素是否具有指定的类？"><a href="#2-如何检查元素是否具有指定的类？" class="headerlink" title="2.如何检查元素是否具有指定的类？"></a>2.如何检查元素是否具有指定的类？</h2><p>页面DOM里的每个节点上都有一个<code>classList</code>对象，程序员可以使用里面的方法新增、删除、修改节点上的CSS类。使用<code>classList</code>，程序员还可以用它来判断某个节点是否被赋予了某个CSS类。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> el.classList.contains(className)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">hasClass(<span class="built_in">document</span>.querySelector(<span class="string">'p.special'</span>), <span class="string">'special'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="3-如何切换一个元素的类"><a href="#3-如何切换一个元素的类" class="headerlink" title="3.如何切换一个元素的类?"></a>3.如何切换一个元素的类?</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toggleClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> el.classList.toggle(className)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例 移除 p 具有类`special`的 special 类</span></span><br><span class="line">toggleClass(<span class="built_in">document</span>.querySelector(<span class="string">'p.special'</span>), <span class="string">'special'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="4-如何获取当前页面的滚动位置？"><a href="#4-如何获取当前页面的滚动位置？" class="headerlink" title="4.如何获取当前页面的滚动位置？"></a>4.如何获取当前页面的滚动位置？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  x: el.pageXOffset !== <span class="literal">undefined</span> ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">  y: el.pageYOffset !== <span class="literal">undefined</span> ? el.pageYOffset : el.scrollTop</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">getScrollPosition(); <span class="comment">// &#123;x: 0, y: 200&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="5-如何平滑滚动到页面顶部"><a href="#5-如何平滑滚动到页面顶部" class="headerlink" title="5.如何平滑滚动到页面顶部"></a>5.如何平滑滚动到页面顶部</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollToTop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">scrollToTop()</span><br></pre></td></tr></table></figure></div><p><code>window.requestAnimationFrame()</code> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p><code>requestAnimationFrame</code>：优势：由系统决定回调函数的执行时机。60Hz的刷新频率，那么每次刷新的间隔中会执行一次回调函数，不会引起丢帧，不会卡顿。</p><h2 id="6-如何检查父元素是否包含子元素？"><a href="#6-如何检查父元素是否包含子元素？" class="headerlink" title="6.如何检查父元素是否包含子元素？"></a>6.如何检查父元素是否包含子元素？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementContains = <span class="function">(<span class="params">parent, child</span>) =&gt;</span> parent !== child &amp;&amp; parent.contains(child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">elementContains(<span class="built_in">document</span>.querySelector(<span class="string">'head'</span>), <span class="built_in">document</span>.querySelector(<span class="string">'title'</span>)); </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">elementContains(<span class="built_in">document</span>.querySelector(<span class="string">'body'</span>), <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>)); </span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><h2 id="7-如何检查指定的元素在视口中是否可见？"><a href="#7-如何检查指定的元素在视口中是否可见？" class="headerlink" title="7.如何检查指定的元素在视口中是否可见？"></a>7.如何检查指定的元素在视口中是否可见？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementIsVisibleInViewport = <span class="function">(<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">return</span> partiallyVisible</span><br><span class="line">    ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">        ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">elementIsVisibleInViewport(el); <span class="comment">// 需要左右可见</span></span><br><span class="line">elementIsVisibleInViewport(el, <span class="literal">true</span>); <span class="comment">// 需要全屏(上下左右)可以见</span></span><br></pre></td></tr></table></figure></div><h2 id="8-如何获取元素中的所有图像？"><a href="#8-如何获取元素中的所有图像？" class="headerlink" title="8.如何获取元素中的所有图像？"></a>8.如何获取元素中的所有图像？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getImages = <span class="function">(<span class="params">el, includeDuplicates = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> images = [...el.getElementsByTagName(<span class="string">'img'</span>)].map(<span class="function"><span class="params">img</span> =&gt;</span> img.getAttribute(<span class="string">'src'</span>));</span><br><span class="line">  <span class="keyword">return</span> includeDuplicates ? images : [...new <span class="built_in">Set</span>(images)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例：includeDuplicates 为 true 表示需要排除重复元素</span></span><br><span class="line">getImages(<span class="built_in">document</span>, <span class="literal">true</span>); <span class="comment">// ['image1.jpg', 'image2.png', 'image1.png', '...']</span></span><br><span class="line">getImages(<span class="built_in">document</span>, <span class="literal">false</span>); <span class="comment">// ['image1.jpg', 'image2.png', '...']</span></span><br></pre></td></tr></table></figure></div><h2 id="9-如何确定设备是移动设备还是台式机-笔记本电脑？"><a href="#9-如何确定设备是移动设备还是台式机-笔记本电脑？" class="headerlink" title="9.如何确定设备是移动设备还是台式机/笔记本电脑？"></a>9.如何确定设备是移动设备还是台式机/笔记本电脑？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> detectDeviceType = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)</span><br><span class="line">    ? <span class="string">'Mobile'</span></span><br><span class="line">    : <span class="string">'Desktop'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">detectDeviceType(); <span class="comment">// "Mobile" or "Desktop"</span></span><br></pre></td></tr></table></figure></div><h2 id="10-How-to-get-the-current-URL"><a href="#10-How-to-get-the-current-URL" class="headerlink" title="10.How to get the current URL?"></a>10.How to get the current URL?</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentURL = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.location.href</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">currentURL() <span class="comment">// 'https://google.com'</span></span><br></pre></td></tr></table></figure></div><h2 id="11-如何创建一个包含当前URL参数的对象？"><a href="#11-如何创建一个包含当前URL参数的对象？" class="headerlink" title="11.如何创建一个包含当前URL参数的对象？"></a>11.如何创建一个包含当前URL参数的对象？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getURLParameters = <span class="function"><span class="params">url</span> =&gt;</span></span><br><span class="line">  (url.match(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>) || []).reduce(</span><br><span class="line">    (a, v) =&gt; ((a[v.slice(<span class="number">0</span>, v.indexOf(<span class="string">'='</span>))] = v.slice(v.indexOf(<span class="string">'='</span>) + <span class="number">1</span>)), a),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">getURLParameters(<span class="string">'http://url.com/page?n=Adam&amp;s=Smith'</span>); <span class="comment">// &#123;n: 'Adam', s: 'Smith'&#125;</span></span><br><span class="line">getURLParameters(<span class="string">'google.com'</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="12-如何将一组表单元素转化为对象？"><a href="#12-如何将一组表单元素转化为对象？" class="headerlink" title="12.如何将一组表单元素转化为对象？"></a>12.如何将一组表单元素转化为对象？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formToObject = <span class="function"><span class="params">form</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(<span class="keyword">new</span> FormData(form)).reduce(</span><br><span class="line">    (acc, [key, value]) =&gt; (&#123;</span><br><span class="line">      ...acc,</span><br><span class="line">      [key]: value</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">formToObject(<span class="built_in">document</span>.querySelector(<span class="string">'#form'</span>)); </span><br><span class="line"><span class="comment">// &#123; email: 'test@email.com', name: 'Test Name' &#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="13-如何从对象检索给定选择器指示的一组属性？"><a href="#13-如何从对象检索给定选择器指示的一组属性？" class="headerlink" title="13.如何从对象检索给定选择器指示的一组属性？"></a>13.如何从对象检索给定选择器指示的一组属性？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = (from, ...selectors) =&gt;</span><br><span class="line">  [...selectors].map(s =&gt;</span><br><span class="line">    s</span><br><span class="line">      .replace(/\[([^\[\]]*)\]/g, '.$1.')</span><br><span class="line">      .split('.')</span><br><span class="line">      .filter(t =&gt; t !== '')</span><br><span class="line">      .reduce((prev, cur) =&gt; prev &amp;&amp; prev[cur], from)</span><br><span class="line">  );</span><br><span class="line">const obj = &#123; selector: &#123; <span class="attr">to</span>: &#123; <span class="attr">val</span>: <span class="string">'val to select'</span> &#125; &#125;, <span class="attr">target</span>: [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="string">'test'</span> &#125;] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example</span></span><br><span class="line"><span class="keyword">get</span>(obj, 'selector.to.val', 'target[0]', 'target[2].a'); </span><br><span class="line">// ['val to select', 1, 'test']</span><br></pre></td></tr></table></figure></div><h2 id="14-如何在等待指定时间后调用提供的函数？"><a href="#14-如何在等待指定时间后调用提供的函数？" class="headerlink" title="14.如何在等待指定时间后调用提供的函数？"></a>14.如何在等待指定时间后调用提供的函数？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function">(<span class="params">fn, wait, ...args</span>) =&gt;</span> setTimeout(fn, wait, ...args);</span><br><span class="line">delay(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1000</span>,</span><br><span class="line">  <span class="string">'later'</span></span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后打印 'later'</span></span><br></pre></td></tr></table></figure></div><h2 id="15-如何在给定元素上触发特定事件且能选择地传递自定义数据？"><a href="#15-如何在给定元素上触发特定事件且能选择地传递自定义数据？" class="headerlink" title="15.如何在给定元素上触发特定事件且能选择地传递自定义数据？"></a>15.如何在给定元素上触发特定事件且能选择地传递自定义数据？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> triggerEvent = <span class="function">(<span class="params">el, eventType, detail</span>) =&gt;</span></span><br><span class="line">  el.dispatchEvent(<span class="keyword">new</span> CustomEvent(eventType, &#123; detail &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">triggerEvent(<span class="built_in">document</span>.getElementById(<span class="string">'myId'</span>), <span class="string">'click'</span>);</span><br><span class="line">triggerEvent(<span class="built_in">document</span>.getElementById(<span class="string">'myId'</span>), <span class="string">'click'</span>, &#123; <span class="attr">username</span>: <span class="string">'bob'</span> &#125;);</span><br></pre></td></tr></table></figure></div><p>自定义事件的函数有 <code>Event</code>、<code>CustomEvent</code> 和 <code>dispatchEvent</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 window派发一个resize内置事件</span></span><br><span class="line"><span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'resize'</span>))</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接自定义事件，使用 Event 构造函数：</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'build'</span>);</span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'#id'</span>)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">elem.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; ... &#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 触发事件.</span></span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure></div><p><code>CustomEvent</code> 可以创建一个更高度自定义事件，还可以附带一些数据，具体用法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myEvent = <span class="keyword">new</span> CustomEvent(eventname, options);</span><br><span class="line">其中 options 可以是：</span><br><span class="line">&#123;</span><br><span class="line">  detail: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  bubbles: <span class="literal">true</span>,    <span class="comment">//是否冒泡</span></span><br><span class="line">  cancelable: <span class="literal">false</span> <span class="comment">//是否取消默认事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中 <code>detail</code> 可以存放一些初始化的信息，可以在触发的时候调用。其他属性就是定义该事件是否具有冒泡等等功能。</p><p>内置的事件会由浏览器根据某些操作进行触发，自定义的事件就需要人工触发。 <code>dispatchEvent</code> 函数就是用来触发某个事件：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.dispatchEvent(customEvent);</span><br></pre></td></tr></table></figure></div><p>上面代码表示，在 <code>element</code> 上面触发 <code>customEvent</code> 这个事件。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add an appropriate event listener</span></span><br><span class="line">obj.addEventListener(<span class="string">"cat"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; process(e.detail) &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// create and dispatch the event</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">"cat"</span>, &#123;<span class="string">"detail"</span>:&#123;<span class="string">"hazcheeseburger"</span>:<span class="literal">true</span>&#125;&#125;);</span><br><span class="line">obj.dispatchEvent(event);</span><br><span class="line">使用自定义事件需要注意兼容性问题，而使用 jQuery 就简单多了：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定自定义事件</span></span><br><span class="line">$(element).on(<span class="string">'myCustomEvent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">$(element).trigger(<span class="string">'myCustomEvent'</span>);</span><br><span class="line"><span class="comment">// 此外，你还可以在触发自定义事件时传递更多参数信息：</span></span><br><span class="line"> </span><br><span class="line">$( <span class="string">"p"</span> ).on( <span class="string">"myCustomEvent"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> event, myName </span>) </span>&#123;</span><br><span class="line">  $( <span class="keyword">this</span> ).text( myName + <span class="string">", hi there!"</span> );</span><br><span class="line">&#125;);</span><br><span class="line">$( <span class="string">"button"</span> ).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $( <span class="string">"p"</span> ).trigger( <span class="string">"myCustomEvent"</span>, [ <span class="string">"John"</span> ] );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="16-如何从元素中移除事件监听器"><a href="#16-如何从元素中移除事件监听器" class="headerlink" title="16.如何从元素中移除事件监听器?"></a>16.如何从元素中移除事件监听器?</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> off = <span class="function">(<span class="params">el, evt, fn, opts = <span class="literal">false</span></span>) =&gt;</span> el.removeEventListener(evt, fn, opts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'!'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, fn);</span><br><span class="line">off(<span class="built_in">document</span>.body, <span class="string">'click'</span>, fn);</span><br></pre></td></tr></table></figure></div><h2 id="17-如何获得给定毫秒数的可读格式？"><a href="#17-如何获得给定毫秒数的可读格式？" class="headerlink" title="17.如何获得给定毫秒数的可读格式？"></a>17.如何获得给定毫秒数的可读格式？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatDuration = <span class="function"><span class="params">ms</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ms &lt; <span class="number">0</span>) ms = -ms;</span><br><span class="line">  <span class="keyword">const</span> time = &#123;</span><br><span class="line">    day: <span class="built_in">Math</span>.floor(ms / <span class="number">86400000</span>),</span><br><span class="line">    hour: <span class="built_in">Math</span>.floor(ms / <span class="number">3600000</span>) % <span class="number">24</span>,</span><br><span class="line">    minute: <span class="built_in">Math</span>.floor(ms / <span class="number">60000</span>) % <span class="number">60</span>,</span><br><span class="line">    second: <span class="built_in">Math</span>.floor(ms / <span class="number">1000</span>) % <span class="number">60</span>,</span><br><span class="line">    millisecond: <span class="built_in">Math</span>.floor(ms) % <span class="number">1000</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.entries(time)</span><br><span class="line">    .filter(<span class="function"><span class="params">val</span> =&gt;</span> val[<span class="number">1</span>] !== <span class="number">0</span>)</span><br><span class="line">    .map(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;val&#125;</span> <span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;val !== <span class="number">1</span> ? <span class="string">'s'</span> : <span class="string">''</span>&#125;</span>`</span>)</span><br><span class="line">    .join(<span class="string">', '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">formatDuration(<span class="number">1001</span>); <span class="comment">// '1 second, 1 millisecond'</span></span><br><span class="line">formatDuration(<span class="number">34325055574</span>); </span><br><span class="line"><span class="comment">// '397 days, 6 hours, 44 minutes, 15 seconds, 574 milliseconds'</span></span><br></pre></td></tr></table></figure></div><h2 id="18-如何获得两个日期之间的差异（以天为单位）？"><a href="#18-如何获得两个日期之间的差异（以天为单位）？" class="headerlink" title="18.如何获得两个日期之间的差异（以天为单位）？"></a>18.如何获得两个日期之间的差异（以天为单位）？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class="line">  (dateFinal - dateInitial) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">getDaysDiffBetweenDates(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-12-13'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-12-22'</span>)); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></div><h2 id="19-如何向传递的URL发出GET请求？"><a href="#19-如何向传递的URL发出GET请求？" class="headerlink" title="19.如何向传递的URL发出GET请求？"></a>19.如何向传递的URL发出GET请求？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> httpGet = <span class="function">(<span class="params">url, callback, err = <span class="built_in">console</span>.error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  request.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  request.onload = <span class="function"><span class="params">()</span> =&gt;</span> callback(request.responseText);</span><br><span class="line">  request.onerror = <span class="function"><span class="params">()</span> =&gt;</span> err(request);</span><br><span class="line">  request.send();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">httpGet(</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"userId": 1, "id": 1, "title": "sample title", "body": "my text"&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="20-如何对传递的URL发出POST请求？"><a href="#20-如何对传递的URL发出POST请求？" class="headerlink" title="20.如何对传递的URL发出POST请求？"></a>20.如何对传递的URL发出POST请求？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> httpPost = <span class="function">(<span class="params">url, data, callback, err = <span class="built_in">console</span>.error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  request.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  request.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/json; charset=utf-8'</span>);</span><br><span class="line">  request.onload = <span class="function"><span class="params">()</span> =&gt;</span> callback(request.responseText);</span><br><span class="line">  request.onerror = <span class="function"><span class="params">()</span> =&gt;</span> err(request);</span><br><span class="line">  request.send(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newPost = &#123;</span><br><span class="line">  userId: <span class="number">1</span>,</span><br><span class="line">  id: <span class="number">1337</span>,</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'bar bar bar'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(newPost);</span><br><span class="line">httpPost(</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/posts'</span>,</span><br><span class="line">  data,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"userId": 1, "id": 1337, "title": "Foo", "body": "bar bar bar"&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="21-如何为指定选择器创建具有指定范围，步长和持续时间的计数器？"><a href="#21-如何为指定选择器创建具有指定范围，步长和持续时间的计数器？" class="headerlink" title="21.如何为指定选择器创建具有指定范围，步长和持续时间的计数器？"></a>21.如何为指定选择器创建具有指定范围，步长和持续时间的计数器？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">selector, start, end, step = <span class="number">1</span>, duration = <span class="number">2000</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = start,</span><br><span class="line">    _step = (end - start) * step &lt; <span class="number">0</span> ? -step : step,</span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      current += _step;</span><br><span class="line">      <span class="built_in">document</span>.querySelector(selector).innerHTML = current;</span><br><span class="line">      <span class="keyword">if</span> (current &gt;= end) <span class="built_in">document</span>.querySelector(selector).innerHTML = end;</span><br><span class="line">      <span class="keyword">if</span> (current &gt;= end) clearInterval(timer);</span><br><span class="line">    &#125;, <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.floor(duration / (end - start))));</span><br><span class="line">  <span class="keyword">return</span> timer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">counter(<span class="string">'#my-id'</span>, <span class="number">1</span>, <span class="number">1000</span>, <span class="number">5</span>, <span class="number">2000</span>); </span><br><span class="line"><span class="comment">// 让 `id=“my-id”`的元素创建一个2秒计时器</span></span><br></pre></td></tr></table></figure></div><h2 id="22-如何将字符串复制到剪贴板？"><a href="#22-如何将字符串复制到剪贴板？" class="headerlink" title="22.如何将字符串复制到剪贴板？"></a>22.如何将字符串复制到剪贴板？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</span><br><span class="line">  el.value = str;</span><br><span class="line">  el.setAttribute(<span class="string">'readonly'</span>, <span class="string">''</span>);</span><br><span class="line">  el.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">  el.style.left = <span class="string">'-9999px'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">  <span class="keyword">const</span> selected =</span><br><span class="line">    <span class="built_in">document</span>.getSelection().rangeCount &gt; <span class="number">0</span> ? <span class="built_in">document</span>.getSelection().getRangeAt(<span class="number">0</span>) : <span class="literal">false</span>;</span><br><span class="line">  el.select();</span><br><span class="line">  <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(el);</span><br><span class="line">  <span class="keyword">if</span> (selected) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getSelection().removeAllRanges();</span><br><span class="line">    <span class="built_in">document</span>.getSelection().addRange(selected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">copyToClipboard(<span class="string">'Lorem ipsum'</span>); </span><br><span class="line"><span class="comment">// 'Lorem ipsum' copied to clipboard</span></span><br></pre></td></tr></table></figure></div><h2 id="23-如何确定页面的浏览器选项卡是否聚焦？"><a href="#23-如何确定页面的浏览器选项卡是否聚焦？" class="headerlink" title="23.如何确定页面的浏览器选项卡是否聚焦？"></a>23.如何确定页面的浏览器选项卡是否聚焦？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isBrowserTabFocused = <span class="function"><span class="params">()</span> =&gt;</span> !<span class="built_in">document</span>.hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">isBrowserTabFocused(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="24-如何创建目录（如果不存在）？"><a href="#24-如何创建目录（如果不存在）？" class="headerlink" title="24.如何创建目录（如果不存在）？"></a>24.如何创建目录（如果不存在）？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> createDirIfNotExists = <span class="function"><span class="params">dir</span> =&gt;</span> (!fs.existsSync(dir) ? fs.mkdirSync(dir) : <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">createDirIfNotExists(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure></div><p>这里面的方法大都挺实用，可以解决很多开发过程问题，大家就好好利用起来吧。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文主要介绍 24 中 es6 方法，这些方法都挺实用的，本本请记好，时不时翻出来看看。&lt;/p&gt;&lt;h2 id=&quot;1-如何隐藏所有指定的元素&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://www.yptup.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://www.yptup.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>与Promise血脉相连的async/await</title>
    <link href="http://www.yptup.top/posts/cda9cb27.html"/>
    <id>http://www.yptup.top/posts/cda9cb27.html</id>
    <published>2019-06-20T15:40:05.000Z</published>
    <updated>2020-03-07T15:51:34.981Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --><p>async/await是JavaScript为了解决异步问题而提出的一种解决方案，许多人将其称为异步的终极解决方案。JavaScript的发展也经历了回调、Promise、async/await三个阶段，本篇文章记录了我自己对于async/await的理解。因为async/await的使用离不开Promise，如果对于Promise不熟悉的话，可以看下这篇介绍：<a href="/posts/54b11a0c.html">Promise详解</a></p><a id="more"></a><h2 id="一、async-await的具体使用规则"><a href="#一、async-await的具体使用规则" class="headerlink" title="一、async/await的具体使用规则"></a>一、async/await的具体使用规则</h2><p>在我们处理异步的时候，比起回调函数，<code>Promise</code>的then方法会显得较为简洁和清晰，但是在处理<strong>多个彼此之间相互依赖的请求的时候</strong>，就会显的有些累赘。这时候，用<code>async</code>和<code>await</code>更加优雅，后面会详情说明。</p><ol><li>async/await使用规则一：凡是在前面添加了<code>async</code>的函数在执行后都会自动返回一个<code>Promise</code>对象</li></ol><p>例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = test()</span><br><span class="line"><span class="built_in">console</span>.log(result)  <span class="comment">//即便代码里test函数什么都没返回，我们依然打出了Promise对象</span></span><br></pre></td></tr></table></figure></div><ol start="2"><li>async/await使用规则二：await必须在async函数里使用，不能单独使用</li></ol><p>错误的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()   <span class="comment">//执行以后会报错</span></span><br></pre></td></tr></table></figure></div><p>正确的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> test() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div><ol start="3"><li>async/await使用规则三：await后面需要跟Promise对象，不然就没有意义，而且await后面的Promise对象不必写then，因为await的作用之一就是获取后面Promise对象成功状态传递出来的参数。</li></ol><p>正确的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'success'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> test() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> fn() <span class="comment">//因为fn会返回一个Promise对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)    <span class="comment">//这里会打出Promise成功后传递过来的'success'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div><p>没有意义的例子（不会报错）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> test() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="number">123</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div><h2 id="二、async-await的错误处理方式"><a href="#二、async-await的错误处理方式" class="headerlink" title="二、async/await的错误处理方式"></a>二、async/await的错误处理方式</h2><p><strong>关于错误处理，如规则三所说，await可以直接获取到后面Promise成功状态传递的参数，但是却捕捉不到失败状态。在这里，我们通过给包裹await的async函数添加then/catch方法来解决，因为根据规则一，async函数本身就会返回一个Promise对象。</strong></p><p>一个包含错误处理的完整的async/await例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promiseDemo = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">        <span class="keyword">if</span> (random &gt;= <span class="number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="string">'success'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">'failed'</span>)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promiseDemo</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment">//这里的result是promiseDemo成功状态的值，如果失败了，代码就直接跳到下面的catch了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response) </span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面的代码需要注意两个地方，一是async函数需要主动return一下，如果Promise的状态是成功的，那么return的这个值就会被下面的then方法捕捉到；二是，如果async函数有任何错误，都被catch捕捉到！</p><h2 id="三、同步与异步"><a href="#三、同步与异步" class="headerlink" title="三、同步与异步"></a>三、同步与异步</h2><p>在<code>async</code>函数中使用<code>await</code>，那么<code>await</code>这里的代码就会变成同步的了，意思就是说只有等<code>await</code>后面的<code>Promise</code>执行完成得到结果才会继续下去，<code>await</code>就是等待，这样虽然避免了异步，但是它也会阻塞代码，所以使用的时候要考虑周全。</p><p>比如下面的代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">`<span class="subst">$&#123;name&#125;</span>成功`</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">await</span> fn(<span class="string">'小红'</span>)</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">await</span> fn(<span class="string">'小明'</span>)</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="keyword">await</span> fn(<span class="string">'小华'</span>)</span><br><span class="line">    <span class="keyword">return</span> [p1, p2, p3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>这样写虽然是可以的，但是这里await会阻塞代码，每个await都必须等后面的fn()执行完成才会执行下一行代码，所以test函数执行需要3秒。如果不是遇到特定的场景，最好还是不要这样用。</p><h2 id="四、一个小测试"><a href="#四、一个小测试" class="headerlink" title="四、一个小测试"></a>四、一个小测试</h2><p>写到这里，突然想起Promise的代码执行顺序也是挺需要注意的。</p><p>请看下面的代码，执行完以后打出的数字的顺序是怎样的呢？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> promiseDemo = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">        <span class="keyword">if</span> (random &gt;= <span class="number">0.2</span>) &#123;</span><br><span class="line">            resolve(<span class="string">'success'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">'failed'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promiseDemo</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div><p>答案是：1 2 4 6 3 5</p><h2 id="五、一个适合使用async-await的业务场景"><a href="#五、一个适合使用async-await的业务场景" class="headerlink" title="五、一个适合使用async/await的业务场景"></a>五、一个适合使用async/await的业务场景</h2><p>在前端编程中，我们偶尔会遇到这样一个场景：我们需要发送多个请求，而<strong>后面请求的发送总是需要依赖上一个请求返回的数据</strong>。对于这个问题，我们既可以用的Promise的链式调用来解决，也可以用async/await来解决，然而后者会更简洁些。</p><p>使用Promise链式调用来处理：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request(<span class="number">500</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(result + <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(result + <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>使用async/await的来处理：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">await</span> request(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">await</span> request(p1 + <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="keyword">await</span> request(p2 + <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> p3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getResult().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>相对于使用then不停地进行链式调用， 使用async/await会显的更加易读一些。</p><h2 id="六、在循环中使用await"><a href="#六、在循环中使用await" class="headerlink" title="六、在循环中使用await"></a>六、在循环中使用await</h2><p>如果在是循环中使用<code>await</code>，就需要牢记一条：<strong>必须在async函数中使用。</strong></p><p>在<code>for...of</code>中使用<code>await</code>:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> times = [<span class="number">1000</span>, <span class="number">500</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> times) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="keyword">await</span> request(item)</span><br><span class="line">        result.push(temp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面就是我今天关于async/await理解的记录，以上内容估计还有错误之处，如果有朋友看到，还望不吝指出！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Apr 20 2020 20:38:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;async/await是JavaScript为了解决异步问题而提出的一种解决方案，许多人将其称为异步的终极解决方案。JavaScript的发展也经历了回调、Promise、async/await三个阶段，本篇文章记录了我自己对于async/await的理解。因为async/await的使用离不开Promise，如果对于Promise不熟悉的话，可以看下这篇介绍：&lt;a href=&quot;/posts/54b11a0c.html&quot;&gt;Promise详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>
