<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JavaScript</title>
  
  <subtitle>每一个不曾起舞的日子，都是对生命的辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yptup.top/"/>
  <updated>2020-03-20T09:26:02.324Z</updated>
  <id>http://www.yptup.top/</id>
  
  <author>
    <name>丶远方</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TS和JS共同的数据类型</title>
    <link href="http://www.yptup.top/posts/54f489af.html"/>
    <id>http://www.yptup.top/posts/54f489af.html</id>
    <published>2020-03-20T08:54:34.000Z</published>
    <updated>2020-03-20T09:26:02.324Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>JavaScript 中现有的八个数据类型，当然这并不是 JavaScript 中的所有数据类型，而是现在版本的 TypeScript 支持的基本类型，在学习基础类型之前，我们先来看下如何为一个变量指定类型：</p><a id="more"></a><p>为一个变量指定类型的语法是使用”变量: 类型”的形式，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">123</span></span><br></pre></td></tr></table></figure></div><p>如果你没有为这个变量指定类型，编译器会自动根据你赋给这个变量的值来推断这个变量的类型：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123</span></span><br><span class="line">num = <span class="string">'abc'</span> <span class="comment">// error 不能将类型“"123"”分配给类型“number”</span></span><br></pre></td></tr></table></figure></div><p>当我们给num赋值为123但没有指定类型时，编译器推断出了num的类型为number数值类型，所以当给num再赋 值为字符串”abc”时，就会报错。</p><p>这里还有一点要注意，就是number和Number的区别：TS中指定类型的时候要用number，这个是TypeScript的类 型关键字。而Number为JavaScript的原生构造函数，用它来创建数值类型的值，它俩是不一样的。包括你后面见 到的string、boolean等都是TypeScript的类型关键字，不是JavaScript语法，这点要区分开。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>类型为布尔类型的变量的值只能是 true 或 false，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = <span class="literal">false</span>; </span><br><span class="line">bool = <span class="literal">true</span>; </span><br><span class="line">bool = <span class="number">123</span>; <span class="comment">// error 不能将类型"123"分配给类型"boolean"</span></span><br></pre></td></tr></table></figure></div><p>当然了，赋给 bool 的值也可以是一个计算之后结果是布尔值的表达式，比如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bool: <span class="built_in">boolean</span> = !!<span class="number">0</span> </span><br><span class="line"><span class="built_in">console</span>.log(bool) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>TypeScript 和 JavaScript 一样，所有数字都是浮点数，所以只有一个 number类型，而没有int或者float类型。而 且 TypeScript 还支持 ES6 中新增的二进制和八进制数字字面量，所以 TypeScript 中共支持二、八、十和十六四种进制的数值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span>; </span><br><span class="line">num = <span class="number">123</span>; </span><br><span class="line">num = <span class="string">"123"</span>; <span class="comment">// error 不能将类型"123"分配给类型"number" </span></span><br><span class="line">num = <span class="number">0b1111011</span>; <span class="comment">//  二进制的123 </span></span><br><span class="line">num = <span class="number">0o173</span>; <span class="comment">// 八进制的123 </span></span><br><span class="line">num = <span class="number">0x7b</span>; <span class="comment">// 十六进制的123</span></span><br></pre></td></tr></table></figure></div><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串类型中你可以使用单引号和双引号包裹内容，但是可能你使用的 tslint 规则会对引号进行检测，使用单引号 还是双引号可以在 tslint 规则里配置。你还可以使用 ES6 语法——模板字符串，拼接变量和字符串更为方便。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="built_in">string</span> = <span class="string">"Lison"</span>; </span><br><span class="line">str = <span class="string">"Li"</span>; </span><br><span class="line"><span class="keyword">const</span> first = <span class="string">"Lison"</span>; </span><br><span class="line"><span class="keyword">const</span> last = <span class="string">"Li"</span>; </span><br><span class="line">str = <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// 打印结果为:Lison Li</span></span><br></pre></td></tr></table></figure></div><p>另外还有个和字符串相关的类型： 字符串字面量类型 字符串字面量类型 。即把一个字符串字面量作为一种类型，比如上面的字符 串”Lison”，当你把一个变量指定为这个字符串类型的时候，就不能再赋值为其他字符串值了，如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str: <span class="string">'Lison'</span> </span><br><span class="line">str = <span class="string">'haha'</span> <span class="comment">// error 不能将类型“"haha"”分配给类型“"Lison"”</span></span><br></pre></td></tr></table></figure></div><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在 TypeScript 中有两种定义数组的方式：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></div><p>第一种形式通过<code>number[]</code>的形式来指定这个类型元素均为<code>number</code>类型的数组类型，这种写法是推荐的写法，当然 你也可以使用第二种写法。注意，这两种写法中的<code>number</code>指定的是数组元素的类型，你也可以在这里将数组的元 素指定为任意类型。如果你要指定一个数组里的元素既可以是数值也可以是字符串，那么你可以使用这种方式：<code>nu mber|string[]</code>，这种方式我们在后面学习联合类型的时候会讲到。</p><p>当你使用第二种形式定义时，<code>tslint</code> 可能会警告让你使用第一种形式定义，如果你就是想用第二种形式，可以通过在 <code>tslint.json</code> 的 <code>rules</code> 中加入”array-type”: [false]关闭 <code>tslint</code> 对这条的检测。</p><p>后面我们讲接口的时候，还会讲到数组的一个特殊类型：<code>ReadonlyArray</code>，即只读数组。</p><h2 id="null-和-和-undefined"><a href="#null-和-和-undefined" class="headerlink" title="null 和 和 undefined"></a>null 和 和 undefined</h2><p><code>null</code> 和 <code>undefined</code> 有一些共同特点，所以我们放在一起讲。说它们有共同特点，是因为在 JavaScript 中，<code>undefined</code> 和 <code>null</code> 是两个基本数据类型。在 TypeScript 中，这两者都有各自的类型即 <code>undefined</code> 和 <code>null</code>，也就是说它们既是实<br>际的值，也是类型，来看实际例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;<span class="comment">// 这里可能会报一个tslint的错误：Unnecessary initialization to 'undefined'，就是不能给一个值赋undefined，但我们知道这 是可以的，所以如果你的代码规范想让这种代码合理化，可以配置tslint，将"no-unnecessary-initializer"设为false即可 </span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></div><p>默认情况下 undefined 和 null 可以赋值给任意类型的值，也就是说你可以把 undefined 赋值给 void 类型，也可以赋 值给 number 类型。当你在 tsconfig.json 的”compilerOptions”里设置了<code>&quot;strictNullChecks&quot;: true</code>时，那必须严格对 待。undefined 和 null 将只能赋值给它们自身和 void 类型，void类型我们后面会学习。</p><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>object 在 JS 中是引用类型，它和 JS 中的其他基本类型不一样，像 number、string、boolean、undefined、null 这 些都是基本类型，这些类型的变量存的是他们的值，而 object 类型的变量存的是引用，看个简单的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strInit = <span class="string">"abc"</span>; </span><br><span class="line"><span class="keyword">let</span> strClone = strInit; </span><br><span class="line">strClone = <span class="string">"efg"</span>; </span><br><span class="line"><span class="built_in">console</span>.log(strInit); <span class="comment">// 'abc'</span></span><br><span class="line"><span class="keyword">let</span> objInit = &#123; a: <span class="string">"aa"</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> objClone = objInit; </span><br><span class="line"><span class="built_in">console</span>.log(objClone) <span class="comment">// &#123;a:"aa"&#125; </span></span><br><span class="line">objInit.a = <span class="string">"bb"</span>; </span><br><span class="line"><span class="built_in">console</span>.log(objClone); <span class="comment">// &#123; a: 'bb' &#125;</span></span><br></pre></td></tr></table></figure></div><p>通过例子可以看出，我们修改 objInit 时，objClone 也被修改了，是因为 objClone 保存的是 objInit 的引用，实际上 objInit 和 objClone 是同一个对象。</p><p>当我们希望一个变量或者函数的参数的类型是一个对象的时候，使用这个类型，比如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object </span><br><span class="line">obj = &#123; name: <span class="string">'Lison'</span> &#125; </span><br><span class="line">obj = <span class="number">123</span> <span class="comment">// error 不能将类型“123”分配给类型“object”</span></span><br></pre></td></tr></table></figure></div><p>这里有一点要注意了，你可能会想到给 obj 指定类型为 object 对象类型，然后给它赋值一个对象，后面通过属性访<br>问操作符访问这个对象的某个属性，实际操作一下你就会发现会报错：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: object </span><br><span class="line">obj = &#123; name: <span class="string">'Lison'</span> &#125; </span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// error 类型“object”上不存在属性“name”</span></span><br></pre></td></tr></table></figure></div><p>这里报错说类型 object 上没有 name 这个属性。如果你想要达到这种需求你应该使用我们后面章节要讲到的接口， 那 object 类型适合什么时候使用呢？我们前面说了，当你希望一个值必须是对象而不是数值等类型时，比如我们定 义一个函数，参数必须是对象，这个时候就用到object类型了：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKeys</span> (<span class="params">obj: object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj) <span class="comment">// 会以列表的形式返回obj中的值 </span></span><br><span class="line">&#125; </span><br><span class="line">getKeys(&#123; a: <span class="string">'a'</span> &#125;) <span class="comment">// ['a'] </span></span><br><span class="line">getKeys(<span class="number">123</span>) <span class="comment">// error 类型“123”的参数不能赋给类型“object”的参数</span></span><br></pre></td></tr></table></figure></div><p>这里涉及到的函数的相关知识，后续会有详细介绍，你只要在这里明白object类型的使用就可以了。</p><h2 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h2><p>Symbol 是 ES6 加入的新的基础数据类型，因为它的知识比较多，所以我们单独在后面的一节进行讲解。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;JavaScript 中现有的八个数据类型，当然这并不是 JavaScript 中的所有数据类型，而是现在版本的 TypeScript 支持的基本类型，在学习基础类型之前，我们先来看下如何为一个变量指定类型：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue组件设计</title>
    <link href="http://www.yptup.top/posts/f8035fa5.html"/>
    <id>http://www.yptup.top/posts/f8035fa5.html</id>
    <published>2020-03-19T14:28:56.000Z</published>
    <updated>2020-03-22T09:15:34.819Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>由于近日找工作的原因，面试的时候，被面试官问到Vue组件的设计问题，咳咳，然后一时语塞，竟然不知道怎么回答，可能由于态度过于紧张导致，后来自己梳理了一下，Vue组件的设计原则，以本文为记录</p><a id="more"></a><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/posts/f8035fa5/component1.png" alt></p><hr><p><img src="/posts/f8035fa5/component2.png" alt></p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><blockquote><p>注：虽然现在已经出现大量优秀的UI框架，如elementUI，iviewUI，单从业务、功能及性能仍不能满足项目所有需求，这时，就要考虑如何设计适合自己的组件。</p></blockquote><p>组件设计其实就是模块的设计。我把它分为4个部分：<strong>UI设计，基本功能，业务拓展需求，性能</strong>。以下我已我自己设计的高性能table为例，剖析我是如何优雅的设计一个组件。</p><p><img src="/posts/f8035fa5/setComponent.png" alt></p><ul><li>UI设计交互就好比模块的<code>import</code>、<code>exports</code>，要保持统一的出口。即统一风格配色，统一交互。</li><li>基本功能就好比模块的基本作用。必须保证基本功能的同时，兼容其他。</li><li>业务拓展就好比模块间的集成，这就要求组件可依耐性低、可拔插集成、高聚低耦合。</li><li>性能要考虑到大量数据或大量计算与<code>GUI</code>渲染线程互斥导致的性能问题。</li></ul><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><blockquote><p>注：一个组件的设计先从基本功能开始。</p></blockquote><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>先看table的基本功能包括：头部、序号列、多选列、左右固定列、总计行；</p><p>业务拓展功能：列搜索。</p><blockquote><p>考虑到左右固定列需要单独的头部、搜索行、内容、总计行。可将km-grid设计为3个单独的table，每个单独的table都是一个独立的km-grid-item。</p></blockquote><p><img src="/posts/f8035fa5/main.png" alt></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"cls"</span> <span class="attr">:style</span>=<span class="string">"tableStyles"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">km-grid-item</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-if</span>=<span class="string">"fixedLeftCol&amp;&amp;fixedLeftCol.length"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">fixed</span>=<span class="string">"left"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-on</span>=<span class="string">"$listeners"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:columns</span>=<span class="string">"fixedLeftCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:header-styles</span>=<span class="string">"leftFixedHeaderStyles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:body-styles</span>=<span class="string">"leftFixedBodyStyles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">km-grid-item</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">km-grid-item</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-on</span>=<span class="string">"$listeners"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:columns</span>=<span class="string">"centerCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:expandColumn</span>=<span class="string">"expandCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:header-styles</span>=<span class="string">"headerStyles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:body-styles</span>=<span class="string">"bodyStyles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">km-grid-item</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">km-grid-item</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-if</span>=<span class="string">"fixedRightCol&amp;&amp;fixedRightCol.length"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">fixed</span>=<span class="string">"right"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">v-on</span>=<span class="string">"$listeners"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:columns</span>=<span class="string">"fixedRightCol"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:header-styles</span>=<span class="string">"rightFixedHeaderStyles"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:body-styles</span>=<span class="string">"rightFixedBodyStyles"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">km-grid-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>这样，整个table的设计便会轻便且简洁。</p></blockquote><p>单个table的设计又怎么办呢？<br>那我是如何在单个组件驱动其他组件的呢？</p><p><img src="/posts/f8035fa5/setComponent2.png" alt></p><p>首先在km-grid-item mounted是，发送当前的VueComponent：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.dispatch(<span class="string">"KmGrid"</span>, <span class="string">"on-km-grid-item-add"</span>, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在km-grid接收：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;  </span><br><span class="line"><span class="keyword">this</span>.$on(<span class="string">'on-km-grid-item-add'</span>, item =&gt; &#123;    </span><br><span class="line"><span class="keyword">this</span>.itemVms.push(item)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>接着在事件中触发同步驱动整个table：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HandleBodyScroll (event) &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs.header.scrollLeft = event.target.scrollLeft  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.$parent.itemVms &amp;&amp; <span class="keyword">this</span>.$parent.itemVms.length &gt; <span class="number">0</span>) &#123; </span><br><span class="line">   <span class="keyword">this</span>.$parent.itemVms.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> scrollDom = v.$el.querySelectorAll(<span class="string">'.km-grid-noscroll'</span>)[<span class="number">0</span>]      </span><br><span class="line"> <span class="keyword">if</span> (scrollDom) &#123; </span><br><span class="line">    scrollDom.scrollTop = event.target.scrollTop     </span><br><span class="line">  &#125;    </span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="业务拓展需求"><a href="#业务拓展需求" class="headerlink" title="业务拓展需求"></a>业务拓展需求</h3><p>业务拓展需求有：根据行数据显示不同按钮，不同行为，数据格式化，行下拉动态渲染。</p><h4 id="根据行数据显示不同按钮"><a href="#根据行数据显示不同按钮" class="headerlink" title="根据行数据显示不同按钮"></a>根据行数据显示不同按钮</h4><p><img src="/posts/f8035fa5/setComponent3.png" alt></p><p>把需求转化为数据操作就是先获取行数据，根据行数据展示不同的按钮，然后自定义行为在业务中编写：</p><p>先定义column及操作:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">title: <span class="string">'操作'</span>,  </span><br><span class="line">type: <span class="string">'handle'</span>,  </span><br><span class="line">handle: [</span><br><span class="line">   &#123;      </span><br><span class="line">      type: <span class="string">'edit'</span>    </span><br><span class="line">&#125;,    </span><br><span class="line">&#123;      </span><br><span class="line">  type: <span class="string">'warehouse'</span>,      </span><br><span class="line">  icon: <span class="string">'km-stock'</span>,      </span><br><span class="line">  click: <span class="function"><span class="params">row</span> =&gt;</span> &#123;        </span><br><span class="line">      <span class="keyword">this</span>.$refs.listpage.showList = <span class="literal">false</span>        </span><br><span class="line">  <span class="keyword">this</span>.$refs.WarehouseInfo.loadEntity(row.id)      </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;  </span><br><span class="line">],  </span><br><span class="line">width: <span class="number">90</span>,  </span><br><span class="line">align: <span class="string">'left'</span>,  </span><br><span class="line">fixed: <span class="string">'right'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>根据行数据渲染：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">showCustomOperate: &#123;  </span><br><span class="line">   warehouse: <span class="function"><span class="params">row</span> =&gt;</span> &#123;    </span><br><span class="line">      <span class="keyword">switch</span> (row.type) &#123;      </span><br><span class="line">     <span class="keyword">case</span> <span class="string">'4'</span>:        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>      </span><br><span class="line">     <span class="keyword">default</span>:        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>    </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RebuildTableDataByColOperate (columns, data) &#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;    </span><br><span class="line">    handles.forEach(<span class="function"><span class="params">handle</span> =&gt;</span> &#123;</span><br><span class="line">  v[<span class="string">'__'</span> + handle.type] =       </span><br><span class="line">    <span class="keyword">this</span>.showCustomOperate[handle.type](v) || <span class="literal">false</span></span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HandleIconClick (item, row) &#123;</span><br><span class="line">  <span class="keyword">return</span> item.click(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>通过这种集成方式组件不必关心业务需求，自动化配置自定义按钮及操作行为，可拔插的集成，避免影响平台组件维护。</p></blockquote><h4 id="行下拉动态渲染"><a href="#行下拉动态渲染" class="headerlink" title="行下拉动态渲染"></a>行下拉动态渲染</h4><p><img src="/posts/f8035fa5/setComponent4.png" alt></p><p>首先在columns里配置：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   type: <span class="string">'expand'</span>,  </span><br><span class="line">   width: <span class="number">50</span>,  </span><br><span class="line">   render: <span class="function">(<span class="params">h, params</span>) =&gt;</span> &#123;    </span><br><span class="line">      <span class="keyword">return</span> h(inventoryControl, &#123;      </span><br><span class="line">     props: &#123;        </span><br><span class="line">   row: params.row      </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">  inventoryControl: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/view/main-components/inventoryControl.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后在km-grid-item的tr里面根据行数据动态render：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"!fixed&amp;&amp;expandColumn.render"</span> <span class="attr">:class</span>=<span class="string">"cls+'-tr-expand'"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">v-if</span>=<span class="string">"row._clicked"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">td-render</span> <span class="attr">:row</span>=<span class="string">"row"</span> <span class="attr">:render</span>=<span class="string">"expandColumn.render"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td-render</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>通过这种集成方式组件不必关心业务需求，返回行数据让业务自己交互，不会污染当前组件DOM及多余的代码逻辑。</p></blockquote><h4 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h4><p><img src="/posts/f8035fa5/setComponent5.png" alt></p><p>数据格式化是一个老生常谈的问题，例如下面我们只用通过这个方法即可格式化系统数据：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">GetTdData(row, col) &#123;</span><br><span class="line"><span class="keyword">if</span> (col.enumData) &#123;</span><br><span class="line"><span class="keyword">let</span> desc = (col.desc &amp;&amp; row[col.desc(row)]) ? <span class="string">'('</span> + row[col.desc(row)] + <span class="string">')'</span> : <span class="string">''</span></span><br><span class="line"><span class="keyword">return</span> col.desc ? col.enumData[row[col.key]] + desc : col.enumData[row[col.key]]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.valueKey) &#123;</span><br><span class="line"><span class="keyword">return</span> row[col.key] ? <span class="string">`[<span class="subst">$&#123;row[col.key]&#125;</span>]<span class="subst">$&#123;row[col.valueKey]&#125;</span>`</span> : <span class="string">''</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="string">'date'</span>, <span class="string">'datetime'</span>, <span class="string">'time'</span>].includes(col.type)) &#123;</span><br><span class="line"><span class="keyword">const</span> dateEnum = &#123;</span><br><span class="line">date: <span class="string">'yyyy-MM-dd'</span>,</span><br><span class="line">datetime: <span class="string">'yyyy-MM-dd HH:mm:ss'</span>,</span><br><span class="line">time: <span class="string">'HH:mm:ss'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!row[col.key]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> formatDate(row[col.key], col.format || dateEnum[col.type])</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.bizType &amp;&amp; [<span class="string">'price'</span>, <span class="string">'amt'</span>, <span class="string">'qty'</span>, <span class="string">'rate'</span>].includes(col.bizType)) &#123;</span><br><span class="line"><span class="keyword">const</span> formatEnum = &#123;</span><br><span class="line">price: <span class="number">4</span>,</span><br><span class="line">amt: <span class="number">2</span>,</span><br><span class="line">qty: <span class="number">3</span>,</span><br><span class="line">rate: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (typeOf(row[col.key]) === <span class="string">'null'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'-'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseFloat</span>(row[col.key]).toFixed(col.format || formatEnum[col.bizType])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> row[col.key]</span><br><span class="line">&#125;, GetTotalData(col) &#123;</span><br><span class="line"><span class="keyword">if</span> (!col.total) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.totalValue) &#123;</span><br><span class="line"><span class="keyword">return</span> col.totalValue</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (col.bizType &amp;&amp; [<span class="string">'price'</span>, <span class="string">'qty'</span>, <span class="string">'amt'</span>].includes(col.bizType)) &#123;</span><br><span class="line"><span class="keyword">const</span> formatEnum = &#123;</span><br><span class="line">price: <span class="number">4</span>,</span><br><span class="line">qty: <span class="number">3</span>,</span><br><span class="line">amt: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.$parent.data.map(<span class="function"><span class="params">row</span> =&gt;</span> <span class="built_in">Number</span>(row[col.key])).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>).toFixed(col.format ||</span><br><span class="line">formatEnum[col.bizType])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这种默认配置是前端与后端约定好，前端在columns规定好，即可有序展开。</p><blockquote><p>总结一下就是，拓展需求就是要可尽量少的配置、自动化、可拔插、不污染组件、减少增加组件逻辑、无代码侵入的支持业务功能。</p></blockquote><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>经测试，<code>km-grid</code>拥有高效的性能并兼容主流浏览器（ie11以上，包含ie11）。对比了同样的<code>iview-table</code>，<code>element-table</code>，在500条级数据时，<code>km-grid</code>表现更佳，大大超越<code>iview-table</code>。各位同学可直接在<code>npm install</code>。</p><h2 id="组件API设计"><a href="#组件API设计" class="headerlink" title="组件API设计"></a>组件API设计</h2><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><table><thead><tr><th>属性名</th><th>属性类型</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>Array</td><td>元数据</td></tr><tr><td>headerRowHeight</td><td>Number</td><td>头部高度</td></tr><tr><td>rowHeight</td><td>Number</td><td>行高度</td></tr><tr><td>totalRowHeight</td><td>Number</td><td>总计高度</td></tr><tr><td>height</td><td>Number</td><td>指定高度</td></tr><tr><td>width</td><td>Number</td><td>指定宽度</td></tr><tr><td>border</td><td>Boolean</td><td>显示分割线</td></tr><tr><td>pageSize</td><td>Number</td><td>分页数据</td></tr><tr><td>current</td><td>Number</td><td>分页数据</td></tr><tr><td>draggable</td><td>Boolean</td><td>是否可拖拽列宽</td></tr><tr><td>clickAsync</td><td>Number</td><td>点击事件是否异步加载</td></tr></tbody></table><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>on-selection-change</td><td>全选，单选时触发</td></tr><tr><td>on-row-click</td><td>点击</td></tr><tr><td>on-row-dblclick</td><td>双击</td></tr><tr><td>on-sort-change</td><td>排序</td></tr></tbody></table><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>GetSelectRows</td><td>获取勾选选行</td></tr><tr><td>ClearSelectRows</td><td>清除沟选行</td></tr><tr><td>GetCurrentRow</td><td>获取选中行</td></tr></tbody></table><p><code>km-grid</code>在设计上精简，使用<code>v-on=&quot;$listeners&quot;</code>向上抛出事件，所以写<code>km-grid-item的emit</code>事件不用重复的再往上面抛，而对于需要对外开放的API，<code>km-grid</code>则故意将需要开放的API写在<code>km-grid</code>里面。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public API so i Expose in km-grid</span></span><br><span class="line">GetSelectRows() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.itemVms[<span class="number">0</span>].GetSelectRows()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// public API so i Expose in km-grid</span></span><br><span class="line">ClearSelectRows() &#123;</span><br><span class="line"><span class="keyword">this</span>.data.forEach(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(row, '_checked', false)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">// public API so i Expose in km-grid</span><br><span class="line">GetCurrentRow() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.data.find(<span class="function"><span class="params">row</span> =&gt;</span> row._clicked)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="可编辑的双向绑定table"><a href="#可编辑的双向绑定table" class="headerlink" title="可编辑的双向绑定table"></a>可编辑的双向绑定table</h3><p>现在的前端越来越后后端化，从npm仓库到模块化，自动化，前端早已不是几年前的那个画页面前端。更多的考虑是模块化组件的同时，处理好组件与平台，平台与业务这三方面的“交互”。如果你能很好的理解VUE的VueComponent响应式，将在VUE的海洋如鱼得水，同时也对面向对象编程有自己独到的见解。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;由于近日找工作的原因，面试的时候，被面试官问到Vue组件的设计问题，咳咳，然后一时语塞，竟然不知道怎么回答，可能由于态度过于紧张导致，后来自己梳理了一下，Vue组件的设计原则，以本文为记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>九种跨域方式实现原理</title>
    <link href="http://www.yptup.top/posts/cb3decc6.html"/>
    <id>http://www.yptup.top/posts/cb3decc6.html</id>
    <published>2020-03-12T15:40:01.000Z</published>
    <updated>2020-03-12T16:05:00.533Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。</p><a id="more"></a><h2 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h2><h3 id="什么是同源策略及其限制内容？"><a href="#什么是同源策略及其限制内容？" class="headerlink" title="什么是同源策略及其限制内容？"></a>什么是同源策略及其限制内容？</h3><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p><img src="/posts/cb3decc6/cross-domain.png" alt></p><p><strong>同源策略限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><p><strong>但是有三个标签是允许跨域加载资源：</strong></p><ul><li><code>&lt;img src=XXX&gt;</code></li><li><code>&lt;link href=XXX&gt;</code></li><li><code>&lt;script src=XXX&gt;</code></li></ul><h3 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h3><p><strong>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域</strong>。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p><img src="/posts/cb3decc6/cross-domain1.png" alt></p><p>特别说明两点：</p><p><strong>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</strong></p><p><strong>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。</strong></p><p>这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</strong>你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><h4 id="JSONP原理"><a href="#JSONP原理" class="headerlink" title="JSONP原理"></a>JSONP原理</h4><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</p><h4 id="JSONP和AJAX对比"><a href="#JSONP和AJAX对比" class="headerlink" title="JSONP和AJAX对比"></a>JSONP和AJAX对比</h4><p>JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><h4 id="JSONP优缺点"><a href="#JSONP优缺点" class="headerlink" title="JSONP优缺点"></a>JSONP优缺点</h4><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</p><h4 id="JSONP的实现流程"><a href="#JSONP的实现流程" class="headerlink" title="JSONP的实现流程"></a>JSONP的实现流程</h4><ul><li><p>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。</p></li><li><p>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</p></li><li><p>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是<code>show(&#39;我不爱你&#39;)</code>。</p></li><li><p>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</p></li></ul><p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP函数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// wd=b&amp;callback=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:3000/say'</span>,</span><br><span class="line">  params: &#123; <span class="attr">wd</span>: <span class="string">'Iloveyou'</span> &#125;,</span><br><span class="line">  callback: <span class="string">'show'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面这段代码相当于向<code>http://localhost:3000/say?wd=Iloveyou&amp;callback=show</code>这个地址请求数据，然后后台返回<code>show(&#39;我不爱你&#39;)</code>，最后会运行<code>show()</code>这个函数，打印出’我不爱你’</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.get(<span class="string">'/say'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; wd, callback &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(wd) <span class="comment">// Iloveyou</span></span><br><span class="line">  <span class="built_in">console</span>.log(callback) <span class="comment">// show</span></span><br><span class="line">  res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>('我不爱你')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></div><h4 id="jQuery的jsonp形式"><a href="#jQuery的jsonp形式" class="headerlink" title="jQuery的jsonp形式"></a>jQuery的jsonp形式</h4><p>JSONP都是GET和异步请求的，不存在其他的请求方式和同步请求，且jQuery默认就会给JSONP的请求清除缓存。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"http://crossdomain.com/jsonServerResponse"</span>,</span><br><span class="line">dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">type:<span class="string">"get"</span>,<span class="comment">//可以省略</span></span><br><span class="line">jsonpCallback:<span class="string">"show"</span>,<span class="comment">//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span></span><br><span class="line">jsonp:<span class="string">"callback"</span>,<span class="comment">//-&gt;把传递函数名的那个形参callback，可省略</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><strong>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。</strong></p><p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求</p><p>条件1：使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件2：Content-Type 的值仅限于下列三者之一：</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><h4 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h4><p>不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>我们用<code>PUT</code>向后台请求时，属于复杂请求，后台需做如下配置：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 预检的存活时间</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">  res.end() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义后台返回的内容</span></span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiamen'</span> <span class="comment">// cookie不能跨域</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'xiamen'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">      <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server1.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>] <span class="comment">//设置白名单</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'jw'</span>) <span class="comment">//返回一个响应头，后台需设置</span></span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure></div><p>上述代码由<code>http://localhost:3000/index.html</code>向<code>http://localhost:4000/</code>跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。</p><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><p><code>postMessage</code>是<code>HTML5 XMLHttpRequest Level 2</code>中的API，且是为数不多可以跨域操作的<code>window</code>属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p><code>postMessage()</code>方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p><blockquote><p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p></blockquote><ul><li>message: 将要发送到其他 window的数据。</li><li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li><li>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“我爱你”,然后后者传回”我不爱你”。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">&lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;&lt;<span class="regexp">/iframe&gt; /</span><span class="regexp">/等它加载完触发一个事件</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/内嵌在http:/</span><span class="regexp">/localhost:3000/</span>a.html</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span><br><span class="line">frame.contentWindow.postMessage(<span class="string">'我爱你'</span>, <span class="string">'http://localhost:4000'</span>) <span class="comment">//发送数据</span></span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//接受返回数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.data) <span class="comment">//我不爱你</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">  <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data) <span class="comment">//我爱你</span></span><br><span class="line">    e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>原生WebSocket API使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>我们先来看个例子：本地文件<code>socket.html</code>向localhost:3000发生数据和接受数据</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// socket.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      socket.send(<span class="string">'我爱你'</span>);<span class="comment">//向服务器发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);<span class="comment">//记得安装ws</span></span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">'我不爱你'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="Node中间件代理-两次跨域"><a href="#Node中间件代理-两次跨域" class="headerlink" title="Node中间件代理(两次跨域)"></a>Node中间件代理(两次跨域)</h3><p>实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。 代理服务器，需要做以下几个步骤：</p><ul><li>接受客户端请求 。</li><li>将请求 转发给服务器。</li><li>拿到服务器 响应 数据。</li><li>将 响应 转发给客户端。</li></ul><p><img src="/posts/cb3decc6/node.png" alt></p><p>我们先来看个例子：本地文件index.html文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html(http://127.0.0.1:5500)</span></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">url: 'http:/</span><span class="regexp">/localhost:3000',</span></span><br><span class="line"><span class="regexp">type: 'post',</span></span><br><span class="line"><span class="regexp">data: &#123; name: 'xiamen', password: '123456' &#125;,</span></span><br><span class="line"><span class="regexp">contentType: 'application/</span>json;charset=utf<span class="number">-8</span><span class="string">',</span></span><br><span class="line"><span class="string">success: function(result) &#123;</span></span><br><span class="line"><span class="string">  console.log(result) // &#123;"title":"fontend","password":"123456"&#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">error: function(msg) &#123;</span></span><br><span class="line"><span class="string">  console.log(msg)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server1.js 代理服务器(http://localhost:3000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 第一步：接受客户端请求</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'Content-Type'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 第二步：将请求转发给服务器</span></span><br><span class="line">  <span class="keyword">const</span> proxyRequest = http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="number">4000</span>,</span><br><span class="line">        url: <span class="string">'/'</span>,</span><br><span class="line">        method: request.method,</span><br><span class="line">        headers: request.headers</span><br><span class="line">      &#125;,</span><br><span class="line">      serverResponse =&gt; &#123;</span><br><span class="line">        <span class="comment">// 第三步：收到服务器的响应</span></span><br><span class="line">        <span class="keyword">var</span> body = <span class="string">''</span></span><br><span class="line">        serverResponse.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">          body += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        serverResponse.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'The data is '</span> + body)</span><br><span class="line">          <span class="comment">// 第四步：将响应结果转发给浏览器</span></span><br><span class="line">          response.end(body)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end()</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The proxyServer is running at http://localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js(http://localhost:4000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">title</span>: <span class="string">'fontend'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The server is running at http://localhost:4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出<code>{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p><h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>实现原理类似于<code>Node</code>中间件代理，需要你搭建一个中转<code>nginx</code>服务器，用于转发请求。</p><p>使用<code>nginx</code>反向代理实现跨域，是最简单的跨域方式。只需要修改<code>nginx</code>的配置即可解决跨域问题，支持所有浏览器，支持<code>session</code>，不需要修改任何代码，并且不会影响服务器性能。</p><p>实现思路：通过<code>nginx</code>配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改<code>cookie</code>中domain信息，方便当前域<code>cookie</code>写入，实现跨域登录。</p><p>先下载<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx</a>，然后将nginx目录下的nginx.conf修改如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最后通过命令行<code>nginx -s reload</code>启动nginx</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure></div><h3 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h3><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>其中a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html(http://localhost:3000/b.html)</span></span><br><span class="line"> &lt;iframe src=<span class="string">"http://localhost:4000/c.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span> id=<span class="string">"iframe"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   let first = true</span></span><br><span class="line"><span class="regexp">   /</span><span class="regexp">/ onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line"><span class="regexp">   function load() &#123;</span></span><br><span class="line"><span class="regexp">     if(first)&#123;</span></span><br><span class="line"><span class="regexp">     /</span><span class="regexp">/ 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line"><span class="regexp">       let iframe = document.getElementById('iframe');</span></span><br><span class="line"><span class="regexp">       iframe.src = 'http:/</span><span class="regexp">/localhost:3000/</span>b.html<span class="string">';</span></span><br><span class="line"><span class="string">       first = false;</span></span><br><span class="line"><span class="string">     &#125;else&#123;</span></span><br><span class="line"><span class="string">     // 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span><br><span class="line"><span class="string">       console.log(iframe.contentWindow.name);</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"> &lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>b.html为中间代理页，与a.html同域，内容为空。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.html(http://localhost:4000/c.html)</span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.name = <span class="string">'我不爱你'</span>  </span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h3><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。<br>同样的，a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line"> &lt;iframe src=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">   window.onhashchange = function () &#123; /</span><span class="regexp">/检测hash的变化</span></span><br><span class="line"><span class="regexp">     console.log(location.hash);</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.parent.parent.location.hash = location.hash </span><br><span class="line">   <span class="comment">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.html</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);</span><br><span class="line"> <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"> iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure></div><h3 id="document-domain-iframe"><a href="#document-domain-iframe" class="headerlink" title="document.domain + iframe"></a>document.domain + iframe</h3><p>该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中a的值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line"> helloa</span><br><span class="line">  &lt;iframe src=<span class="string">"http://b.zf1.cn:3000/b.html"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">"load()"</span> id=<span class="string">"frame"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    document.domain = 'zf1.cn'</span></span><br><span class="line"><span class="regexp">    function load() &#123;</span></span><br><span class="line"><span class="regexp">      console.log(frame.contentWindow.a);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">   hellob</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li><li>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li><li>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。</li><li>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</li></ul><p>给大家推荐一个好用的BUG监控工具<a href="https://www.fundebug.com/?utm_source=liao" target="_blank" rel="noopener">Fundebug</a>，欢迎免费试用！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">window.postMessage</a><br><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a><br><a href="https://juejin.im/post/5afd79aa6fb9a07ac162a540" target="_blank" rel="noopener">深入跨域问题(4) - 利用代理解决跨域</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《终身成长》读后感</title>
    <link href="http://www.yptup.top/posts/40c42b37.html"/>
    <id>http://www.yptup.top/posts/40c42b37.html</id>
    <published>2020-03-02T15:33:51.000Z</published>
    <updated>2020-03-02T15:44:36.593Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>&ensp;&ensp;&ensp;&ensp;记得曾经读过一句话：在这个世界上，有八十岁的“常青树”，也有二十岁的“朽木”。活到老，学到老，只有不断学习才能顺应现代快速发展的时代。而《终身成长》这本书让我们从思维模式的角度，找到了自己恐惧、苦恼和失败的原因。同时，它也帮助我们突破这些阻碍，获得更多成长。</p><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;本书把人的思维模式分成两种：一种是固定型思维，他们对自身能力评估非好即坏；相信自身才能是不变的，不屑于努力，并且热衷、在乎别人的评判和结果导向，总是掩饰自己不足，往往更易焦虑和抑郁，遇挫时容易放弃，拒绝自省，一旦失败，一蹶不振。而成长型思维模式的人相信能力可以培养，认为能力是可以通过努力来培养的，信任团队和人才的力量，会把挫折、失败当作一种体验和学习经历，善于总结经验，不会因为失败而气馁。</p><p>&ensp;&ensp;&ensp;&ensp;固定型思维决定你能用多长时间进入一个专业领域；成长型思维决定你能在专业领域走多远。固定型思维模式会限制人的成就，相反，成长型思维模式能够帮助人们的发展能力，取得成就。书中作者通过对某医科大学学生的行为跟踪观察，发现拥有成长型思维模式的学生，在学习中注重学习方法，他们善于寻找学习规律，并能从错误中吸取教训。</p><p>&ensp;&ensp;&ensp;&ensp;那么如何实现终身成长呢？其实，我们每个人都是固定型思维和成长型思维的矛盾体。我们首先要能勇于发现并承认自己的固定型思维，分析自身原因，勇敢面对和接受，用成长型思维去帮助自己拥有正确的成长心态，训练积极强大的内心，通过自己的努力，克服脆弱、克服恐惧，消除自我，化阻碍为支持，从失败和挫折里受益，让自己变得更强大。成长是每个人一辈子的事，它无关年纪。无论何时，停滞成长，才是最可怕的衰老。改变也许艰难，却从未有人说过不值。从现在起，就培养我们的成长型思维吧，让我们终身成长。</p><blockquote><p>注：吾不以不及第为耻,吾以不及第动吾心为耻<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;——王阳明</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;记得曾经读过一句话：在这个世界上，有八十岁的“常青树”，也有二十岁的“朽木”。活到老，学到老，只有不断学习才能顺应现代快速发展的时代。而《终身成长》这本书让我们从思维模式的角度，找到了自己恐惧、苦恼和失败的原因。同时，它也帮助我们突破这些阻碍，获得更多成长。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/categories/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/tags/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>echarts疫情地图</title>
    <link href="http://www.yptup.top/posts/9651c684.html"/>
    <id>http://www.yptup.top/posts/9651c684.html</id>
    <published>2020-02-09T06:12:01.000Z</published>
    <updated>2020-03-09T06:25:35.683Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>最近每天早上醒来第一件事就是看看当天新增人数是否减少了，出院了多少，每个省目前还有多少确诊人数，见到最多的就是中国地图的分布图，由于各位都憋在家里不能出门，自己也使用echarts实现了一个。效果如下：<br><a href="/production/epidemic.html">点击查看疫情分布图</a><br><img src="/posts/9651c684/echarts.webp" alt="疫情地图"></p><h2 id="认识echarts"><a href="#认识echarts" class="headerlink" title="认识echarts"></a>认识echarts</h2><p>ECharts，缩写来自 Enterprise Charts，商业级数据图表，是百度的一个开源的数据可视化工具，一个纯 Javascript 的图表库。目前很多商业项目都在使用，不但好用而且是免费。</p><ol><li><p>官网上面很多实例可供大家参考，这是地图的实例连接<a href="https://www.echartsjs.com/examples/en/editor.html?c=doc-example/map-visualMap-pieces&edit=1" target="_blank" rel="noopener">echarts</a></p></li><li><p>在页面左侧框中输入一下数据:</p></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">'中国疫情图'</span>,</span><br><span class="line">        left: <span class="string">'center'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'left'</span>,</span><br><span class="line">        data: [<span class="string">'中国疫情图'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    visualMap: &#123;</span><br><span class="line">        type: <span class="string">'piecewise'</span>,</span><br><span class="line">        pieces: [</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">1000</span>, <span class="attr">max</span>: <span class="number">1000000</span>, <span class="attr">label</span>: <span class="string">'大于等于1000人'</span>, <span class="attr">color</span>: <span class="string">'#372a28'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">500</span>, <span class="attr">max</span>: <span class="number">999</span>, <span class="attr">label</span>: <span class="string">'确诊500-999人'</span>, <span class="attr">color</span>: <span class="string">'#4e160f'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">100</span>, <span class="attr">max</span>: <span class="number">499</span>, <span class="attr">label</span>: <span class="string">'确诊100-499人'</span>, <span class="attr">color</span>: <span class="string">'#974236'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">10</span>, <span class="attr">max</span>: <span class="number">99</span>, <span class="attr">label</span>: <span class="string">'确诊10-99人'</span>, <span class="attr">color</span>: <span class="string">'#ee7263'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'确诊1-9人'</span>, <span class="attr">color</span>: <span class="string">'#f5bba7'</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">        color: [<span class="string">'#E0022B'</span>, <span class="string">'#E09107'</span>, <span class="string">'#A3E00B'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        top: <span class="string">'center'</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">            mark: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            dataView: &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">            restore: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            saveAsImage: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    roamController: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        mapTypeControl: &#123;</span><br><span class="line">            <span class="string">'china'</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'确诊数'</span>,</span><br><span class="line">            type: <span class="string">'map'</span>,</span><br><span class="line">            mapType: <span class="string">'china'</span>,</span><br><span class="line">            roam: <span class="literal">false</span>,</span><br><span class="line">            label: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                color: <span class="string">'rgb(249, 249, 249)'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: [</span><br><span class="line">               &#123;</span><br><span class="line">                  name: <span class="string">'北京'</span>,</span><br><span class="line">                  value: <span class="number">212</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'天津'</span>,</span><br><span class="line">                  value: <span class="number">60</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'上海'</span>,</span><br><span class="line">                  value: <span class="number">208</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'重庆'</span>,</span><br><span class="line">                  value: <span class="number">337</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'河北'</span>,</span><br><span class="line">                  value: <span class="number">126</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'河南'</span>,</span><br><span class="line">                  value: <span class="number">675</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'云南'</span>,</span><br><span class="line">                  value: <span class="number">117</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'辽宁'</span>,</span><br><span class="line">                  value: <span class="number">74</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'黑龙江'</span>,</span><br><span class="line">                  value: <span class="number">155</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'湖南'</span>,</span><br><span class="line">                  value: <span class="number">593</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'安徽'</span>,</span><br><span class="line">                  value: <span class="number">480</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'山东'</span>,</span><br><span class="line">                  value: <span class="number">270</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'新疆'</span>,</span><br><span class="line">                  value: <span class="number">29</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'江苏'</span>,</span><br><span class="line">                  value: <span class="number">308</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'浙江'</span>,</span><br><span class="line">                  value: <span class="number">829</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'江西'</span>,</span><br><span class="line">                  value: <span class="number">476</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'湖北'</span>,</span><br><span class="line">                  value: <span class="number">13522</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'广西'</span>,</span><br><span class="line">                  value: <span class="number">139</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'甘肃'</span>,</span><br><span class="line">                  value: <span class="number">55</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'山西'</span>,</span><br><span class="line">                  value: <span class="number">74</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'内蒙古'</span>,</span><br><span class="line">                  value: <span class="number">34</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'陕西'</span>,</span><br><span class="line">                  value: <span class="number">142</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'吉林'</span>,</span><br><span class="line">                  value: <span class="number">42</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'福建'</span>,</span><br><span class="line">                  value: <span class="number">179</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'贵州'</span>,</span><br><span class="line">                  value: <span class="number">56</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'广东'</span>,</span><br><span class="line">                  value: <span class="number">797</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'青海'</span>,</span><br><span class="line">                  value: <span class="number">15</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'西藏'</span>,</span><br><span class="line">                  value: <span class="number">1</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'四川'</span>,</span><br><span class="line">                  value: <span class="number">282</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'宁夏'</span>,</span><br><span class="line">                  value: <span class="number">34</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'海南'</span>,</span><br><span class="line">                  value: <span class="number">79</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'台湾'</span>,</span><br><span class="line">                  value: <span class="number">10</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'香港'</span>,</span><br><span class="line">                  value: <span class="number">15</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                  name: <span class="string">'澳门'</span>,</span><br><span class="line">                  value: <span class="number">9</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>此时页面右侧就会渲染出中国疫情地图了。以上是Echarts的Example环境，真实项目中需要加入china.js。</p><ol start="3"><li>在自己的项目中如何使用echarts实现疫情图，静态页面代码如下：</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;疫情地图展示&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    #myEcharts &#123;</span></span><br><span class="line"><span class="regexp">      width: 800px;</span></span><br><span class="line"><span class="regexp">      height: 500px;</span></span><br><span class="line"><span class="regexp">      border: solid 1px red;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">  &lt;!-- 引入 echarts.js --&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://www.echartsjs.com/examples/vendors/echarts/echarts.min.js?_v_=1578305236132"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!--引入中国的地图数据js文件，引入后会自动注册地图名字和数据--&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/www.echartsjs.com/</span>examples/vendors/echarts/map/js/china.js?_v_=<span class="number">1578305236132</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;!--为echarts准备一个dom容器--&gt;</span></span><br><span class="line"><span class="string">  &lt;div id="</span>myEcharts<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    //初始化echarts实例</span></span><br><span class="line"><span class="string">    var myChart = echarts.init(document.getElementById('myEcharts'));</span></span><br><span class="line"><span class="string">    // 指定图表的配置项和数据</span></span><br><span class="line"><span class="string">    option = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: '中国疫情图',</span></span><br><span class="line"><span class="string">        left: 'center'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: 'item'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      legend: &#123;</span></span><br><span class="line"><span class="string">        orient: 'vertical',</span></span><br><span class="line"><span class="string">        left: 'left',</span></span><br><span class="line"><span class="string">        data: ['中国疫情图']</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      visualMap: &#123;</span></span><br><span class="line"><span class="string">        type: 'piecewise',</span></span><br><span class="line"><span class="string">        pieces: [</span></span><br><span class="line"><span class="string">          &#123; min: 1000, max: 1000000, label: '大于等于1000人', color: '#372a28' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 500, max: 999, label: '确诊500-999人', color: '#4e160f' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 100, max: 499, label: '确诊100-499人', color: '#974236' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 10, max: 99, label: '确诊10-99人', color: '#ee7263' &#125;,</span></span><br><span class="line"><span class="string">          &#123; min: 1, max: 9, label: '确诊1-9人', color: '#f5bba7' &#125;,</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        color: ['#E0022B', '#E09107', '#A3E00B']</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      toolbox: &#123;</span></span><br><span class="line"><span class="string">        show: true,</span></span><br><span class="line"><span class="string">        orient: 'vertical',</span></span><br><span class="line"><span class="string">        left: 'right',</span></span><br><span class="line"><span class="string">        top: 'center',</span></span><br><span class="line"><span class="string">        feature: &#123;</span></span><br><span class="line"><span class="string">          mark: &#123; show: true &#125;,</span></span><br><span class="line"><span class="string">          dataView: &#123; show: true, readOnly: false &#125;,</span></span><br><span class="line"><span class="string">          restore: &#123; show: true &#125;,</span></span><br><span class="line"><span class="string">          saveAsImage: &#123; show: true &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      roamController: &#123;</span></span><br><span class="line"><span class="string">        show: true,</span></span><br><span class="line"><span class="string">        left: 'right',</span></span><br><span class="line"><span class="string">        mapTypeControl: &#123;</span></span><br><span class="line"><span class="string">          'china': true</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          name: '确诊数',</span></span><br><span class="line"><span class="string">          type: 'map',</span></span><br><span class="line"><span class="string">          mapType: 'china',</span></span><br><span class="line"><span class="string">          roam: false,</span></span><br><span class="line"><span class="string">          label: &#123;</span></span><br><span class="line"><span class="string">            show: true,</span></span><br><span class="line"><span class="string">            color: 'rgb(249, 249, 249)'</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          data: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              name: '北京',</span></span><br><span class="line"><span class="string">              value: 212</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '天津',</span></span><br><span class="line"><span class="string">              value: 60</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '上海',</span></span><br><span class="line"><span class="string">              value: 208</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '重庆',</span></span><br><span class="line"><span class="string">              value: 337</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '河北',</span></span><br><span class="line"><span class="string">              value: 126</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '河南',</span></span><br><span class="line"><span class="string">              value: 675</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '云南',</span></span><br><span class="line"><span class="string">              value: 117</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '辽宁',</span></span><br><span class="line"><span class="string">              value: 74</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '黑龙江',</span></span><br><span class="line"><span class="string">              value: 155</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '湖南',</span></span><br><span class="line"><span class="string">              value: 593</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '安徽',</span></span><br><span class="line"><span class="string">              value: 480</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '山东',</span></span><br><span class="line"><span class="string">              value: 270</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '新疆',</span></span><br><span class="line"><span class="string">              value: 29</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '江苏',</span></span><br><span class="line"><span class="string">              value: 308</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '浙江',</span></span><br><span class="line"><span class="string">              value: 829</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '江西',</span></span><br><span class="line"><span class="string">              value: 476</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '湖北',</span></span><br><span class="line"><span class="string">              value: 13522</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '广西',</span></span><br><span class="line"><span class="string">              value: 139</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '甘肃',</span></span><br><span class="line"><span class="string">              value: 55</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '山西',</span></span><br><span class="line"><span class="string">              value: 74</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '内蒙古',</span></span><br><span class="line"><span class="string">              value: 34</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '陕西',</span></span><br><span class="line"><span class="string">              value: 142</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '吉林',</span></span><br><span class="line"><span class="string">              value: 42</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '福建',</span></span><br><span class="line"><span class="string">              value: 179</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '贵州',</span></span><br><span class="line"><span class="string">              value: 56</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '广东',</span></span><br><span class="line"><span class="string">              value: 797</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '青海',</span></span><br><span class="line"><span class="string">              value: 15</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '西藏',</span></span><br><span class="line"><span class="string">              value: 1</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '四川',</span></span><br><span class="line"><span class="string">              value: 282</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '宁夏',</span></span><br><span class="line"><span class="string">              value: 34</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '海南',</span></span><br><span class="line"><span class="string">              value: 79</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '台湾',</span></span><br><span class="line"><span class="string">              value: 10</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '香港',</span></span><br><span class="line"><span class="string">              value: 15</span></span><br><span class="line"><span class="string">            &#125;, &#123;</span></span><br><span class="line"><span class="string">              name: '澳门',</span></span><br><span class="line"><span class="string">              value: 9</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //使用指定的配置项和数据显示图表</span></span><br><span class="line"><span class="string">    myChart.setOption(option);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div><ol start="4"><li>数据调取</li></ol><p>数据使用腾讯的数据：接口地址：<a href="https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5&callback=jQuery34102581268431257997_1582545445186&_=1582545445187" target="_blank" rel="noopener">数据接口</a></p><p><img src="/posts/9651c684/inewsqq.webp" alt></p><p>拿到数据后，发现数据格式是这样子的：</p><p><img src="/posts/9651c684/data.webp" alt></p><p>这个数据是腾讯根据自己的需求组装好的数据格式，我们需要用到的是areaTree下面的children。拿到数据后我们需要处理成图表需要的数据格式。需要的格式是这样子的：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  name: <span class="string">'北京11'</span>,</span><br><span class="line">  value: <span class="number">212</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'天津'</span>,</span><br><span class="line">  value: <span class="number">60</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></div><p>直接上对接数据后的代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;疫情地图展示&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">    .container &#123;</span></span><br><span class="line"><span class="regexp">      width: 1200px;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    #myEcharts &#123;</span></span><br><span class="line"><span class="regexp">      width: 800px;</span></span><br><span class="line"><span class="regexp">      height: 500px;</span></span><br><span class="line"><span class="regexp">      border: solid 1px red;</span></span><br><span class="line"><span class="regexp">      margin: 0 auto;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://www.echartsjs.com/examples/vendors/jquery/jquery.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- 引入 echarts.js --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="https:/</span><span class="regexp">/www.echartsjs.com/</span>examples/vendors/echarts/echarts.min.js?_v_=<span class="number">1578305236132</span><span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;!--引入中国的地图数据js文件，引入后会自动注册地图名字和数据--&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>https:<span class="comment">//www.echartsjs.com/examples/vendors/echarts/map/js/china.js?_v_=1578305236132"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3&gt;累计确诊人数如下：&lt;/</span>h3&gt;</span><br><span class="line">    &lt;!--为echarts准备一个dom容器--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"myEcharts"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">//初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'myEcharts'</span>));</span><br><span class="line">    <span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line">    option = &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        text: <span class="string">'中国疫情图'</span>,</span><br><span class="line">        left: <span class="string">'center'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'item'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'left'</span>,</span><br><span class="line">        data: [<span class="string">'中国疫情图'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      visualMap: &#123;</span><br><span class="line">        type: <span class="string">'piecewise'</span>,</span><br><span class="line">        pieces: [</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">1000</span>, <span class="attr">max</span>: <span class="number">1000000</span>, <span class="attr">label</span>: <span class="string">'大于等于1000人'</span>, <span class="attr">color</span>: <span class="string">'#372a28'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">500</span>, <span class="attr">max</span>: <span class="number">999</span>, <span class="attr">label</span>: <span class="string">'确诊500-999人'</span>, <span class="attr">color</span>: <span class="string">'#4e160f'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">100</span>, <span class="attr">max</span>: <span class="number">499</span>, <span class="attr">label</span>: <span class="string">'确诊100-499人'</span>, <span class="attr">color</span>: <span class="string">'#974236'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">10</span>, <span class="attr">max</span>: <span class="number">99</span>, <span class="attr">label</span>: <span class="string">'确诊10-99人'</span>, <span class="attr">color</span>: <span class="string">'#ee7263'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'确诊1-9人'</span>, <span class="attr">color</span>: <span class="string">'#f5bba7'</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        color: [<span class="string">'#E0022B'</span>, <span class="string">'#E09107'</span>, <span class="string">'#A3E00B'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      toolbox: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        orient: <span class="string">'vertical'</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        top: <span class="string">'center'</span>,</span><br><span class="line">        feature: &#123;</span><br><span class="line">          mark: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">          dataView: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">          restore: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">          saveAsImage: &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      roamController: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        left: <span class="string">'right'</span>,</span><br><span class="line">        mapTypeControl: &#123;</span><br><span class="line">          <span class="string">'china'</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'确诊数'</span>,</span><br><span class="line">          type: <span class="string">'map'</span>,</span><br><span class="line">          mapType: <span class="string">'china'</span>,</span><br><span class="line">          roam: <span class="literal">false</span>,</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            color: <span class="string">'rgb(249, 249, 249)'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          data: []</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用指定的配置项和数据显示图表</span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5"</span>,</span><br><span class="line">        dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//  console.log(data.data)</span></span><br><span class="line">          <span class="keyword">var</span> res = data.data || <span class="string">""</span>;</span><br><span class="line">          res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">          <span class="keyword">var</span> newArr = [];</span><br><span class="line">          <span class="comment">//newArr的数据格式为：</span></span><br><span class="line">          <span class="comment">// [&#123;</span></span><br><span class="line">          <span class="comment">//   name: '北京11',</span></span><br><span class="line">          <span class="comment">//   value: 212</span></span><br><span class="line">          <span class="comment">// &#125;, &#123;</span></span><br><span class="line">          <span class="comment">//   name: '天津',</span></span><br><span class="line">          <span class="comment">//   value: 60</span></span><br><span class="line">          <span class="comment">// &#125;]</span></span><br><span class="line">          <span class="keyword">if</span> (res) &#123;</span><br><span class="line">            <span class="comment">//获取到各个省份的数据</span></span><br><span class="line">            <span class="keyword">var</span> province = res.areaTree[<span class="number">0</span>].children;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; province.length; i++) &#123;</span><br><span class="line">              <span class="keyword">var</span> json = &#123;</span><br><span class="line">                name: province[i].name,</span><br><span class="line">                value: province[i].total.confirm</span><br><span class="line">              &#125;</span><br><span class="line">              newArr.push(json)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(newArr)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(newArr))</span><br><span class="line">            <span class="comment">//使用指定的配置项和数据显示图表</span></span><br><span class="line">            myChart.setOption(&#123;</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  name: <span class="string">'确诊数'</span>,</span><br><span class="line">                  type: <span class="string">'map'</span>,</span><br><span class="line">                  mapType: <span class="string">'china'</span>,</span><br><span class="line">                  roam: <span class="literal">false</span>,</span><br><span class="line">                  label: &#123;</span><br><span class="line">                    show: <span class="literal">true</span>,</span><br><span class="line">                    color: <span class="string">'rgb(249, 249, 249)'</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  data: newArr</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    getData();</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="知识点解析"><a href="#知识点解析" class="headerlink" title="知识点解析"></a>知识点解析</h2><p>option参数的含义：</p><ul><li>title：显示图标的标题</li><li>tooltip：展示提示框，当你鼠标点击某个省份时用来展示对应的确诊人数</li><li>legend：图例，设置图例展示的位置</li><li>visualMap：视觉映射，每个颜色代表什么含义</li><li>series：地图数据可视化，添加data数据</li></ul><ol><li><p>插件自带的地图省份名字是默认出现在省会城市的位置，导致很多省份的名字有点挤甚至偏移，大家可以打开map/js/china.js</p></li><li><p>检索自己想要更改的省份名字，如湖南</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"properties"</span>:&#123;<span class="string">"cp"</span>:[<span class="number">112.982279</span>,<span class="number">28.19409</span>],<span class="string">"name"</span>:<span class="string">"湖南"</span>,<span class="string">"childNum"</span>:<span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure></div><p>其中cp即表示文字的位置，两个坐标表示经纬度，大家根据需要调整。有兴趣的小伙伴可以试试哦！</p></li></ol><blockquote><p>愿我们心存美好，总将走过寒冬，春回人间！祝福国泰民安，疫情早消，祝愿各位朋友百毒不侵，健康平安！<br>中国加油，武汉加油！！！</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;最近每天早上醒来第一件事就是看看当天新增人数是否减少了，出院了多少，每个省目前还有多少确诊人数，见到最多的就是中国地图的分布图，由于各位都憋在家
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>玩转JS面向对象</title>
    <link href="http://www.yptup.top/posts/d37f7175.html"/>
    <id>http://www.yptup.top/posts/d37f7175.html</id>
    <published>2020-01-12T10:05:00.000Z</published>
    <updated>2020-03-12T14:30:43.110Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>面向对象在面试中会经常问起，特别是对于继承的理解，关于面向对象的定义我就不说了，我主要从继承方面来讲面向对象的好处，更重要的是收获一种编程思维。</p><a id="more"></a><p>或许光看文字不太好理解，也可以对应着代码敲一下，来感受一下继承是怎样的~</p><p>接下来我给大家讲下我对javascript面向对象的理解。</p><h2 id="面向对象的好处、特性"><a href="#面向对象的好处、特性" class="headerlink" title="面向对象的好处、特性"></a>面向对象的好处、特性</h2><p>好处：</p><ol><li>更方便</li><li>复用性好</li><li>高内聚和低耦合</li><li>代码冗余度低</li></ol><p>特性：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.封装</span></span><br><span class="line"><span class="comment">// 假设需要登记学籍，分别记录小明和小红的学籍号、姓名</span></span><br><span class="line"><span class="keyword">let</span> name1 = <span class="string">"小明"</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="string">"030578001"</span></span><br><span class="line"><span class="keyword">let</span> name2 = <span class="string">"小红"</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="string">"030578002"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要登记大量的数据，则弊端会非常明显，而且不好维护，那么我们会使用以下方法来登录，这也是面向对象的特性之一：封装</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = &#123;</span><br><span class="line">    name:<span class="string">"小明"</span>,</span><br><span class="line">    num:<span class="string">"030578001"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = &#123;</span><br><span class="line">    name:<span class="string">"小红"</span>,</span><br><span class="line">    num:<span class="string">"030578002"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.继承</span></span><br><span class="line"><span class="comment">// 从已有的对象上，获取属性、方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"远方"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"吃饭"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1.eat() <span class="comment">// 吃饭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person()</span><br><span class="line">p2.eat() <span class="comment">// 吃饭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.多态</span></span><br><span class="line"><span class="comment">// 同一操作，针对不同对象，会有不同的结果</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.toString() <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj.toString() <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure></div><h2 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.字面量</span></span><br><span class="line"><span class="comment">// 该方式的劣势比较明显，就是无法复用，如果创建大量同类型的对象，则代码会非常冗余</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name:<span class="string">"远方"</span>,</span><br><span class="line">    age:<span class="number">26</span>,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.利用内置对象的方式创建对象</span></span><br><span class="line"><span class="comment">// 该方式的劣势也比较明显，就是没办法判断类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    obj.name = name</span><br><span class="line">    obj.age = age</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = createObj(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = createObj(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor) <span class="comment">// Object 指向的构造函数是Object</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor) <span class="comment">// Object 指向的构造函数是Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么为什么说没办法判断类型呢？那么我们创建一条狗的对象</span></span><br><span class="line"><span class="comment">// 可以看出，狗的constructor也是指向Object，那么我们人和狗的类型就没办法去区分了</span></span><br><span class="line"><span class="keyword">let</span> dog = createObj(<span class="string">'旺财'</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.constructor) <span class="comment">// Object 指向的构造函数是Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.利用构造函数的方式创建对象</span></span><br><span class="line"><span class="comment">// 其执行的过程:</span></span><br><span class="line"><span class="comment">// 3.1 使用new这个关键词来创建对象</span></span><br><span class="line"><span class="comment">// 3.2 在构造函数内部把新创建出来的对象赋予给this</span></span><br><span class="line"><span class="comment">// 3.3 在构造函数内部把新创建（将来new的对象）的属性方法绑到this上</span></span><br><span class="line"><span class="comment">// 3.4 默认是返回新创建的对象，特别需要注意的是</span></span><br><span class="line"><span class="comment">//     如果显式return一个对象数据类型，那么将来new的对象，就是显式return的对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.系统自动创建对象，并且把这个对象赋值到this上，此步不需要我们操作</span></span><br><span class="line">    <span class="comment">// let this = new Object()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.给这个对象赋属性、方法，需要我们自己操作</span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name + <span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.系统自动返回创建的对象</span></span><br><span class="line">    <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor) <span class="comment">// Person 指向的构造函数是Person</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">"旺财"</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.constructor) <span class="comment">// Dog 指向的构造函数是Dog</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认是返回新创建的对象，特别需要注意的是</span></span><br><span class="line"><span class="comment">// 如果显式return一个对象数据类型，那么将来new的对象，就是显式return的对象</span></span><br><span class="line"><span class="comment">// 这个是之前一个小伙伴问的，我们看下面的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们显式return一个原始数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>) <span class="comment">// &#123; name: '远方', age: 28 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们显式return一个对象数据类型时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>) <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="comment">// 我们发现，当显式return一个对象数据类型时，我们new出来的对象，得到的是return的值</span></span><br></pre></td></tr></table></figure></div><h2 id="实例属性方法、静态属性方法、原型属性方法"><a href="#实例属性方法、静态属性方法、原型属性方法" class="headerlink" title="实例属性方法、静态属性方法、原型属性方法"></a>实例属性方法、静态属性方法、原型属性方法</h2><h3 id="实例属性方法"><a href="#实例属性方法" class="headerlink" title="实例属性方法"></a>实例属性方法</h3><p>都是绑定在将来通过构造函数创建的实例上，并且需要通过这个实例来访问的属性、方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 实例属性 </span></span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造函数创建出实例p</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="comment">// 通过实例p去访问实例属性</span></span><br><span class="line"><span class="built_in">console</span>.log(p.name) <span class="comment">// 远方</span></span><br><span class="line"><span class="comment">// 通过实例p去访问实例方法</span></span><br><span class="line">p.eat() <span class="comment">// 远方吃饭</span></span><br></pre></td></tr></table></figure></div><h3 id="静态属性方法"><a href="#静态属性方法" class="headerlink" title="静态属性方法"></a>静态属性方法</h3><p>绑定在构造函数上的属性方法，需要通过构造函数访问</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我们想取出这个Person构造函数创建了多少个实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">if</span> (!Person.total) &#123;</span><br><span class="line">    Person.total = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  Person.total++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">'远方'</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Person.total) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">'ypt'</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Person.total) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></div><h3 id="原型属性方法"><a href="#原型属性方法" class="headerlink" title="原型属性方法"></a>原型属性方法</h3><p>构造函数new出来的实例，都共享这个构造函数的原型对象上的属性方法，类似共享库。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 使用prototype找到该Person的原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(p1.eat === p2.eat) <span class="comment">// true</span></span><br><span class="line">p1.eat() <span class="comment">// 远方吃饭</span></span><br></pre></td></tr></table></figure></div><h2 id="我们为什么需要原型对象（共享库）？"><a href="#我们为什么需要原型对象（共享库）？" class="headerlink" title="我们为什么需要原型对象（共享库）？"></a>我们为什么需要原型对象（共享库）？</h2><p>因为通过new生成的实例，相当于是重新开辟了一个堆区，虽然是同类型，拥有类似的属性和方法，但是这些属性和方法，并不是相同的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.eat === p2.eat) <span class="comment">// fasle</span></span><br></pre></td></tr></table></figure></div><p>从上面可以得出，p1和p2的eat方法，行为是一致的，但是他们却不等，是因为他们不同在一个堆区，如果只有1、2个实例还好，如果大量的实例，那么会大量生成这种原本可以复用共用的属性方法，非常耗费性能，不利于复用，此时我们就需要一个类似共享库的对象，让实例能够沿着原型链，去找。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = functoin()&#123; <span class="comment">// 通过构造函数Person的prototype属性找到Person的原型对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">"远方"</span>,<span class="number">28</span>)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">"ypt"</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.eat === p2.eat) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>这样可以增加复用性，但是还存在一个问题，如果我们要给原型对象添加大量属性方法时，我们不断的Person.prototype.xxx = xxx、Person.prototype.xxxx = xxxx，这样也是很繁琐，那么我们该怎么解决这个问题？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让Person.prototype指针指向一个新的对象</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="/posts/d37f7175/prototype.png" alt></p><h3 id="如何找到原型对象"><a href="#如何找到原型对象" class="headerlink" title="如何找到原型对象"></a>如何找到原型对象</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    sleep:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'远方'</span>,<span class="number">28</span>)</span><br><span class="line"><span class="comment">// 访问原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Peroson.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__) <span class="comment">// __proto__仅用于测试，不能写在正式代码中</span></span><br></pre></td></tr></table></figure></div><h3 id="和原型对象有关几个常用方法"><a href="#和原型对象有关几个常用方法" class="headerlink" title="和原型对象有关几个常用方法"></a>和原型对象有关几个常用方法</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.hasOwnProperty 在对象自身查找属性而不到原型上查找</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="string">'name'</span></span><br><span class="line"><span class="keyword">if</span>((key <span class="keyword">in</span> p) &amp;&amp; p.hasOwnProperty(key))&#123;</span><br><span class="line">    <span class="comment">// name仅在p对象中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.isPrototypeOf 判断一个对象是否是某个实例的原型对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = Person.prototype </span><br><span class="line">obj.isPrototypeOf(p) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h3 id="更改原型对象constructor指针"><a href="#更改原型对象constructor指针" class="headerlink" title="更改原型对象constructor指针"></a>更改原型对象constructor指针</h3><p>原型对象默认是有一个指针constructor指向其构造函数的，</p><p>如果我们把构造函数的原型对象，替换成另外一个原型对象，那么这个新的原型</p><p>对象的constructor则不是指向该构造函数，会导致类型判断的错误</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123; <span class="comment">// 把Person构造函数的原型对象替换成该对象</span></span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor) <span class="comment">// Object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们发现，该原型对象的constructor指向的是Object而不是Person</span></span><br><span class="line"><span class="comment">// 那么我们现在解决一下这个问题，把原型对象的constructor指向到Person</span></span><br><span class="line">Person.prototype.constructor = Person</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor) <span class="comment">// Person</span></span><br></pre></td></tr></table></figure></div><h3 id="构造函数、原型对象、实例之间的关系"><a href="#构造函数、原型对象、实例之间的关系" class="headerlink" title="构造函数、原型对象、实例之间的关系"></a>构造函数、原型对象、实例之间的关系</h3><p><img src="/posts/d37f7175/relation.png" alt></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>面向对象的继承方式有很多种，原型链继承、借用构造函数继承、组合继承、原型式继承、寄生式继承、寄生式组合继承、深拷贝继承等等。</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>利用原型链的特性，当在自身找不到时，会沿着原型链往上找。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// undefined</span></span><br><span class="line">student.eat() <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></div><p>从上面我们可以看到，Student没有继承Person，此时它们之间的联系是这样的。</p><p><img src="/posts/d37f7175/objectProrotype.png" alt></p><p>既然要让实例student访问到Person的原型对象属性方法，</p><p>我们会想到，把Student.prototype改写为Person.prototype</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 改写Student.prototype指针指向</span></span><br><span class="line">Student.prototype = Person.prototype</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// undefined</span></span><br><span class="line">student.eat() <span class="comment">// * '吃饭'</span></span><br></pre></td></tr></table></figure></div><p>此时关系图为</p><p><img src="/posts/d37f7175/objectProrotype1.png" alt></p><p>现在修改了Student.prototype指针指向为Person.prototype后，可以访问Person.prototype上的eat方法，但是student还不能继承Person.name和Person.pets，那我会想到，是Person的实例，才会同时拥有实例属性方法和原型属性方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * new一个Person的实例，同时拥有其实例属性方法和原型属性方法</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 把Student的原型对象指向实例p</span></span><br><span class="line">Student.prototype = p</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 把Student的原型对象的constructor指向Student，解决类型判断问题</span></span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// * '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br></pre></td></tr></table></figure></div><p>因为实例p是由Person构造函数实例化出来的，所以同时拥有其实例属性方法和原型属性方法，并且把这个实例p作为Student的原型对象，此时的关系图如下</p><p><img src="/posts/d37f7175/objectProrotype3.png" alt></p><p>这种称为原型链继承，到此为止原型链继承就结束了</p><h3 id="借助构造函数继承"><a href="#借助构造函数继承" class="headerlink" title="借助构造函数继承"></a>借助构造函数继承</h3><p>通过这样的方式，会有一个问题，原型对象类似一个共享库，所有实例共享原型对象同一个属性方法，如果原型对象上有引用类型，那么会被所有实例共享，也就是某个实例更改了，则会影响其他实例，我们可以看一下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student() <span class="comment">// * new多一个实例</span></span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时我们修改某一个实例，pets是原型对象上的引用类型 数组</span></span><br><span class="line">student.pets.push(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(student2.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br></pre></td></tr></table></figure></div><p>从上面可以看出，student的pets（实际就是原型对象上的pets）被修改后，相关的实例student2也会受到影响。</p><p>那么我们能不能把Person上的属性方法，添加到Student上呢？以防都存在原型对象上，会被所有实例共享，特别是引用类型的修改，会影响所有相关实例。</p><p>可以利用call来实现。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'远方'</span></span><br><span class="line">    <span class="keyword">this</span>.pets = [<span class="string">'旺财'</span>,<span class="string">'小黄'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>) <span class="comment">// * 利用call调用Person上的属性方法拷贝一份到Student</span></span><br><span class="line">    <span class="keyword">this</span>.num = <span class="string">"030578000"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * 此时我们修改某一个实例，pets是原型对象上的引用类型 数组</span></span><br><span class="line">student.pets.push(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(student2.pets) <span class="comment">// * [ '旺财', '小黄' ]</span></span><br></pre></td></tr></table></figure></div><p><strong>上面在子构造函数（Student）中利用call调用父构造函数（Person）的方式，叫做借助构造函数继承</strong></p><p><strong>结合上面所看，使用了原型链继承和借助构造函数继承，两者结合起来使用叫组合继承，关系图如下：</strong></p><p><img src="/posts/d37f7175/objectProrotype4.png" alt></p><p>那么还有个问题，当父构造函数需要接收参数时，怎么处理？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,pets</span>)</span>&#123; <span class="comment">// * 父构造函数接收name，pets参数</span></span><br><span class="line">    <span class="keyword">this</span>.name = name <span class="comment">// * 赋值到this上</span></span><br><span class="line">    <span class="keyword">this</span>.pets = pets <span class="comment">// * 赋值到this上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">num,name,pets</span>)</span>&#123; <span class="comment">// * 在子构造函数中也接收参数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>,name,pets) <span class="comment">// * 在这里把name和pets传参数</span></span><br><span class="line">    <span class="keyword">this</span>.num = num <span class="comment">// * 赋值到this上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p</span><br><span class="line">Student.prototype.constructor = Student</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> Student(<span class="string">"030578000"</span>,<span class="string">"远方"</span>,[<span class="string">"旺财"</span>,<span class="string">"小黄"</span>])</span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student(<span class="string">"030578001"</span>,<span class="string">"iamypt"</span>,[<span class="string">"小红"</span>])</span><br><span class="line"><span class="built_in">console</span>.log(student.num) <span class="comment">// '030578000'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.name) <span class="comment">// '远方'</span></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// '[ '旺财', '小黄' ]'</span></span><br><span class="line">student.eat() <span class="comment">// '吃饭'</span></span><br><span class="line"></span><br><span class="line">student.pets.push(<span class="string">'小红'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.pets) <span class="comment">// * [ '旺财', '小黄', '小红' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(student2.pets) <span class="comment">// * [ '小红' ]</span></span><br></pre></td></tr></table></figure></div><p><img src="/posts/d37f7175/objectProrotype5.png" alt></p><p>这样我们就可以在子构造函数中给父构造函数传参了，而且我们也发现上图中，2个红圈的地方，代码是重复了，那么接下来我们怎么解决呢？</p><p>能否在子构造函数设置原型对象的时候，只要父构造函数的原型对象属性方法呢？</p><p>当然是可以的，接下来我们讲寄生式组合继承，也是目前程序猿认为解决继承问题最好的方案</p><h3 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,pets</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.pets = pets</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">num,name,pets</span>)</span>&#123; </span><br><span class="line">    Person.call(<span class="keyword">this</span>,name,pets) </span><br><span class="line">    <span class="keyword">this</span>.num = num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 寄生式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">// * 声明一个空的构造函数，用于桥梁作用</span></span><br><span class="line">Temp.prototype = Person.prototype <span class="comment">// * 把Temp构造函数的原型对象指向Person的原型对象</span></span><br><span class="line"><span class="keyword">let</span> temp = <span class="keyword">new</span> Temp() <span class="comment">// * 用构造函数Temp实例化一个实例temp</span></span><br><span class="line">Student.prototype = temp <span class="comment">// * 把子构造函数的原型对象指向temp</span></span><br><span class="line">temp.constructor = Student <span class="comment">// * 把temp的constructor指向Student</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student1 = <span class="keyword">new</span> Student(<span class="string">'030578001'</span>,<span class="string">'远方'</span>,[<span class="string">'旺财'</span>,<span class="string">'小黄'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(student1) <span class="comment">// Student &#123; name: '远方',  pets: [ '旺财', '小黄' ], num: '030578001' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student2 = <span class="keyword">new</span> Student(<span class="string">'030578002'</span>,<span class="string">'iamypt'</span>,[<span class="string">'小红'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(student2) <span class="comment">// Student &#123; name: 'iamypt',pets: [ '小红' ], num: '030578002' &#125;</span></span><br></pre></td></tr></table></figure></div><p><strong>至此为止，我们就完成了寄生式组合继承了，主要逻辑就是用一个空的构造函数，来当做桥梁，并且把其原型对象指向父构造函数的原型对象，并且实例化一个temp，temp会沿着这个原型链，去找到父构造函数的原型对象</strong></p><p><img src="/posts/d37f7175/objectProrotype6.png" alt></p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObjWithObj</span>(<span class="params">obj</span>)</span>&#123; <span class="comment">// * 传入一个原型对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Temp</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    Temp.prototype = obj</span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> Temp()</span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 把Person的原型对象当做temp的原型对象</span></span><br><span class="line"><span class="keyword">let</span> temp = createObjWithObj(Person.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// * 也可以使用Object.create实现</span></span><br><span class="line"><span class="comment">// * 把Person的原型对象当做temp2的原型对象</span></span><br><span class="line"><span class="keyword">let</span> temp2 = <span class="built_in">Object</span>.create(Person.prototype)</span><br></pre></td></tr></table></figure></div><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生式继承</span></span><br><span class="line"><span class="comment">// 我们在原型式的基础上，希望给这个对象新增一些属性方法</span></span><br><span class="line"><span class="comment">// 那么我们在原型式的基础上扩展</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNewObjWithObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = createObjWithObj(obj)</span><br><span class="line">    o.name = <span class="string">"远方"</span></span><br><span class="line">    o.age = <span class="number">28</span></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="深拷贝继承"><a href="#深拷贝继承" class="headerlink" title="深拷贝继承"></a>深拷贝继承</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：利用JSON.stringify和JSON.parse</span></span><br><span class="line"><span class="keyword">let</span> ypt = &#123;</span><br><span class="line">    name:<span class="string">"远方"</span>,</span><br><span class="line">    age:<span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> yptcopy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(ypt))</span><br><span class="line"><span class="built_in">console</span>.log(yptcopy) <span class="comment">// &#123; name:"远方",age:26 &#125;</span></span><br><span class="line"><span class="comment">// 此时我们修改ypt的属性</span></span><br><span class="line">ypt.age = <span class="number">29</span></span><br><span class="line"><span class="built_in">console</span>.log(ypt) <span class="comment">// &#123; name:"远方",age:29 &#125;</span></span><br><span class="line"><span class="comment">// 但是yptcopy却不会受ypt影响</span></span><br><span class="line"><span class="built_in">console</span>.log(yptcopy) <span class="comment">// &#123; name:"远方",age:26 &#125;</span></span><br><span class="line"><span class="comment">// 这种方式进行深拷贝，只针对json数据这样的键值对有效</span></span><br><span class="line"><span class="comment">// 对于函数等等反而无效，不好用，接着继续看方法二、三。</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">fromObj,toObj</span>) </span>&#123; <span class="comment">// 深拷贝函数</span></span><br><span class="line">  <span class="comment">// 容错</span></span><br><span class="line">  <span class="keyword">if</span>(fromObj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span> <span class="comment">// 当fromObj为null</span></span><br><span class="line">  <span class="keyword">if</span>(fromObj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(fromObj) <span class="comment">// 当fromObj为正则</span></span><br><span class="line">  <span class="keyword">if</span>(fromObj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(fromObj) <span class="comment">// 当fromObj为Date</span></span><br><span class="line"></span><br><span class="line">  toObj = toObj || &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> fromObj)&#123; <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fromObj[key] !== <span class="string">'object'</span>)&#123; <span class="comment">// 是否为对象</span></span><br><span class="line">      toObj[key] = fromObj[key] <span class="comment">// 如果为原始数据类型，则直接赋值</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      toObj[key] = <span class="keyword">new</span> fromObj[key].constructor <span class="comment">// 如果为object，则new这个object指向的构造函数</span></span><br><span class="line">      deepCopy(fromObj[key],toObj[key]) <span class="comment">// 递归</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  name:<span class="string">"小白"</span>,</span><br><span class="line">  sex:<span class="string">"公"</span>,</span><br><span class="line">  firends:[</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"小黄"</span>,</span><br><span class="line">      sex:<span class="string">"母"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dogcopy = deepCopy(dog)</span><br><span class="line"><span class="comment">// 此时我们把dog的属性进行修改</span></span><br><span class="line">dog.firends[<span class="number">0</span>].sex = <span class="string">'公'</span></span><br><span class="line"><span class="built_in">console</span>.log(dog) <span class="comment">// &#123; name: '小白', sex: '公', firends: [ &#123; name: '小黄', sex: '公' &#125;] &#125;</span></span><br><span class="line"><span class="comment">// 当我们打印dogcopy，会发现dogcopy不会受dog的影响</span></span><br><span class="line"><span class="built_in">console</span>.log(dogcopy) <span class="comment">// &#123; name: '小白',sex: '公',firends: [ &#123; name: '小黄', sex: '母' &#125; ] &#125;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法三：</span></span><br><span class="line"><span class="keyword">let</span> dog = &#123;</span><br><span class="line">  name:<span class="string">"小白"</span>,</span><br><span class="line">  sex:<span class="string">"公"</span>,</span><br><span class="line">  firends:[</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"小黄"</span>,</span><br><span class="line">      sex:<span class="string">"母"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj)</span><br><span class="line">  <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj)</span><br><span class="line">  <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.constructor</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    newObj[key] = deepCopy(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dogcopy = deepCopy(dog)</span><br><span class="line">dog.firends[<span class="number">0</span>].sex = <span class="string">'公'</span></span><br><span class="line"><span class="built_in">console</span>.log(dogcopy)</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;面向对象在面试中会经常问起，特别是对于继承的理解，关于面向对象的定义我就不说了，我主要从继承方面来讲面向对象的好处，更重要的是收获一种编程思维。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue项目开发总结</title>
    <link href="http://www.yptup.top/posts/8075ddb6.html"/>
    <id>http://www.yptup.top/posts/8075ddb6.html</id>
    <published>2019-12-28T15:34:30.000Z</published>
    <updated>2020-03-22T09:08:21.375Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9aa897ef3e18376e735232c571820a14121f4f4fbf537bc6a1380919a4861d80">a49a0bf5199bad7868b1a8310dda892968988fe826edac765cc83ef3184a19228d13a87dfc9e3210a4c22b97203840f3090aa7e6e5f0768c57fd91199376de6649c05e14580720c4828705a60d3daeb033ff7cd8853924a598b77844fd1da279bfef507e567b6566b1887922be4ae34925b3e179806e5935574dd91764bf7bd1d49517eb53a8fb9341c4acfc2424b7c0a5f3b201d72b29a59ccc89e34c7e82db726c0a1de1269f517ef81497274e033300e0b21ff485ce5b2535a44c4a43da5f5a309a55f3c06d11756971ec2c36ffcb1f91b4acfbaaa054e1b8e624bd1787fb006ba8120bcc390d0d695cfa8bdf14f458a5cd0aede4a7daba97e61a3485e3f903fb3c6234764840fbfb836c82e21417fc54607ce9457a8d7af5d635d5a727f6f24378530afb5ba9bddad1031190c02ad6f5d691859483224293911a2c7e106ee7aec41cd9e9404f86e341fa8fa6cd95323c8ec936a60e2d1556844d3b7a8d28f13840cfdc3589f92d74b5b662e85a7962a81b148d2e99279742e8c34186e7b98a63265eb3b171acefa3e77ae767e95b3461334925d53fb9115dd4f710e0e68e5cf94beeff69c06e5590cbac6b2bb6c8f2c1b07d5cb5066559934176fdf3605cbca0eff41d959f98f1d2bbe37827ce1f0baa39736a6d0ea6b302f500c4ac6498301821057ab86b7ae335f7a759a24e616d2674dee5c4fd0152da32ee2ff6ed70711ecd418842ae57cc1f6f3b59afe0bae6c7ee9837662867080599371d43ef99e44f60fe565642be11ee7c3a37caabc3f99830a0d0770890769b749ab42234593ef01b2cc5ccf931a01c328bd01a48d4d7848e21b118fbfe111c9cca69474f23b7c656164439c6dc671f87fef4a7f72abb5d717937686d5b276f7c30a33c754ad7c265beab60245180a828d6033c538ff5dc8c419bb0777b977e44d6a871f10509effecca658b8f840c8e862fa49d74051e59738ed10f0e0ebda1f1cfb57b14d1c2b81608d21e6c9d6a03c80b5887c01985d19a8d28eaf3ef08d994dcbfe42ecf6a2d71c21ed59f6d82336a08ec10925cc1f5da1f7fded7ce849f6046f38c724148f3c4bb8a5cb94e8c076df690e56ab9472cc4b93e5bd8b8760f83febcfd65b27c46aae50a8daf34521800cc5f160ecebaa61dfb27483c5884fd35d5fd53d275816a6abc65ade2361006c48de292a8444612fcac3e6c2924b8b24991a055782a22d2b968a982f61bccf47024584e8112a45cc443aa6144ce53a9e72fe0c5e6a07dc3ae7cddfc420a6e84c78ddc735bd764755c0cef3f974cc4d7e9dcfe2cc6c795568d380b2f291c32a313bd633a9dc12a2ab3fa1ad5ecd80b4b8e904ead1e551096fce1c5cb55b9cd364eb42a3452823e5fb16e343fcd04850bf0a1219394fcfb212517ac792ffb1c43fccafe2257b2b5f1e40bf6dda076c3e3e606166f3013ecf647dfa95ffd0958c54fe79972eaea9373c79bf93a6a4a00b0bb7b3a28f1194924fd29470a5cd67bb19b0ceac932bcf530f1697feb3526445dfd458d01ac1c5ba019c31d2f6015c1becc683cd1cc1802a8c5d6c873f7400f4bec3c4d0a307c427d47b70598626304f5ec035c80e3ed92038162908943559a1949fae0c58ddbabc6104ed06f75d4300452a7c4d53eb098b05315105a2db011c1b9b509fcac38f80c0f6e5cc7c62fb21aece166ea1252332fa3fd90b606abc39a5391c0e7e8c6085e921755860e4869eb35ad3e59f329b0f4b2467e8a20826fb78bb97fe21383cd8d2d9f22e7ba464d16d32584de03d4a9bef7415dd5676ea2b1987862c835564989304fb423578928588532b1fcb45aedb8a638b128eb9dc30a7156858b04997fc42c8ec0f4e5997da408a7c5d78bc0dfbf7650e7c42716957bc8ba8c7133e10b7c0d31744784178f539b07b93ce81b9d69e9d9cc6ea2045b07fefdbdc30a41ec67d5eda6f9aaaf3448dfe75560334922d7061cf0d0a37b03361946eb6c9fe807deb624218a0c079cf0cc53242b513532d080b093cdc152d617876fb64de29b11c561340d4451d3983a1b095fec26a68dc6946bf3e5a33df53419d43d29bf707075623e4130351d03327e55d8ed94b630b9c2a82cb37d1cb7e9f91a77f4ba07fe425da39c7c2a5b7307f386418d86946ea5e9d5a2ce597ca4aa80ebbe7d12026a27fa9c535833cb7449458ad5edc1ed346623c14855cea66cfb2c9149ba1cdbb3ae48b1de90ee8341cc06565495dff5f6589bb53587cffc223c085a32e0f26d5e75082bb7aef4484209d30083b09ca95d02f6fcf4440ab73c351047bb6a9acf3f9488ebc9bcbc5f8ffac94aa3088b800bea785d80d8ed20fe486fa683c899b7c0c90a8e9a7e0aec845a301721f0798c3e6998e914435cdc1fe8936f426cf88e7e81640e7fbd534be9ae2ec8eb4eff5104ac92d4de69f733b63f83f49c4e8cecb7a4327be5a2dd44ee92663850f6a4fb4e02ab73bdc8a9908435d091094f0f8c89459594a9cd10cb1b7008f3e591aa839164ec815dd5b0fda8e812715a04a9d0937c4a8ed0d9d31ef0c4841149390ab702d1819c1cd3075f066d4a05aee9ff6123bcf332c68f178ba26d29383ccbd2929ed70c7b4895477a02b614f11972e405999c8116ee0a05c8ff004ae48a5e87bf6b2b110901df674ce4dc61c6f1d427148653815e09bd72dcb5a3e46f572dc4bb70e41ffe7770f6a36f40be1aff14e1b1e6cc0b12eb4fbc1b1103989edcea244b171fc8637ff0ea6543fbd51328acc1d64bf773e81e1692bb6de8c822c8766d4cbe8df525593a3d41100cb7d3b9737e705ed8badddd81a25364fdff29a6aa85b828b4c9eea6d06034170ef6eece74c70e6ce08845ff9913c75e819f38a5704bca287c2a75d41a1121e7321092d7909d51b24cc5d9f0b999f370a42fe6499eb0e3e10a97691f8f31b9ac909690771a3e92e5b771da2625a1f66f780f8c01662fd018a4f6a8c5ad69891fcdf22abf96cfcaee84734c9db3dd9b42e27248d803e1db6d9004b63c3e4c68fe4513f0eaa15e42a56f07e651080e4dfbb5588b5f2bbe6fa3c75dbdbee4c369043797515875fd230e2055c4e67d3d582aae6c4a6fe0a46c025a1dde3a98db5f191ed16598a07f602cba08b4adbb8d75a246d21d701556792c67fa0d309ac9aed2d73bc99c0c04b588b648d3d72775a259bb3fa263557e7626c1cbc232a99ab5d5f159ff719b2c0a4b0643bd91b65b0b2f6ec3ad073a180c484acd3e7580359a85594497ef758bc9e9a88ebf7a2e1cde89a82d00b213b6d993128942a7e833a34fc819287f6ea48720e33df745121239a633220b2318ca0378f710a2839c1e6c1a072259e888f2e654b843fee5715d2b87aeb2aa70bcd41493d21ff9c14a80506820c3160c77b419d1602c086b70c38df0d5c42d58a89c7422bc342c3253d1285db20f6015702b144c61a0fe1e3ca987658ab68ac7b20795ab384ba4e95913f9a09d74dc3d9b5ec7fb43d1cfed90dce9094bd38b8f65922e321b598dc985e5c5a5f87760f8f245afdf0b3be611035625ac6c5994bd97550467b97193597448415b9fcee628b0dccf7ba784c4e6bbdc0dfeed9df7be1c1c563637fc1ec7ce6207616873dbb217f3a2a04edafdac1666fdeb9030a95dc6c9f3de5c673eadcb0cba963fb90a85dd874a2df83c19ec0b19b5ee521ef1eab781c8772e6797efc87e8f8323e7cd1a9c6940e014b494e4cda7f1f7683139b707fa04333d03a87f5fb1e7866351fb50a7ae4040a2bc631689c6b9438011d120d9aa0c259ec7c26da3008f78d3972642631e12c8e6b1d0cb09493d5848a6c74c5f3191166363a321b9e08325c8b6f8f2025ab10231edbebad1a499b10050f1af8cf91c228b036c077949d8ba582375699327f40402c1247b4905f9ff65153a932114661803288bf7ae75af6f82f9c3df5d2c920c9bcf1f28d71bf42abac7acbae4a9616921ba6a4d0bfc913397c1269f283ef4585334263b113ca7392ddf454ba20f5996c0fff8532081049d55de738a5e8a11afe511fd44b2dbe21a99887d6039bd9a609348d57f58e24bfbbbcbf93c0f2004d5a4b6a8d0352a1c822b12396a811d2b68eb53637665ecfa9841092e05d4d77bcd94a87bedb8405f21e648cc8a79dd71e88b58a1ef833968b8059cc0619d73055d83c9f2d15e7b70c455540a22201198ed45d5d934a455bf57f01ee6a0c1d41f9e79948f9e8b8be7c5c967dbe1c890aa0015af6a1d9863b0dfdd370d45063e17d274883214c3d04054e890b7f10368738aa76f043b6bfed49e55dd9e075c26b5518fa429e472cba826916eec5b9755ecb0ffe4586aba25fc1edc1310a0d371c28abe5c656ad7456f3aa919230bd0c2edda118bc4ccf22ef0e822010173e15042905cf0b37308ae27d3503473e16b4277a56ca1998d8056542168c6f154f9036f7efd0d54b73db381f05e214282d6969a9b239e0025553cc4d9a55e7844be63ba7aac9c2e9a01cdef4bd98fd20c1756ad6d18a21c5a4eacb09f2133bc64aaee0429428d07a8e918f878a7e288a88048ae96bb673523929fac6d8c8920de887dbd23c124c734e1c53ec84c39cbd0bc8dd5b1cb1667e915f243f78251cdc2f07488ad27b3c37e386e2c7fad7769713ec757e9e6ce185499b3010c4cb0a4154180b3cf7c58e51af16643fb54fb27bea4f81b548397717400d31dae6fc58383d8579ddbf7d3cd9f8468d3237253483ee58c9da94f9b1ae0d227dfc1d5ccd81d2c2bf38fcbca05be1eacfd1560837e5b1b4fee8585bb56f60abde660cdb2f5f1fa9bcf169f58b19500748a95e228fd11887da3d58f34e6b4a30a60277ff791ab58174c60fcef0ba4c7bc0bed16ffddfa2550a6760ee3a17dd15962b44561dd3f9ae0295ffe1c6b3e14f910e050f0f443b5b55f8d6893a14ec10ad9339b995a60a236f28a90c564e1e289e892f3750ddf7095569969d5faeafec2cfd9faf34a1a30b48340381af8f1e6d9d9d874d61ac42164d0d21ef5c86230b768eaef1205b44e344e52532b52ae93fe12ea17d030361e286e48ee3389c1b1f15ea9b961b84dfa65805b96d3817a040faf295d9e8ccf3bd3f1b2dabd3a155d50d265af7b18a942e6a77529034f5644f5176df2f9c40aadd81ed45b08bb13afb965f6f1c96f14e8f0f02f50ee0ed30b239787838396f08cf35c0b84fb7afc0e767e8572f17c67f5ec40ce1d9e0d16a1f1780118cc6ca1ffb92391d69b8bbe03b996b2a3c48068cda78b99a82c7b68c3ccbb297439e1351f303fff8fee09210a66e4cd92c05816d7d4a928db14d3f93993b2b6b292be3a80dc7689128a280656cc1ad71bcb497b653f54995f491987e6fd601b461ecba610eac2feaba71d7b312232b65e86d957dd4d1baaa39e0d910292434ec9919667f866e154846b08e42d2a8d317b4fce4373cc4c99e333ecae1c45141ac7443ef0ed0e96136e203d47b15b8cf7823d37b6e04d01f396960a9ed307cc524fe3fb2e4e3cac1a1bb9acc0f197b8f73d2d75d8b1ab6f781decb8d27e44916fae8e288b912a86d0e816541a9e8e56551b6eb15c4a99618e38e4b1e9faebb92ba8262b533e555912f88c6c5c1d652cb14dbd275535788ec8cd8a64643e8a15e01cc118a83bbed652d46cd331ead6d5d255739dec994454b26bb687892c020ee448133dd0e49bf92e756e0062b14da45b926724203435825d75cbec4e58871d3699c31c8f07b4843bbfb9019f4aff12e4e2a09978d771567a0b6f3fe88968ec07a2bcaece003a1ad0d5ce5476eda485d3712dafa63dbbed7a17e1203af8fbf5135e8d504107f5bf4c32a3d26c3ddf1225de2ed7984ca5bd2ded2a848eaa1343ac01e2334aa1b99a26cd1a20a075cd16d7cd983ab31fa128b9b38d8d1f55624cad0a45f89d0cc0e76f8d5628949004e36bf9d7e8ba4f73da5d9929d0e0d48a405c1e72930961c2ed58a03b891f05985f94504dd7178f5919a80af7ddac76399654a910cb76d631f50ed27571076d41afef4e3de34381c464c018a120a02d137e890886ae6e7c470eda1c2d3642388e296693e0cf38b751fefa811c5caf6d634d2690548c1c2a4b559149724a908889d4ef0339cd8add1c2835ae5a00501ebf27f4dd8c0be3e9655488440379987ad9c433e36dd9d820cce7d0261e7c70813318cbb8bfde88d001d43c1ad096a372811576a8b6f76bce4c60ad647d88f31b50150610e5ce7195a78b63b54d671cb10e04e06a2d060e91229f7df5520d2f98434926d35458b3616a1c22cbd1af79c79be3d667e8b9d8ab1ecb7968a3ec8b21dba219ac1ee461c54dee7fda9de6742989581e96f43fd482e44f9eb0dacb983cb0986623de6bd2fd1c8c9dea60c44cec756a9e27bde7b65466830837df56243a802342bd2e936b75eabfb47e7763a07072aacd60ef75157508c95791b9ce41aff08a8d30f43218bd97dff1c455df86797e7d49f07726e1b92440f6006829690828ecec125675e044a08bfd353bee3310a67fe3102a69ed6448265a7169cd1637ab9622cbd2cf92643c5471e89fc7b1e7c56e20398543de5c31879e176b21fbcd5d179dbbf9c976d831987f21e6e5153c9411ca4dc6fb7235ce1f9141159d2b50e221953a030a7a789a3fdcd21b3a7f60ec21b7d79db28f3280d7d23bb59b585e28833b20b901b52bf7ca5113967f30e1cbb6160f852c9cc896083cf4d4851cdfc12af386224e05e5da9cd8dec2e09fdad964e95fcf5b303b2cb2c17fdf26e8ecdaf940d949f964316a67495782760073c13449cee36cc3030d9584275e87616927702ee56b795310452b0bd203535f6eac0d7f138dc03aeb9937ebbe21c0d7d12b2fb5898e19231df55df685ef706179c687e5973dffd6c48f0941bcd2fed97f947398e3e197fb1f4d370d881a4d99e56a530a225593b899280fd5c4946c27f20f63cb4deb7744104ca47f98794c0bc45e17e877b9bcfc8a5bc8a903942c5d21dc138c7eab2e5154b2ea09cb6924057676ce0e5f956e2adc5e27a1f0138864760301b211de28833c5c230e57c2a6bc785d4e52d7730bd40980757b28bc714881f758a9f2c7ef3437ee34aa1acc93af266110b14366a072b8d9f130a00dc9467db4b8bcdf44de5ea8341d4cde3e470bc04c3da68304cdc773565916432e4afc9ab6839f96fd1b683fdd6bc0c214a440eb637a3320b323e24b9a91f4de798aad9256e2ce22022ba0a05c35d78833cabac80c189c6824527e8f9769bf509da98688f78ebcaded23e2d5bced2c1e98e1960c725d7edc1f29e1ec75de9c46e6f065001a7ab495a55d482ab6fab13957c490535ffac3df72dcdeecba6a457989b13544a5aeb023dbfa00dcc3ed124727f532b558d70234f5869f57875ad36570d54c841c14c3eca551507eca487eb6bcd7bed646090222b7cc92dbb33bd8b5d987662632f095dfbcdc7843a3fcd7849e7438c0dd1cb45717ee0098b61d369282bd2561650e6c68d6bc93aa1acb27906bd02b24c527325e509f9ca3736f37599610d9c41f43a4ff6c82810d61b63942cbd993ce02e1f9aa463cb046a91b28d8d9a46f9cdf8aafa7c4c2412f1135c035289be67324f243e499aee552354030dd4c7ce2d683d624b4de278a30a33079b01761c7a269f8eaba5acff6722c9b378a596de3f3914879473e38c8af2faa41b8c329b8f927de9aade54476387b70390fc6ae9935d250c757b30352af3945ca024165ed5016fb4a8feadc30e5834634f9d88b39bd98539028be5f29f05dfdbdabba3fbeb3ecb43d6e4290b557297cb2995256b71ac14f388df74b01fb0bbe76a5f49a6ca132695f6bf9939f0eb98f664604d1c401342dbdf45026c2c87d194761c0ac8839566be67a3dcb35399d872c257be2363ce258f386d0f1867f3e65919359b85d26280b3e5d972ae18e9d056873837985c18104a1e5c215ec306a2913953a6179188302cb34364aa20283de048771ec107f9090c058c42b3c0902fb315ed7eddb2cf61f261164d22a376688a7aaf9bc6baeb5bf3db1286c540c0497f7a4151157bf05f1e7df9e23ed6d82b98b2f6bb768160bb66984e6777f5c6c2d2727cd95f0832e80c2d7d8ccec0ad9968a6d65fffa69fc61ade802480a4de12d9233afb871b397dfd1f19e16ba60b59e42004f1c22016f57f170bbb03cfc2aa37b6ed7acef1f7c57fc521d2b5448656ab063d26ee2adc102b32ffd2220325537d6c6f9df967fbad839bdb710af9d777e309034dba92dcac3289e542828bf78e5cfdb925dcddd9ce7c4bd78d2d1b0f532c940ad25f978c689826bb31854b3af329acaf3225426e5c3efdde4317ad6128d18d50770a4603257ce8339c35b977f7a98129183ccc0c4b720d91d1e47f77f2618c9e282d4094854a7d94da6b0eba97c359737f66733a560fc59adb64ce45961030e8bf741bb6d006769d375100a149f0cb9a2aa3593849db6e52b052d107431f809242f13d15395e70c4dc3dad70381beff14f2deb81e8294cb0fc133d8d55b234a6d99a2178dee46f337381cc4b4a78211d9fc0e7017b755a3742d6e9b83658583492543359d6f71fd2298b2944ffb36487da461d887f721df2bcc9a9ffc5cc0e6fb3145e18ee6baab86004b84e2c061e49247790a05fd98a2d3b4d33ffb0ce9d39fed2e9f0259e7163ed8c064c65043763f4131f79bdf02abee6b9bf79c926d40554233f2a98dd0a4089bdebbae828fe040d8c950450a9ff5015ec2096810bd898fde6feb29a8464f27fadfb3d9b427d606c1fb92c4b1570be13383c071948468337afa2c917702ccc2eecb197bd1f5c68d0f64a7c124ae3ad2b36307056e0702d57c3764a59a1cc47e4146113bdbce90d9d2d89807bfaa185aa3eebd0b9efd0b7ac39bde7caa6713698a876620fd7c13e0b9db9a3b82b7505b09899768d5cd02bc5dfe226acd73d56468b4be4d2ae0af2059d7295f40799e2b6cbe101e5650dccef940fb781412ee1b7234c3a2e5c4dd307d3386b8160491044d91eaa05a8811667b815fede476f345b13ad8c9092c5a92911b7a1a2c2e10b414bb981006a57849857442750c1e942d97c611dce00cf77c2b5512390989619c6e791aec45e461d6ab82952f37c5684986821d0407cfc20b57649467f35eb6fe7e88036ce4557f45ad44f76426b3c69a3ff07e11f01b64c1376eafb42519d48b6ecb3c96bd7a0d2f2e2512e254f5ab83363ca29d0d5ac7ede8e59ea9f079889337565226ce98a36b7c3149dbbea353a4b6780735925b780b703de155192af180e6ddb10eeceb80e12e156ed59b9f76ad692298c592e7c557d2a7eea7672bc57f9e1e68efaf650bd5d04a6464d46d16edf5e21e7f65b90f03309ad8e4f9ee402fa491074b703f5fcd803f5d1ac204a41b4c0c2b09108e74bd371b8bce3a41c1e4655aefd6d3392419d51c1df3292275bd7b474259f6930a217e4fb5116c9a3985b64760ac50056a077827cd0a414373392d88fddbd24bb47cec0bfd834c41433029306d7a12e22cc673f211008e00860e64fbd10fac83f72333604c009911d74a5dffb31cd7f43980def634109f0a143bb2fa0f79d7b6f6ea699407ef04c6a5f3c0661630ace678b4b930d667a70570a2d858492b427bf1487fa6c77784225835d9a5aa44fbc2a1b2762e90e488aa2e438cac95551d3738e2a2b029e058b57a6317de0ed88e087d2a241b38ebe6bda23b37a2c75761fe2df6985870794998ff62372fbb1693eb54d5dd7e7ac4e905073aaa41195d7383afb95103fb7e166ece28802b85519f5c1780f6c4b313c489c317f1c560f6613139b378863e577e8571d11a4223f2f0fef8fe4a5032390c0240be092944ed50fe0fb43461039cc85ad1d60bff81d4e51632fa6cc192aa2d2c3c6023c5a35c06bbb093b40c6a24c1f46ae88f4a8522232fdc0dc683331aace94d07c209664244ddc590256f1d956a507020b9b6ab83d5d267facb61147058102a1d3360f60cd6977e59d2254ec1a3e5f59456ff26b7562e20f4b1563778ff71353e56d1c2b34ebd3a8e0cd33f104795f3a242c37c74198a5d6c992a499f688342adf4c5f97855d70145ff32d59f61bdfad62fc0d4915018ea0ad8eedcee72308fa1a20169fc1168d5b690bd29eb572576adfb67c336a8198ca9a903d2cc021fbbd81795ee333bbaad4d98cb730ba2b6737ac0b2fd3dcbc4ecbc1f38db0f208293d5ac256e8567076f51a8a91116f843b48bcbf07e0f5ec76ed82200be9903d57afcdc160e16ed82a9adbdf1990523bedd89a00827f48f80e72f44984459a79197150408e3cf5e4b94ea4a1d97a82eeee3f1a28f911bab18c122bedba5281d19df5071619e31c14e573ef1dedfc3c42e47da59db948bb4591f620770c083b01b18df7e1667c1e6818a565266aad520d8626b742ba59f7864fe73326a175e244a127cc16766d30d6c2554b34d18c29e3ee49ed139f7ba17a5e09d564b7583f6189d7e56cb4b48d4740fe6d8c243f3c7391ebf010f98a0b7d5e28c7b72c2dda9384271235994d11edc970f9dd05c4960edc613235b3efa92f13d39ac0f575475a1bcd2208b69ec7f1d9ca7a503c9d70e605db26a7b0e89375b3a2637c9863b49e8e874118e2cc7d2016aebeb1523a3b2e25606f92fb10e07162e71c2069eb80630ef95377c19752570d50efcf54703b3e942b2a3de8b54dd9c7d46b69a08e8cf3e7c65af88b4b974dea18c8d894db0da5dae7b661a08c34c40615fc7c2ce40db83af886e5c69eeccc0e769779a7b1fb2e4dd2fc389e3960bd20fb57c0eceb55cef464c2b6d3b026a83d5f972534f04376a65b6527f187b931a9e0037504f0147958d2c25496f917db301c424fe04a05463f98b56f55e3e895d07cff1f5cfc87491f511196f28c33a479bbda27946a9a07136b1a4c1a375010f4611cb786873eac234bd75b3b95066444fc60ad12b79941a172c92bcfa3645757153f697e2fdc0e6cfbe8952670a06087dab63bb06b65fe9a2fbcff2707f29e52624515e5747a52d8e25441ab4e0b30f588aada9925bb1a3083258554fbc48777e4fac098394f4d5a06c9ee6b1765190bf020fcdce18ce655379fcd668bf9d469bb8259a3a6b41c069569037117c16a16bf7189dabb07eeee9e04ccb3d6505e7d962413f800910dae011789f4747f6ca38084a393fb0f73ccb4d8ca90059dc2f5b0db771910da92d448fa4c61d32b78c537713112a109fb3913d7a39c3ac3fc73637549c68989593d7a396ea80ef1df2e88e078a14d574b7813058eceb1374f4529f93726dccfa822bd4e5088711d2d846f8736980e52ce1adaa89041cb1dae87ed0deeeae151348539cdda99fc0866ab030f88caf2df107e0a602186feb825ddd17910c2750b8f70fcd905e3ae339b6f0abc8ef99779c14c86ceb638c23d61cfaf39bb23f0c6b0f78dd2be7a4716523b0001830d76e4a5c68e4d6bdc673b47b7a4ec04b04584dd82ca3a14451bb1b0d3a77321c107ed8b64f652ded499278710418d6ba86b322c7d6d0c2ecbe47b28590739bc9d5568d2ad3ea2cc2806f10efd7b955c97e75aba3a15ebe61fa6c2824e14f130f312300bca801b7f1561fdd25ba47717cd4ce82d323a0c1ed39de2857f8f65018b0ce27ade53980c36a9c171c1d29b8f71129fb85648143bdfb4c7f586786b563ebc960a5a2db95863d16a47af238c48e14ab7f5c94e1111c840a9a53fb358a02a970cb6e977e5127a2547b1e8418a093af942fceea70693bc7db010f8d5edfc8648e7b4035fd0a58e899a2dad95ad1243ccd6f020aa5f984dac339c58db8a918a407d39857d3f01f3196e20e490e5be1c77e6a2e9c042f873b2dcc47810d2f10ca7c7f29c5b9d722cc3969f841d927c584406f305568f0ab076d671ba30a4029bea3f6b50c4457689b92ce5a978d0958e9cf03a4160dc7159204083f9a47a0af5c454a97797b02a4a27850a4cfad8b5819ed86c2db950e4ce9fec0ab3e46f956adf6d1a426da68d3bfde362638f88d2b02d518d5d15b7b71216634e0b54466a1bfd52600fbd463d3e4dd5565cd9af6087a9bbf50ea73cf68c131eac363c55f0644ff54912e06ff6ddd0ae3b4e9b811387878edda744e4efebd5053c4c9789beafb8d39d7d4682dc218881bac8b9c91b0ec142a0743cca29135704c5d2635b13bbb4b383970eb48898d18753ee4940dc4dd6a6e1864ff43353adef0f79786f31ea19b8643ed9e1a1bff15674b6d7dbbb481814e509c194e50e5ee5fc4f9f37ff00ff3c26c7a9da602176aac4549a2ff2f17bc551c1fca0d12c843c31d822ce01abe150fd388cb8949eb0516d61ee7e880be2aee5ba70d72a739472d7104e64c4703898ce12f074be40630541533c17dfecf270522d2ab115ed46cd6a9c40b92f8b6cb5da618cb872e117a587d2d845526fc859c6cb3a80752e409c6dfe2b60f1c0cfee0451e7643ae0521d2e17aa9439bc4f7d17a2210255547eb60b7594339e7cb5340df719e14d6effc3cba4f8428ab5bd22ea99121606a86d2fd8e94ac0222455fdc7a83dbebd14e1fa01c3e67f595d812a0594e4e2a43555753e9a355542a861c4e94ea625e818bbe4ef47cc1be27882b547b669abb5b5c28ce0eb763508a41ff291cf0f9509dd62348967ec9c334e5aa0404802df9cf49836151611e315f38abb24feff9090d236da012264e3558f1209e32e473a6c15eba1b943a0967ba212e7fb355d5d3e5115707a313d4498660d011ec700b16578b7b57398c25bd2c6635304b8700f0ceb6d1c086780702cd71f8a7ddfd8579d35c15a1e6e08839d7bd119a749629b79c0c73f930721510b7c5e2aecf3f0122cc997b736f3aaf19367a9ef53608a3e6155a74033f4ff8e67f98851c89ee135f48dfd961f81337aa21c818addd63b49f1402bdfd967b14561a3cd088185789db40551fa1507a37c25524095e2e074ba204ae35abcb3370ccf6a0128275e1309200718c4b902ae03364f38a841d00c851fc2b2037227c786d37b6d4e0fe2a04331f64b8d184e7e82f362b66e5e63133ee4aaf347efd3e9c39fae30425c6daef21a6718495f42135e9c246e2693a8288b8eb48c891f7303fb911249a29c668745de54a099f095ab4b39859b0ad1880583676000efa64f206698c8f04e19403de43ef49577857bdd77f5751440afaf55f9d5e7968398c557be346a201ae2aaa686078d5a3e587f32a9795e676d50831c96273108493bae0637dda74eefc8c183335acb12ffb581aa4c8e88fddd79783744ef9f773370dc8d1c6707339fa661d856d31769f93e5b0040e587bb71e2612be3879d79304a773b939dd19bd643436d8d9edf9b4e48dd3e23e6a0f79ff4cebbffaab18604e2d39d90f17115222fdfcadab8481c1bf42751bcc335e7e5decdc5981711dfb9a5d00ebf2a9de4abee46f5ff1073d9acf6e47c4ff100f939c0e5f464db03c1f6ba671f9c329ead02872d2c2f2e12606f82817f33fcb4d42303e32f03374ce3075a33625cb5aa764613cdec1638f39a97f81df2d0a5fa8dca4e63a36e9230dfd81d14bbd6b822da6deaf77f9c6ecfeb33cbfd29537927a42d8ea714e99943e526fe09b3302995853b8ffeabbf2b0ced74f0378c8591ebdf9b78720b9e5fb21bcede4299727ac6c6fa4ddf9ffd23a95ec236dbb37bf4836e2d5dd7a5fe5ec8b389ed39684708fcb6d1cc4341113d8abb7bab34c3b5a0f9ecbbbccbe236b0de5b422ebabc7b227a600194df4003d34ec1bad57d783e1877c7c70dc63985b8eee8fc0b26d1bcce0ad8c64eb74d6ca45995b29734a0a69c1661cd75d5649ca44d8bc01d33ef5321b0b3f0259f0a53a5af56ca2707624d95d5b0bd494a35ef885353997ac830f1a23f6eacb39a68c52d2cd74e1a4eeeee9c94e1ebee2a2ee02beef493fb3c791abe06c4383c81193ca3b07cf796b1bc23dec9015f0002533d95523a978e3ada7ca33796161bfaa9afb35a30acd19dd1e6a0258fb7359afe379ff1848cb893345d4294cb0c01a93aa59e8d6c5b21907e6304d32b83b3a6f89b7b7eb87ee4f5209db97563e0340d4e9c7611bcfaf898f9a180362ee5eedb8584350c2cd6f9be466a5b3810eeabd49aa7d96f394be1d4dcb5844f623f7816da255f8d2cc305f291b60f4c7ecb77f68eba84bffdcdfb73571e5212453b2d0dad824e1607652717625ef4daea136a93b755c39d82a092cd5fe61f6e45476422fa8353ad5905988586207e64c7717073ea67a124e9ca6f477733bf98ffc956578159df6cb0ec19fbcf8043ad8a1aeb3d328f21f71cbdf18e7bf2e2065a78de873c508e5ccdb31f53d4af72530a5f8591572792f87f1b8340abc6db0d573f1c00978265d5131a2214eea4d06522c871662c8e5f26807b4fabffb2c488c2a9e7b87489111ca47ac1b37fc02d949a3889c4e011790fec607b62b48850dc96fd0f24ac02fcfdd56e179bcd2cd81dda1b3c9f43c2b1cc6f928dfe5ee76c8fe7914747ad96897a14d14bf3f4b240e173af0e75d7d612398db98f6e888ce088b6a1d34187ed80b0d41c88a2c058539efae39fda297cf9c96493d755ca2e6073647177929ba4c224dded1d3da5580416ac95bdce90e9d176d50eff19012e343199beedd59975742e6ef26389243ae8c02b8e183026494ca04a691944eaa32d0db390a5b1f4cc4e4c496e81b9537db105d63ecd02d5df417d2d15bb8c8c7a236a11cd25a3036f6e28db6ebd23d505a3df977a44194218a3790038db115f93f502fd1206970e928149b6528026bf9c5074e2ecd7f980c6aa93039e432999b931f14ac2c8e5871bea3f98c3b216378335901437625f42bb326c701f1fcf28c1f0aa571e8dbef83ac28fb2e9c56c24193719d7d6d00c39606f4bfdac01a73e70fb9fe4402b1cae30b9dd5f7c7c793dd2c582e0f896ac878d28d56bd573539c0b6bdd7336dc97322cd13936843e64840d981e79792a15b4c9edaf70047c1d1936c91818c94d1a0f6cd125512d533f7116011d2b3727eecca8143608d112d284189524edcb1b7da21ec3be6a63c6fa24714bb0db3d7127e59db3e794d9eeccbfd9a4e7e9b216771f966655344a302bdb588799d4828727bdea26dd7e14984d5e85be6348adc570538f5d05190f942d22385580e42f5da6f0c1d4c492cab3eeb012c99860b21f5577c51935ad48e46db6fc8529c31849032e7b0ffe9be7c98ea31312b6532cc4e4a040ff25f5742221d522e407fc8de6e9b64296d69ff8c718e3e8aee28c32a61958dddd8372277497286d9762e4ca386e40c351c71c54889e2a51013c9a915486dc7ac741fabfdaa955e05cffffe8564abae992c898d4adca3c090c04ed49fe7d64545dc803c61c63bc2237fdfa1aff27a650a00fd02eaa0c1d73b0173a98c7966149b2d2e5cde0898973ddaf9e373b5340f19cd0bf352cd83902c33bda2ae08ae357d259602a444880dd3a549ec48501473f5d168153971e091a65334e63201450d6d670ff3945648baa90f6699e8c3425ebac94448d2c172a1a94e56e7f3d026e000b65c7e4952afc7d0ebdb0dabebd3ebf5e4b56c9522bd445d9e5d21ed2c34a7a092c4316706e845ad81893d9afb9cc51664d05e391799791afea7f2bf2965fe3aef1b57d8d246cc4976dfd8c005f92126bd6254bd44d6f23ad8ee1752af3726c93dfdb23619413749567a3cd313ffd45928bcd81f49dde46433513738f403a02afb3e4ad81ba61f9201f21937c2a55fb8884c1d302bce0f3677af19bed9636b5bc90e170bb1bd140134ac923817ffaaea3fd2a090025051ccd3130969c2ed0b74302ba0140d65de23d0b7ef904aa567a2a24f403167e22bc5e3bf22931e9c1fb52ae1223ead3b223fe921b3bbc5c4e3b62364ae541a9a817f4271d520f0d5c4e2a68acff171c685c5623da0d5c8c9b4ec17b457233867288ef3b0850a3e3e5da94f8964d17d33d11001f85fe3d7e52b50eb99873f45a9b6f635e7019a86a6b3cc7b99b96e368505b3dfc2d619cab12826e7101c81fe979d44df5a90b8d3cc320d2f87d9437fbba20b2b0969f17db6a8768bcfd7d084c74c8d3330c508bc89fcfb1e4417605ba89de25720fcfc9fe7c8e842098f0a536a35be244b7bb4b943412c1941cb917214202ce3486787ee7f9386c75243b80ceaf579a05f7367aa68bd468b34412980e7faf5b9b57e4c5d447ec2909eff38d92d680fbc1f5689171eab20be2aba12659d3ea52de781505011152adc69bddd9d48344c04361500331360b97ec906d3f7ad56c0a97ef7d181871701bf158d35080b6bd7658cea949ecf509163daadec8126221e8d6fc7c9dc996e397c8a65a782936bd3fd8d58f80de660deaf77b11edebd72e82e7d3cf120b45f21b61ddbe3de594d57618f6828531d3daac0f88d4e95c1bd3ea55d97173dac60418ed931f230a802ed5c1c267d9bbb6d6d32aa56c04f6fddb2cb7aa504c352fdbf87bda9a6d7285dcedf4e44eb6921e8cf88e3b39bcb7747b042ddef73d61dc0c09d16116edfcfce0a85333a8eb6063b9d3e5484e80832dbff6076a8df5088ae32f086753c9eda89174adffd578694fdf1f82ccc069624c08f04956cc67301d4960767b024c81bd4eb9cc373c4b545fc305cc4ef83bace9e2a3723ca0eb900e3495f2eaa25b599e9ed40ef01594b26cb4275eb10908fb5fc1023e53a9d41809582652374e2f310da3f9a4e8aeb4bbca40546c478759353fda1195ff5daaed2a779ee2d62d004aadb12dd64537e2e03f58660be3adfc2526f926f96795db26983470510d81cced3bb50204f72e0c26ab58ee8618c84a1f283de1e4e1a2f9b1aeb94913e5e43c5813a4e39d671286d2fb438390ef77540fee5c58dd51d8bb444fcf8c4da19a28baed4bb2d6924a393222663f99545174b6c82ca26534e6c6f7f4b59b3692a2e3f506b05dc0f5727c74e789677213a2d4f784d3051fe9702d468fac52dda09d3813c2059859597b9e36c9fe853e7cf39bb0fd2cbc663b8258ef03f15fbd846e6fb6d51ca1bd76f048394efb6d0da54d7a384ff586d01f974664b0bba09f50be45700cf6cbc41eba6f8a98edbfb5f979d8b50fda30f5004f6cd0c1eaea6bd105a610d9a133de2eb2311d8438c887aec21e8637d8a270446bbafaaae9ad021986d119f3e69ecd51df22181daf6a43fb3f611036c6925dba6b5cf2c28f4365bfeb0b3efa348dc3015abee259483b6480c091f990b9cad0b13c4ba8b1ff862c7449892cf82e14f0c52a7246c2b35cceb363bcd35c6a63745781a2573b07c035aae431b8b9a285b93be4346980311c13e37909a4efae6f80411b408363a87a074b3cd2bbe877b17a154fb9f88c07aa292ff9f94cc6d543b18683f5022a3831a09f7ea71d22f48bfad615cf4a561dd5b9519b3a3f9008b4ab164e70136cdca82f8b180d9162327fa83ad2e02d63d19e4da7c6e14a414ee63a98193a09240b70e454cb1a6648df65879b488a50f067e3d79ff7aac159acdda5d817d901d75a66bf37c9a0101216b9169d0c1a45e5370b012f64d51d4e843f30d1f01c2ef2849170087bcdc4e8ea5b832ac00dba02b8bd3dd0a7bd06e8f500cf4512d3ca472756f56cd931fef1772b432fa1c88349f82eeda6059ff8974e75d9191579c99cd30481753974af2644b789979e25b45182d2088389b9f8d47089610f839f586576e179cd7520fd7d99e00bf867540eab4180506923886d917e9762fd9f03bfa32e6765f17ff5912adb92e9c9632322b775ecd9ec675b99b46d3f09714db6482ae88ee2a01fe9e89db75462b2a77e77e574c36aad86cddffd41be218d4aabb891b281db5ab37111253a501951edbbe46024b01156d6fd49f75ef0b505addd7b05817e6b5d427eaf2fa29b3eb6178480a7d0c2a3220b18d0f508b502819aeb978a3ad72a02611770833e1cd3575c854879bd788b3500dba05ee838ebc7855237503fcdae7ec7c141fd420c03e28d8099be7f8187a9288b247029a65fbca5b1a642a829c3ed5869d37f561426ba2467a921b13456a8dfefcfbb432a3baf5affd64d00446bcc8935270dee1fd37f9195d60f857129770968aeb695cd10602fda7349469d1952af27c65195f6dbfc05ab6168054b532fce1d1c1c94102e799969b4a4fceb2ee92612b230b6ae6bd341e434577702145aaf8dd73b29a10d22c793c3e88ac4a8896f00f4a8c5aaa751d11747cc5735a8db9c2d05752792eb7d7403161cd3abcd0113894f12b50a78b45293ad879b2260a7dd751fcfc844077a89671a410429ce0b2348cbb94d882724404c8bad6d2174b20e5bc26945bd293f06ca3ae17ebe8b34671bbc8eac95eb2addfd67dc11b2eb5d2b7029eda77c7d23f1bd357a989d84472827d55482880213c6263f060c94fd3b876e47a0ccb9f80885abdbe39968eb6622ca227ff502c5042215a83095e435a4f5394aad16d25f6f9160e1b9d2c82466a9f1b7ac778aac5ac849df62757897bde02a58d188c7a9ae1fc5a67ec5287f82edc6a2d0a2c7e5c616379a5d0a4e89d78a303b869f4987c40410fe1f4d189160b37bcf158c133fb96639cc53d7901a8979af51e464ff211ff34c11b0363de1b9b6b9db1796a0e85e81def6409bb21de5789ab39392b5e0d39f8f9f69f8af584112ea3bd73e0d4053c140480ff8c912d33a9d8c0198b3290b4561bcf21f3788bf10cbe621e496b69b389e1d272b45e65fa358c82274f71287cd93c0ef051050f6d77e383037a3bed3af29e47ef7765b9d85f410b33ef6b7a8aede5c50e72100fe26622b764d9319c561c9df3ff176ef2360dab1e03dcf4a0bba632e43a97d442eb1141158ac50a833420e2bd92f652e0e3cb42c825ae6cf0f8c09a6dd8b4cab1fb54030f22cb8d28b517e75e983389ca33570cc0e5a9bfe7fe1f05e2a4afac973cf4a9376f731491b8fa52e44aefe109bee973703769b9af90e78cdbaa80074d4d9c251f303cecb63198b679fc956833e0e1b6b3b1578d6ef6bc4eced2a49228b8f42c09321701c23eede58e35b3812101f6e7a2af0a5bb732805a42ec03ff01b78aba3527c525371de4c41045ac7d7ce6766444b3e2ebe1a4062ef2e4fcc5acce08c42a9e90cd185720d21ef79948db3007602d7ea444f3de855f0577695a3c51310069a9a90165768fc39fb4993c2adc6cbbcded310e6942688a6673c112229e2994da597bf95628d35d209bf5122c69c89fc890d17e2c45885f626ede462e4200e41371ab9d0cb1b7ca2ae5549fcac0c894a32032d18bc381599f36d6b095853e230487f484a11c97b42dfe5cde06e8d071eea6e079dec6621f43e65ba071f0f49ba150d9ca396f17aad890ac9d85e10c6fc15d3e547b56bfc564670afec6a52dc9042b3f46916bb780b2a65ae15547995eda40cc59e7bb8fd75ac1ada18783c2e8d8e200775b18aa60ef2bf4d48a7286aebf784fca0493206b6c7f80e3c1f8365078b71e6aef00b2d46e8c45c1d9923ebfa44dd1d2b1d3ad2fb7eeb6c7661dbdc42c2dc3566ac9197df4c80e66689cebf4ddf93eb3fb47bd440dfeaf566b3f9d3ff21ea7c990a1278c54da9cae9a951effa296a088a8f3e786f9bb66b2440cdb158e40b128a9da2bfb5ba0d8a8068fc2d4703697f29706b5b44180af0cee437fde4920f11b7b2c859f48edabe7ddd25654c31f25d1e9b5cf5094b99eef094acc0c36462f12b9427e2e42d77f62d76ffe4d0638078ba2f1aa48b49dab89044506f4566ba6c38195475ef04c566e82cc9dec48ca2d7caa22ed017efae713a8f42ab5695fdccf06349fbcb4d74de1b7436e14134793be517697f85489ee5271938c98fbfc422b6a1ed8563a557b1976772890d80dc0563bff9d98abbcbf3b6b0976ffb0619fee049cd45afb7731e94e826ded59bb51cf85ecb793c15d840950ad1333c1993e210a109dd2e451594662adfbd9c9fb516e4983160751d3313ae61509d23d6ed91ccbcfe14a77cbc09ffa046789502318cd9fff5d04f96205f4fae57d79e2ca6cdc65471b4a9aa2a8108e0c97db20284afaf4cd5d712363a930e6e913b003d7084fefe708bbdd1516b1a5975171312d4c5f9fc454f58738e3d43932559d52449155441b196162ea128e54ce5fbb234f052b60f3500293db470cc8f35bc6d29eced0780a145a85a9025909147fc7d04aecb39ac0bf705e50ea4d3d3d4b3211a826d5689aa34ba0353d62785314354dadd245d50c78f0420c978ed8f1f58a1b72e6879348775e93f957cfa2d9f17f1d20e153e20941e40e3756684f16ff8eb21d3157c9787dafff02af38d786942c73c9bae1311f2e737736cd48871142ba8c8d40332fa83de69a807c7f5f6e3b7c9ab1e33e5a63efd9a8b4d4d44174e1bced41c187fefa6d6d7a734d98182c8d0724201e8ab72dc586d266b5151be3eb39d2f34c768ed55c428b36c7332e8dd2b0eade03b8383e328c9700a81b01e9f97efb82d4d18da50b8a14377a8d8d18d09ebc542cd8e077ec9d31ebf4088392d61140fcdc1b639f3acaffeabb7c2c4d58bbdf4e7334f985a68aa705a30a8e3b3482fe643c01cb04a7b33a55c5881d69b418c380dfd0874ec7e4324693d820e321d91d016f1139fa8e5a25e3c8167ac09196ba55772bf58995bd6e19f3461d125ee50da64a9e54c550edb9cd90b4317fb058ec044c453f21bd081e81e3db38fd129cae10838ffff094cff1c32e416b7a098fdb004b7f62e04a2db2c370d92e52e80b2704f2822a2f1ed1250ac66e1aee6bb2c8eb9e61e85d7e06a223d1df479f758221e9692b769c9cc7cf1b4e48e856109d6d87cec9e645f2be9f7b9a10ac4af71d62b5a9ca02607c882d9694d644b454ba5ff86104273ea2d2079e68ff72980b16e708c30b33d6868c6c0fb2c95b69171347e28d1f87e3fcde31d798de504b7a9e004e0f8678ee2ae0441f653c9f981937791a5d432ef6b8eae9e6b0900acdeb06c719ce73932e93b20857ea4b4bd591f497d6bfc879df4f5739fd504bcfe8fdac1310fd99d8e4d3a2a7597c4aaed8bf4338c721580e00360489656bd39cdcd9aac783d2b1d6a12b951992707eb933ceeab13ee22c360d5b04246491444ffe36edb97a57a413e9441d7554eb49784dbf118e1415eb3f87e98eac521901aa399a795de2bde438ac73a371acf38ec61faa15ce49e3e4e53c4b04fc5969319169055e0d30d46f678b31a418414b2aa2b40187e1e527c887a6c69c5dacc420f02aa1725b002a6ec9f426feaa33314514735a147bb4277987e6ca066c882e88fdb07670e1987cc7fc35297bb389c9a3038e39e81e43635af139709b73b2fdcfc178b822937f7632894f88704ee03fb669f8412ff05880c926ad9067e2038e9b8fc96f7d471476f1d10329ead8aadea3542069018ff72e6561fcf52388a63811982618d5fcb64223685b6b1739ce66bd5166de7c19630622d0405a99de8348c2febe1a8edeacf85b5d668bc5275816145ae8aec2fd45794d72eeb698baeba36c3708bf535107bc7155959aab3c08dba753778982c9f8b50d16af0011d56c327ebe7c111ea258f89f877b9dd7a4670357f1071b039c285a7b90899e232cd4752cbdb8f1decb34b5b1cffc40466859549d2206c67a4e7598350833449baffd037a281f0e85b1192b6e267628d62e0def4b0e32581d94c899acbbba36f1e4730a6d43f4425abb1eed267b6925e5b4e79f4e782c05df8ac644906ae83a4c262926c14caba07af29286191e2edb91f3607c33840eee39e2ca4d8c995235997dca38ffd66d3f9b875b8493fe14ef74af3f15316723654bb716847ebb5eac584dde3f0c955ea0cf86d84795ad09142889565b68bcb15cd1c99023fe0f3e5baffa9f335540ccf6ba039815a124868aeb6f8ae3139b7831149cccf62f18ec3e818f4984622dbd7bee2fec9cfa0cd741fb3d7349046afa97003d17a892bab9ae8e360ccb77e2420d934874e61ab3c9aa73906ed57b27f8832c9770df2bd789b5ac6a05b6eda41d37802336642dc33ad4236286c32dc3695f9608deda9fcbb1192c3ff5cd61e8ad246b3da68e3f6889f2029a8be4361b40faee1df6317827810e8efd79fffdac49b27e91e970a63afc943517a0d469514b26c272c1a5e46e4d464daab8814a34c88e2f21574258c9f6e5aa85d7a05a3be8f517b16ab559b655397e4f4221bc2948e6ec28dee385db059472b29b52969a85d002840107d73a7ac1c7736b90fde24e4d9949cf0ee2fbbd53e706f14546e9317346e4cc5f994682c60ef20c37fe2184cc20e3c22a5a12cadae5f5d008b3c7af165b0027a20bac941a3848b0634bb0eb257f8c9c8f01bd720d294c24a6c11f0b7ee3075b8cd9b6d2e0dfa5ba0beac832d5e87619ebc3fda8a8eac3dcb85621e8d322964103362f539bbee021c1b70e231e5392585fdcb08c3efe968970cd1d6fd721cde51ad2ce34b418ba56915db3d62865d6bc6415dc3a8557540fd9e7da6562a53543182c12d4218f40b21984eaf3ca9a4a1326d2ce6cc476e7506679e11a95e16c609c49cdec7c8a88aaf85d5a3bfbbfb147266ec84049300b147957232bdd4649858beca1313a9de5dad59465eb9db2e2fea806f757ea15ddd6e6e225d3f4f931148290e02147b490aade268dc7c646d02d565be69e0d7e582d0912799d6bf73ca25731e9057ce24617d419e4b51fbebe480574a4a23f82456007572bf7a47a42986a72170112bf6699b1d8cbf6828d787b1390a4f7f87fb664c08f7f2987c18a276b6678d55bc9854cbf5883420401ee2a62a6d94c39ca288a8086ca28f795a3cc6c68e6203d4d42f630204ced741289fd1afa5ec30da172bce2670a477a60e7463fe3469ff71113b45d83caad2456b6c8fbfd5273f9424321d78c37635c96dae1072dcdc715fd55f467bd0f8af3aa1e269c9e66ad723787ab6c8c76d2978880f784e9028fb504a0182d4d7d3ebd872388899776d1ebeb9cf3b9593ac5091ccfd103c1b26989104708208a8d246f4c233fa44782f9c73d06ed6d7071783e0c01b039ba9e6ada56c1752e4bfa0e6cb70435eddf2114dcfc652d6dadff5585fcd9143f4a1119f8e2943b7cc3286c011d99c3cba655b612de99d44a09f5c87cae7569754595c395bf95c51d9d6e9e3793c6464aa3a32dd3fccba31a02924b4d541282ff65126ed92c53a39a9af1d9efff841b02115249d94ee825dd3685b256467f93f8bf556eb4d74f7f40585800db9b01dd17df231f3f1d30ec60f48da53a176ea8ec13914d857cab81d00ae7beb2996fead02522837b5373e55d7b3ec9a203ec9456769a2470f9c68f578ee3c6d0010a50f5970cfe5d211ebe8fec71d92733b6a32062b2399e212d76afe06bd9a1c7518fed0ba7094518eca729bd4b7a0c2add69849fab1853cac5530f2e096c80249ff5a0bca2ab0518ace574505a93b78343a5f112a46cfb1190c5f2b08ec945a518fa9d5e5d0341e5ab497f9584d0cc91c5cf04d4cbda7c97721224b15ab168d37886be978fc52758951ea4fc010357171a86ef9dc37e99e0ee5630f43320a8427c6372f43b5ab89531d9a6d3cd8c0478f4f2fa445d8ff04c98f21c43c78fc8cf5d6fadee85aed366f9a05dfa71953b6f2e3c219d8b2257e8c9bf85260f0d91ac9cf6cf3871428a38e7c13887ed50883f694d6d2956137aa5839af40c9989b9b43b2d64a599911c01d8a604e5e3e7314b581453741cac847489e8fbef37dce4a17ef2234fa4bcfca106806ff19755a8c346b114e8715d98cdea8db50381df2772bf0f6e4fa7434f07dbc2e260c2768eac32b4c7b7531bad5ff88d10ae6c9736e2fc6998824af6d42c3791ef921d113bfb03e445a0dee1255da6396213e2715ab49f7a99351b54d14087299796747ebb4869c44cbab212c768905972a98ffe5c9d1bb1d69f6abedfeb3593633d78f158d42fb84830ecc50610dd6b0794a09fe2870fa70f266cd0c2b91b16166ed7f03d194a8f9782e3297da91dd03d2b1c05ebfe16cde5a3e5af414501fa0b16e08b11062602b35043507d8e89bd8fb845440789f9d067f0319d902ac21548389685bac577b35b5da69bbd5aa545b64236920bf198157db628573aad80b9422effdf0230541265b8e0a5ad38941b8ad2f96255154c7397e8366d76a29601e94144c4f8b82b4953cb00cb619e54c49f0ef6adb65fd7bf962bad7c911232c3c25872d355308c9b4f01076f90fb0cbb209da14b3cadc20cc60cb4fb1c56f4f8b0abf584e8fce2e3248f972b51752697a304e2657fdea045ae5a1cb744cb6f1ca0bd788c4a2cb13516cc826d070fd976e1a170b39b2c6873fbabc196765d6cb0d699cb61d33a625db6b0b06e9aa4a14a82d7fa8b1ce3e66cb7030318a73e0aee5fc204545bc6cdb58b1af45b44b1d5550f9f725699f4f4725a483fe08b69d07dc54a9b94677fbbeef456200e67c0d0e64c0aef52e49422d221ec7e7f2967a66852427a0eb59edccbd1104d29852d0ba2409e73e54ade9d3d7aa7b4858cb3a601e5b1a28eda4a1989896edf9772b27f84e5c9aae4ebf60f7b2dc6a4aff7453056c45b08070d31ed574fac03b2ecab9e1472c2df77a33dc3c06ccfd43fd9a054a2b68f2ace705c5b190952215b66a8a58b44811099c79ce54d31be4048900b976efd17a90a8ebcc68bb4aca4e13e205e08930f27cd7485d04f4fff5816f8eed0093001e886ba804658f74c337ef2bbf0cea32f6f94635ab5bf98f2086301b25334ca0ae4057d0d94fc7ed2e12682a2c0e17bff728da57526df519612797c1358564ba8584462b7ee222134b9ba990613a9de4804a9cc8ecef300d10d8b563a186607ed8d774249f4e8f15e573fd213e77a02ca019a4ccb2617f2640dc14abee72c9e2405d54d909b0061ca15a1791bbee5012ee1904a25800eba462489897c2e14b6db961364c66807904e81ab9a1a15eb874809f67050ed1360a288a8171d69c5d3a0b87727f90145dcf1e7d9a73ad8b01573ee00f4bcc9c4294f458f559c36774a9c9f2b9b7fc93fd175d71076b1dcf35e26d4ce404e1d75659b9a2e66753fb07568a8f48e73813ce56445d515d53b011455ef6cf4fbf75b04145d090b92a1382cced1ce4f3c2fc98491fd8bb711e44cd00877e368fb5edd08b9b8e985652005a009f733f0e8296fa99bd68fa6d3f684c6f3c0ae9743394e9321809789f386ee7aaba80e1e62a00515848b963e3b1d0d6a4e81f6b322cfe06c68100ea752672b8a93f612cf43473b76a405d8c4423860802894d26e9dbf35489f81f39b37a458f530c5d792523e0ea3f9a60de0f8bca4a62fd0e210cefdecca6d207c6ebd61d0331f9e9cab27d03ff2f3da235fdf764ea0b1e2f0476b84ac4163cf19e95868c17c68a57d80782839c3e1cece75c58fc2ce1899e6519ac96a92c9ec0d772ac3ae2ba0889497f94f8414e64a7f626a51b89029f003a1fd2a3330f52309e9e4670dbd9f53cd839cc1e23f097aa0641e8008c6150faf7b61b2cea2e09a54d9271a6605bf3d016412b4e0037a76b31311cdb2725e8e96593d8627d497f1440aece6e1701c86d34512db9f51fb11ff36f5cefc060c2ef8aaf4df88c4ec4dc46dde056fc162e045f94b98a1c1eea3f405d64bb5b894d6fcb39c1b81d14a321d5625384fc167e936545876013dde3dd0b3e4d0fdd4f17b5269e76f90d249a831474b27dffa1437dfd39d9b0fc97acb06c90d6ceade9fe96b185b46edf93a5a648291633b00ef94acc4e3878e2fcc18391e5fab8ada21170b2fee437f9e320632351629e3d383671cb282026e87492456cb362de0d50d6af472f4500110bfc664e38eaec554f295fa091456ab5e8cbe8c02d1b7fc79a349e785218ae27592269b241204bfdefd08e2b5f18269e74c883493ca07b56d00a884859d2b4dff09240618fa1e49aa3e0e6b102cb4a9768b07e015a5a5d4100ab9b07cacd040cf3215bb386a9ecb08dc4d4bc04c50f08923873ef4c7bbaaa773f573b2377be4609cea6d40e5881c84da66a90ca59b530680f22a29818142f4d64ce432f2bf0ad0498260363165ef71612f9ea03c37aec05deff2cb4aff463506f5e6fd56fd5fb030e5d0498568c9d2e92bec652a3c4413f93e982f9f4643ae959a669f26809c36d89bcb2ff21a4f4d40541254a2cc230b8de52e4b20b872dd81d2d43f052f150511600ef960556f97b4e5b277e36ba6f8261be1acf2c4bf0facd5d5e8d2deccf6be7d45b9a86fa7d233325f61c2689752fb572f20cc1dfe64b2878c2df7b4d6d7e43411f65d72dbc54b983f87797968b2bbdc75ccbff64f0edc45e1572c663cf44d6342d8dcc6b3f5f365039bbd8b86f1870c53b03da4602ebfcd0fde53abb0cd65e6b22fd1d755761cb8738a1986d1eeace582bcb02067adbef851fef6ac4319e694fc98c3c199ea4e08c1fcdc8ae5a169c3739c2064ccc785810f9a137e2b3ce6655f7c2d5cf965a4ddd02533a31f98b2c4156f7fe6395e9969872428a5dd110bc17c0378d052a381d834c3732ef487d78d0d9c15d439d873ab73f44192f066e78ef6dc0406f89daa46c058116fce3b1237d64ee19f081372145f9f37ae3e9e0bb51a51ab4cd6d1b9ab936693a97ca83058de97ffbc3c142f5832bc0160efc5a5896bbd6aaa26ae091c79a7c600474f6286ab0e7f550e4b342dcadf6767fbc76acbcd9d90a825648210e88a37e9aca3ada20ca37bcc7c65264a017d14f02c06678383660a9905ae192bff4473dc95fe3797f4842f4f0767c036060b3004e7d34dd5b2c08f04851b39eba3d4e1fd97dc7e33e1f43b23c095e71595edd268fd4edd4ad73617ea13b14a29addf187e08914d5dc555d034c2682a64e80ae058353ef5cf38a636403c97964d212ab38f2678d9eb7005eb2594e83136e11c1d2e7a8b4a30bbaf80a5d7ef9a0bcf80dd4572b88cc74a490c5dd2cf1fd9c898943934968b7964f1655f93f238b1a52c62f6d9046b2ceea2d9ce6ed6ba0fa1ce2bc52cc5b05945017d5f236476fc5542ac2e042a2f02182580d8640937f52c27aa9516192d238440f9cb0793b909e3539d00f0c24f107a73b9400afd44555f80376bed30b66c706e3c981dfd9abe42291572157c14b98321ea9abb3020c7ebbf63dbdd5aae225b69015dbc7dcdd3d26d3451a83f281c2c7d4b1149c3aa9ec5e67190c6d562e8e8c19e114c77e97f7dc891d86cfeb8132b6e7771189d98f400cdb0eb17318eb8fa5d521da90c3a501a4e5ce71c763fe807c2352aad97fa5be38b9833acb52f7d0b46686f3ff336c9dbc1be609842ccf472175aaf4cdd6688ec8a4a086cf16843e186d56c435e7b788ec853deb8bd0e6d9792da835adc6e0f73484e576cbdc7dcdeb8f910e06e5a76190c504f49de78e0c91e2cf34573522c7cc8143433348a309d6d0aaa8ab2baaaf137b440afb0709ac9c3d54068ab665a7279cd0be90be093ffbc2274345b80e0c2aeb7f5edad67adc6086854b5d1c1f9bda04fbc06930f17131fcaaae4c6cfca942d6a12aa43bb016648e5cdeac4b6285ade8bfafcca7b3d66b82506ac91e4b46b84c1d360e5d109d73a0eb77ff7cb07a71a131ba93d837b980264639e17b0f7078cfed9ea87080cd44f45a0bdccb7d2090bd37f1504b3541ec89f9edd743e9ba5d790969bd71edb61a417f6362239ad819aaf6b45cfecb6dbd603b304c5afe0cdaf591ddb84d5bedbfb4e939cfa67cefcd8f92cdd818b45184814fd15bd6727f94ace8a23aa6eed0b688b9209cf035f1063c9034e94cc274486338972e43236e4dc139fdfdd0c1069fc9db73cbe9e1088bac87fbb68dbc16ac152779c086ef3ccb8a15436ec05e11e909616cd22835dd2c3cae54dac4b171ffb0b1dcf683db7d1e30c92e4debf21f8d92b10a8e092a7d1c23f586b75cf131733512e6734f13414ba623d4295d479122ba49b8e579858526d48cbc1ef35ca5bcc67bf5738d47903e829aa8b1ddb54de768a187d12b360685a9a54676139adc58cd17a6fdcd757c7845f9523df2917e7f97a0234b1232dd74c8344b1be7d9f7a38e6c8e447f1554da1231e80470aebac2ba1b1e2d94e15cba310d2e3c35f42063a28338bdf2c16ca240d649f37cef5f4d800d63b429446b835b491ac4b7d03f2eb755d28b41e75b2e37f1114acd7433d8ff2c890aa96052e467b987c74940e7b56a6bdf923f8e8d3267a5ad9233b0850712f2dce1e209cb61785b18d34e0b1f8b4009a55f3607b19ac9f39e46299e876d8fe885294dba337eb452fed21bafc1011837102ebf167a0e557085ac0473e503b964a5510d3459d26285a35fc118ab7433ecc8efbef6074bb9d2688af6c690c839d20b60491ab3c118ed1fb0c681395307dc815220bbf2e7b2226ba61e755b9d661db710193afccdcc0f049b5a8366d7b6e7adaf4777ec371788f9239ec31dd27423bb8105b017c8d2d53fafda8361c7ef5a83bbab68b48421fbe87e52141c8b97fe69face1599beedbfd8b780f01fa7850b425e4d9aee7a0f5cdf1d0baa8c3738b86e987e49aa05591ef6ea83fb82db43bc1a521bebeb4627bfe488ce7815d56309e95ce9a4e13bfb1b064963c8721e52710419a7b6d30a33d440eefbe7948693eb568c26fe32cab13b6ad3c32c79ec979edfa333a076b59bf7334cc7c591bf302913ac0225c406092e0af8e7dc794a6c2b4937040f35d6e4ff9d2f078695e6a052e539361c55f872de23dfd36366415aa91ba447a7ba1124f8337ffd732a290fc9545f1a84defa9d23cc72e2e956ea5df1d653675b6c0c26ae3e621a16bd47e36f233b7aaecc48614df71c0951c96950eb0eb289c6afdc4a9e64561d2fca7e1e628a0239ec51e969275eaee6942ed2c0d0f633efffc5e898157ef9945c424e6e85e0c4fc6b0ee12395759603b8b0fdd6f127e61dff25051583822a8b12ef38a31ffd5747061b400d47c8ff52d7f2172aeb1e9a865e082102e511faa492e20b6f677e36aec52de99dfe93254591dd5b56ead1aa062540b0ea862d6c55213f3cecda94ec333cf49e87b6dd54895bcf46d4deb7e24e9740be102095899e215ea579cad012e08b8f5a55deb049e705bf186a9a5b5152bbeb0ec44c5d74bf3d855ab7c22190004bd10708342293285cf762329b93532dcbefa8f12f5b2173ac26d3c26485568f7601c08dd36df4da837ca94e51310ef1c2219e757271e1238fc94e5383ec29f2a39e56f13c328c0dd6023759aeb1dc976eb8d1c0347ac81ff70cdb574258f18d040be82c6f9d79e15019762e7990f1b4446c7af6a47ab719fec59b86dc89bd5a2dc0abb748f2269db26068708427996f5331ff54d5b01c75900c513a855f6a1217f33f6b14b599193538cfc2858736fc1f8825b61fff1a2b334bbe56b2cc7ccb002e176922ea2a35a81adbda4149b19972a9bd3047484a1d802040b9e608899abc5992771e2c0b33a8d6ede8781af7bd02c8b10420604f2faf7baa474d2b4665d7a778bfd50bb62763dcee035e8a4c4c23c25ef67f1a4f52a879ef22b4afa522228d2efbef0369990b70b676f6ecf2fed58f75f7654994e969c5d78e4e9cb361e4b0a15054571a4537b98ed4d46176cb715a71a858be41e0741d2ea12df02a53e0ff54436b33f8868bdd3c81b667f19749b30e1e8eba8dadd53d7a7604592224d8b2c16a9e100684d0cf475d9fd143150e8ef7e781917220ed5acacc806981eee4fd4e4ee4187fc16b1e0862f7cc172086840ea5d7be2641edac4381e89aecfdd2c155808adfb2a60d338ff40f47ecce22a22d9a0a021d90a2ea8b47b3b2833c4011df296ee1e972b9f169fe244015deafda1b12c8b1c8852e8257975dda3a458aea03c4d582bd69cc6239608398958a1de58657bd76e17f18055bf328d8a07ba5fb9e583e77c73debc73c395b160e0e6ea4af1f66e9d8515133636365eb202bbfb3c549f881fcd398ca314a26235ba3f8fcf8d067c7773eec2794814d8cd076db8784d2e279307344d30bb9e3095af94586faa5e5cb364d5201e8563fbad072bfbcc8c8b81a1053d69f796ae60cc6c2d64df554978eecb11b2982f8b8d8e0ea6787b4f81c33679bd5376d2bfa770abd7f31e6b59deb86bed5e0247714745194520a2de6251187f1fe86f8232849ce877b8d37eeff66a09e4fb29688d005f7478f93471dc22a15082630abc80336c3e3a61a36459635e2e683e6a341e8fcc621fa9edaeb3ff891f04695d0a109792181ba72cda661abbeaa7ec68d156025790065c5760aa6edb4fef43158fe2fbcab8dff466dec33b7b44508eded09d146002537b4beb404ab8532646b1b75f9c957fc9345fce74dc6819374555f55f0bb9d6a2b8174f0078976757af84d0ee24535ed9348ff96733c02e60854a41980947ed94f1c849995d52d1c895c00b6022c8ab51058cd8d14fef5ebb04f00060549e6bd25546ad15d02e5732a57ed66ee2874e8c3d069dd15e580b1823fcb56b8a9667811fdbd24a1ff7d86a167d4badd40c79c6882a9a024fda30cf2174e32bb7fc24e1501212b8e9fa4f067d969b98b557ec647776176f342b67e1f9527e5b0bdd203dfb16c2481e9f32bb618e99d90ffb65729f3828b5359bd64370cfb069408533693a23fd2563f59677c250f49fb3ce58e253dbaf546d88468d4040db375b1ee3321ef1b344638a945fbdd3334830985f637c9da1fac3e9a6e21b99a15a28bf82da611342e3fcac2ea0ee73612b1cf4cae7a6dcceba957608cb7e719264508da525994eec6235cb1d970d32e800c8978391acea832e54f300c4b868853da2dcde0e0cd3fc520492e2e2214bd264eb6511cedbfe9dadd77f87a572918786421cc7562d6cd7bee5f381f59e539812af442476e987938111e1908d65697f30c379ed913abdbc6b5dd112cc021027ceb8768c87d658466cfaa1f8eac83cc1b4ce45056670c811059d7952c4bb84127587f0cd2df323df8e42b9aa0e571c4ffe69073f5cb6211b5450208ed323c7966867e64b2d672f71ab00cc7d8becb131705a636bb4324a74225b8d59ac014309e2be73ba4b7d5af210041c5e34cf6930e400123f7735e826f8d6a496a1c1c4b978f8aad9c5de16f369f30f5546a61a2456b3b3a7b3bbc528054898cd1601e0ef28116b9576649c57490ecf02ab828744dc427eac9c6e6c13aba6cf827a7ddffc9073a48925d6f87207605d9607540effb3d9745dfe3cd7a64503138b081c1521f00d93ff0139cdba3668f121c9d4e580ac88a062a74f135015cd953ddbc22a4389b1a69a2970f2d0f7d483eed836963b181fd2f67e10450c2ea6edf31392d9e5adc55db30027f52b4fffabdf79e51944650565ae0390be322088915bd3b6bb40b292eb1d2892530975afad34bc5217735c9305b59f7b44e46ef152ebb94354e0aedfe6185e659ed35d20eb32e57415dfbeab9b4bc0b629cdc735fbf5772af5210908e039ea503917266ab4960eee750205472138b2bb206fb27ac87727e9f3575cf80fa2d258525ee732f1e930cf779c0fdead7ae552fca9943b7f02c4d0cd5ff48574dd0ff70c02c11e45b203073883efd3b685018ad4c5070e5d2a107d34085f7e1b41a5d653c9d61dabc0c736e3ff521351fd2ef367671af6524d3d09ec5ac70dc3bb23c6a457f0c369f52b0b5aae5bd9e1a7e86e8cfd6f1b8c90700ed4e49afde5f46fac290ca02a406119bc588b41fbd6b4ba3e858c185e1fc0ca602ad7fde6b6d9da3173a8f0755871725b08c8927b75ce1491da408e1171d1998c1914e11b6375b902b40b2d8da0435c5d3e895af58a9d54511b942835b008b18cf8967a51eb9bd6b5d97733c39c26bdd29559eddea53b072278690c8ce0e2258feb6f3dd9ab93748898c7ffcacd28a7b1a8da890201dd8b05dd3a0b5055bdee395f906fb00d33c8363a3426a361c2cc5c4b967b63ca2baab2bb916952ea8503ce74c953c7680aa9f47b2fd233ffec82e23703f4324a2fde8dcae2215c51bb9c73c0a0f200450cff0b66cef4c7e15b99ed07f0fb6b243f5d6a84f47af603fa9eb0cb4bc5f13daf6550a5cb5336711440d6286a9ab19a42bcc4117675274a6bda7fb5966e4dceda55d7b6cd69eb3e62f8591b4d7c9f13855d7b839adce1289aec43771041c4330aff3e9363ae61f6160ec20887e7c6e312928d60cc2a5e41175211ef76e8ec3dee3ac7960498d9f7245ef8478a0b22add7eb4f23a6988551a154b3dda95182eeab9a03399aaa48c93692988ecb2eca8fccf9033ae6da24cebee2119ffdc1474d30621e55ce65844baa02be7ab18ec6bc736d12c017acd60839240eb98087728665e2a6ac9056c71a95fef8f09bd2fc1d88d7dd59a44d52e99caf88a08adc2dabfb02ba87c25abe29bbc750adc1a60918dfa69b4b602bb9c7e37482559590abe42bc5de1cb44f8604a58852016cb64c8c0e36c1cd54ec6f4e0e76bb25cebca5f3fc862d51d4801761df9c42f4e51e4cbe5ee2c7500abae8f61bf54202131481a6eb4b04259c46366e3cb2dc7d3832b7eab1331055183e2e2d843ca655e43eb1191a8645a84e1f434a7c2749bdeecbfd1d5d512410f0e88833e389c1f557e050f022ee3de2062872c14838e84b6ea3d50e555aed2aae60710ea34f6fb3d8d21363db03d75a8a3e8dfdc6addc64db8a0dac6878c21a13a63e1a3e4381dca5b35feb9c4193220270178e79d5b9a7637b727e8d662dedc08f5cbcfcd40ac5d1a2caae3b668f8fd1817e9aea13a4e5bc3192bd8e3eb59d508f20cd660255f97dce3e0b342736a54a66c8fffc4f560e150314ad19257f971151f47a169d519396c85ed3288546c63e60dbd77075e35e75945a49e8d83d30e5ef99f559c8dbf6d61cc1c8bc14a60daca3641621085265651666b042a46012e771b960699ea01cce290c52017190458b46a339ac4d9509abc1edaa58bdd667e882cd447cf7b0315a6c1d32f7c36a0e271c1336d2a08f553e2ddc6dc3772dec233acee8199b9cd6f78e3b064b69f895ddbc4d0cdd21f3d0ae22a9e40f2a233ff8893ad5ba4086db87507f410c32a454ee6ca978bfb400fb345f5bb16c635ebb73874d2fff27793a413939db70caa36738445bc108db69a03cf5db2d9f19db5a9a095b6f9d4ea30232e5e8811b4fa6fbe16a0795753473ec8b8dcef4e2a198c2b328b8b0afc7df531fe5c55c0ebf405d7344f9d4ce18e4bb9d468462b35bcdfbdc5d5986f1fe0dcb7e52fbb3bd1aa258b3fed8e4fb8d681f49b7932e33a14847974732091a0c4c9a524b8312ce00c4108433e88a373efd80de2df6986f3f5d1850be8135b618069970e73e581cc43b7f07d684df2bfebbe9b7f9de83b80c2e4d3d46dbcb3354ad5a965c1630bf2c2bb431345b5c3d722f762ba50d4af7db55ecf20272403b1df3ec5aad88caa785d4971d6c13a446241b15195b24e997137785b199b203e1f12d410dda753dc38aa0252e8eaac2b8e8fc51257ae40726c674b675e62d7d2ed0db3f1c045c2011867adb9b18a33fda224bc10ceab65059f8a6c241ac32067fb8a9582775c07271f2090a7c0bfa7c59aebb8af2864c3614e0498b50861035a9972c24ab2c1ab50f83dc1cf3013fde85021c5b85e7f8820b203c580660f66e067b09746e181b9a88aaecff647a8011c2a69b5fb1869ef7dbabe720b305abb40f1131f75c42009f40d202351d80e9a6cd0704d3c6131503ad01e8bde0d476d821b5d757d156ff83680527bf8fc1391d50775073db3f91dc9c42afb36ba186cf7d30898f8dfd8ebdb587a014e3e21c900d18c74e03d87d4216bfdcf9126c697f8688a64e90541ce43486dba3b5e6f53b08abee7f2931186e9916f72c8eafe4a4e5fa5a0b9163cb607ae677c024c5a9f725da6d7621017bb6982dfc896b95951a13f1f988d81f569f081b20c23d0eff205defbea9df23c0fedfb6b2d7398eb8025cd58dd52f50d2460ba1d6543148c8411dfe361ba203266a02e0ae44b9bfd5a6f531327bc3b4c8954019c6a58ad2883cf43a3139b3ef9a17af4b51d098a128f8b929c2e53c65d79634b66d8bac3f4704473fe4100c78957e771a1671f962594883593bf96d2413fb3b96c80e834ea48fd8d6621ff05f126298a1fa3fcb145ba2a1b079a248eecc3406fc5016e71ad7e65ff6f2b4e626ce0e86e52bac1384f6bbbe9b9b0b585d1fdf13d7dc08b7f4366cfdbfe96a6974e7f1321a4e671c62df758f074bce7db3cd25df90afa2e1de5977a530043dcb5a81c91011fab2fd693a96e7f9b6eb3658184e3852be4dd2463b8f465a1670b98b4483dcf1f48b990dc6be98bdb19558b7db151a3aa267e3b5922aff0dfe9c916a27079afafd82db3b3fe37d41e8771db683858e2e4f0bf0943fef07c124ac17ddaa2286cabb5bd6643b8e92a1d24670ad356c746728dffbc5be8de78998d353f04941eaf946d05b4ea82f296c13d3eaa1badfd5a972920291e0b3241a4f6d4cedf0f8a68de72e34de00824484e03046494d6a8649d08fd8ebaa94eeb442345469ab5a7502c2cb76373720d769220b5f1a13083b9365fb4919cd44d64bf0e473e8513cbfe354bb1dfa8c1d69b5b981c0c3e36d9c5fcaada7dfc89db68e47ee04cf312107b8c1014f0ab0a81ff32c914f8bdf1226cd33d31a630f1613559a33b699a848436e3494838ee9273c49ba1d382f17bdb936b58d67a18bfb6e83bec9c139a977fb8e8d829109c8f8f20a6cd8bbc8b74e73fb1e37d122877fdd7b235d2c43d5cbda58119c707ae1f0c250d7fc9b0359e45fd2553b9952cc15c02334d1d01b9e2ccec6f18253f9c4d3ecaa799758f0a9cd266a52b7812290d3ef4b9b53e9deebf27b2a7ad7b2c691be0d8fe49bc9e3cd7fa7db3bda7239ab4345c049c4cc43ffa2c8d175e2284f289e8489e5ce7a53dda779be3ce25a6cdac29c9b4716c0a22363f504952147a2863e0fb7da7521a457885c66660a3bc7293aa764fbe63ded5b8e78522e2f8f1226d18b9e429e0cc7666616e03918a261eaaf259ff90084faecf6b0e4378d815c5f23e9530512c21ade52a398fd503943db268061a2af0bc2aa50906dcf6f1021733d2dfefbd0431db835474d985622f9711b2c41bb75b4c5a2dbe66251526e8d8780ebbb5ccfd831e795a0ca12dd3ce43a76f8a74d33751d1b544b4f9f240be7f6baaea7d673da8502f9b87dda6a1b33f49ae5ce5dab6357fd61212c8f385018a9e44f36d61e495cf3820b325bb1948685674559c446e1ee682dc6866f246868481e254034b765eacbd0e0eda31f3328ba879e50abeccf899a236374a5f83a19d3f7caf4f5ef264d928e05902ee6b0e827b8f2e63ad7fc0918afd739b0ba4a56fca9684747726a5d8e0c299da48769c61af2fd47fade95c22aa492738c94891433a714f56e760243dbfac893611dc2a912f91c118e76168f06a5349984c01ea8ff458a1f8c881100e3cf241ee6b1482bc55ce240fba5ab2ae06ac9fa82412f406a3f49ab9ef33fff7334980a27fed2fc017cd31ff76ce407b8fa313802169cae599c64bddca46660f8b3c27fa0b4e407c50bf93329963d3039ac2bbb759d44887ca07dfa22a34c39989c94590f9e5eadc37725de9d0d8b6863926150f84a61b4175925b2927bd464cf05aaf7e5992b0af25dead653840582fbb041fc6e155cd6af599442e3c15450c62f9ee48a3c552c5a64d82edb4b0900596ec5880abaee36bdb3dae81710c960716d56b68aa0b1a9757befd4d89690b7a2882cfa37bbee2989546d922b86fb84e662fcb655c55228bf0a90d319e361557216148eb92f4409710da89494c7d6559644d4388df292214c4019a657553314d468735717aa20845ec229f4985c898af5ded5a08650335dcfd9315cae110d04226e432a7c232ff0071bd4493b8aeed81e849d64acaeb424a92afbb50e260ed96194950fd83e52349f107782b98c684b00bdc7bd2cbb4d3c35521fd15b9ae67f7e4b8cc99fac0fd1a420c7dfb5530061f1be6819c3bb48ffa18b3c62d59a119d377f5d03cc7e7006734d509a23d4d031c510dba48e31d8d3b910aa4d2bbbc60adcb8e4c04d631e6b986447c13875199744d32df0e8e91a816692869113eca59e251a865b8520713a53b20f121d8f15766513949d40732d98ec2c49068ddd2c811fb59ad64cbea50cb1016caecafafa10425ecb57774f379efe025c0ff6fc24a62cd7cc34b1b2811ffc6f7b1ab085ccb802f7a3cc73fa52900c69623a220eeed7e9c4d381964af071a2b33af119fc2e34729cc77bd3ab1fe3a3d73708ed8b43d9a92d70a74abb0279c3beb27404ef78746689fe92b56d1a50ed8c26b2f1bad8769a370d343d2d03a425a9c1669842aa727d8d4d70f0dd35a8fc1dcafb7ed6f56e9e5cd4971f1fa0b1af53383971e534ea6971c624a875a5e14c6ad01c9a7b818f1ad4e2f4301fbaea6499074bd80cac4f24ed26064cbf3eb02b8b7ac4a3dcef64ddfec6c36b2cd36201e41f3972a26b382a755808807eabed2fb7402d057f6cdd7527e3131b42b25ae3490e82b48caf980fb4f461f22d61ba5d5ae2084267c97f60c5e2067e0260d41684d9b547268124681f04ed985a2d5d853ddaca3e080e868b65bbd6084d6b2ff1dbce8a6399cf9927864fc75c61744c7e21d8011eb0bd98f7ec3d19903305fff4d77055ff4c79c74298e2cebefe7167fedbb55cc8912cce09909e503f69b8f9f0f0c726fbf1f5fbd51a07ae7d5ced5c102f73c79c893f9d2cd98c1a45f5576d4e56dad1daaffd14fad1d9bb89cd8fab1fd1f7feaac6228a7cbde1c89029b4c0fef3fad9543a05ab4dfc2b36d2b78409fb6d1a87c5cb55abcac2a5c4267cf273f97aa0222a7958ce71725de8231116d8f86f3e8de40cdd828115d7276febe95db8b4852d8fbe977d18b3cca99eebac76f035b9f856dca246cea3194dcd81846cd7a51633f4f94c5539689967f906c851a78d150c3b6a385ad887f7f9027820168b47106e9024a032c0e1f12ea0cf33ad5615c7141f5417ad7e1376dd55fda0324e8af1d08296f94e1b1f2134c72956785eea9a8b15f3e2505ddf883a9d4fb1bf1ea6ca613339938bf67426bfb0568dd29000336d4b8588c6ec43e88348dfa1244c7078f19c759f4b48d19d9ced4d8a0512d8ca9b57cfe29a74dcd4a1eb8383265990c7917a058ca2ad3edb9917b6dd3471c219d3d2beb766ab923c93481b3f0b7ff9d6148196c7f3bae93eb893920f58cd79d65c67894b4ffd10e49a93b2951a718175f50e56eecf1e74ae8c9cc1f35d1e402b85d37944cf563befdb07dbb472a5d6d68e0a9b82bcd7a7f696380e6fc67e91ac2baef096fadf761ec1f03cf80960c55001bacf41b46acd69507dc03e83d9fe1151337e735b4c595374f371d40cecb683f5a8b7aa31a112e1289559db51a16a16e98446b548fd329578408e126a2cd416bbb7a8a557444e7810983924c1bff34fd377b820ca73e3e68e1469f37314e87d8701172ba8075aa62d27b427f50bc9d62861eb781a09bb254e23b75a308545aaa4bd33f7200e62d59152deff24730339c519507cc3dd78cf9d417612815de7907efd3441a7b3d1db7777c47d47bacea49b7b3f9477160b7c1279325a663fd343a26cdcfc1c8ccd9dc991c81c41fd19a074a03cc5a13fe7d2fff9552988eba0d424cd95ee1bd389715888004a27ad137cdb0ab0efc97c2ef6481aee6542a8fa2ee92f9eff63b7637c92a7c131862c5f9b483f1f319388aa5661b736efc53a989c02b4dbc2e1383d7433d6fb908c337a55c22ec6b786d7708bb213b331cb080048cae558b23ace68ddbf82b4ab53d51daf00c6f84b694db924ed002627a2ab6ba2d1d622f13a6b72dcdd62a34c797089757ced140653284cf9e81e22b63b96382b4525908230d68478ea547513206b722aff079ec9013b1131969b3a29744ab511586d097033acad2cb4b53c5708bab94a77c84bfc4198b6606b594a4fddac8b1ddf23d5777d0c631cab10bff48132d3dd0ff680a57ce0552a9e513b86291fc0cfa69529c3c31f11451d90b2af88704583ca18ef7ab2283978439eb5caf32935cfc215be5a3686886961683f6bd5ae586eeee48a46bf00c4607fe6f7f34cbf69f432350bbdb45810fd5127559cda2d151161efb09e590ff5d6ee1b5f0d703fbd8f74f7ed0e037d69e6d06cf997403d92e85d8396fdbbd3b1b3531aebbd823a27a5cb3275a757e46d46eec7b263a248f33c814cb4a359ff2ff48d4bd09aaf0fa3b71035bda0121850fe12e90bc74400e0f03609af5dddfcb02bb9f27a1c3d86b0553e280e6f95498c53b600a31e8395aae682af30896797b1df22477aa2354284d20d914ab0c6314d9324cc1c862c224b521ef1b2d99fdac251d843f56ae1d8c137abd88babe4eeba347825aa8582d0296a3745682a381e6b4fb880ae3f6682685f3a99333717ac47203f98cbb251f5c7150fc4a0981f259589fb6c1175989314a71a316628053738d050ad10fe7423332702d90e95cb194876459a918bccd509f91a5dd1a4952fdd728cd8ca46bc5bc64bda2d89e0aff4af77475c772229686749675385198f7944ad7200dbf779786360e2fe5a5992ae8702369e4ec0a77d4c7d9fb9906f7512c0ece802d97dec22b838b9fbcb7a12a39632e58e8d7d5dca106c85994f13bb9b08ad2518a17af31ebb8ebffb62618e26f620025bcb2dc1367b4cada0c7810ba1576d958e470e04072fd0d4233db8b977b61d4291d6ae6a4aef93b680d41c6a778ee5d29f884bc2e8165f79b0e89be1de8a5046753c83cc14a0a494f0f52bc2a5168b5abd6ca70737098dc16b57287f530b08dc0322e28cf2df8bac4c217dfc96b3cb4c7c5fad31292d9b52b76ba27c835b6125767516642aea084dafbf49de9ebab4bdf6bef5eb48d5f9923915851086b3548b269dab983afde550d263afd46d0a741c8f836ad972ef08b5dc9c550b19f7c2d8e7ae32e4b14ff3700345c8e4c02d7616c1ca5ce2f3ea42031d74e495221539fc562320db15faef7764ef9863e4a557144c3aba7960d2dd801b2c18b5a678c77feb4a09a21f647ccf92e0a3591c6359fcf9a5474c5016881a986775123a4c21ba6be53c5b25340a5ea7e2a79ce63cd4d1069425b172f04980dd16df9f5fec6315dd4b217ea4a43748fedb6859afafc37e7527e2ea3684adaad89dbbbbd8b2832d2d2519fbe9e42ad379af8b486323ed39a650a970d6d745196661e73ce532d7aadf2d9fae9bfd9026a9bb0d0cc98bcd28d97bd4f7df6c0230aa1575925ee8dcdfb94febf074f37f56cc0589e5ebf2f5ca639025312c0a913e6dfedbb0efca5c27de5c0ad8f8bceed2bc172a55fcce7c4d868a2d8dd2e76465078cc6669d40d095313b1d9e117e6ef44b4f9db16dff43b842cb0aceaa6ebe73b4c3eb7809be04818b5e4e03789e7fbe1f0549fa6e1a75944853b6c6ac3895312e66351c6b86b6e57786953bdc89fc288289ed7523c8dc92e65e0c0dc764e7dc78c93b1afbb86e3ff66d8c62af2bc67082f9da2775bd731dac77cba91ed76a81101a6fe893bee02ab4e8d16eeb0b3b670fd0a78b773de82f3629b8520319154dd897b8d0c6c922a7bbc3429669d37b9a6b5b1a50a092d25b39bb3157eca6e9bede279369195ff096e795b44885ab3a9b29c183de6a6925b79c9b14b3f9a4b75f9878cc073e764a4d1e039b529122954112b96f07ff335000a08cbdc78435d6618cd989569ba28d02f8a114a58f161fa52449f836c52918493358226d94cb89d765bdd4c2ba6ec642c25f09d132ed7b425f26bb7f4ed3f7000f568942fb4eb06564ee8d2fbf582b4cdf4e743fa3293ce5785820ceb1df939b3638c7d6054cf15d7230b6d86491b6a89e6ca768bf8e1a7fc32881e45774619c064b5d575ca257ca007b8f99cc80681bc878714fe366991921f756c93e6065a1649f7d9b831b935ba9d96473fa414e2081681eb0da69163297f2b619356b76809472e4720823a1e3a9aed218f808b278ba63a3a974ade24fd5c1ea9e0e9a527040a7a7f7cb792fe343fe54962036ceda5c41b9a11ed104ebc7a231b93935881a2b0ce74eb7b8a03a9d6b2f3208aafd127b5a1333258bd52cec17d46e7d5142e02dc78b72741ed0e46dabeea4f5a48399c3839e35a5e6969e3f55510744cec0ab3be2d6ed1116ae74f931bdacacb4a8d7984ad1bc33aabf61b82e9e3a4c4dd206bdda380cef02a883ba18aa6a424e423fe2ca9bdd6c3963fb15c6371b124d8a73732c0a7a7c7c72d13bb371899e3b5aa0cda7408e0acd35ccc7d067d7a7e5a460e750493d3664f629843a7e0e1043e54d70f6e4d95325caa4bb2a4dbbc83e413426d4c6ba238a7018effbfab66449dda13aeb2685e6df1f2bda97bc5a8dbe4e988fd05defa74126113a41790ce2fbf0d2292d0ccf75e86fa6af783d41ab80622574c1f07c1a95768cc0fe7a024c563bab335f35bf0865b960777380532cec9193c70a329150eb7e66af7cb08a67718a24fc4070310d463fa89ef9e167eac5a0e6821d4950e3b1e36d40c6baadf46dc3041f8de91829eaf28a069dc245011f11e6ef3fe6a11be682226963b5a3bf83d4672212c9c3abee70659f7348c3f7cf4b9f288e16ce5f7c4c6fe7c0c67bcaf639e356256cd2f8b9c896c4add0242d2592db427643effa343017dde553c2f74e89f738f094ac5137941d8cdca001a79adecbfce1f035ac39782c4dcbb508246a245a24be7be4ebcce70c57235d7b62ac8fd2ed11d2c148dc41ed7aa91575095e221d83754c1a982d255fc47a5da12f08180fb41d271243bab26a780821abce166ee460e6131d3aab88f0ca63f999974c2ccda4bffdb3a4d25cdfd5112f05f0f15b946f09d0922d9a6f272a32976a4394d829a6a263e478b3234ef8c1a7762c32b8be4643edb846fd1cda2d307a240db9ba8cb15c1ba4c099c4618fbf4d4890c2f4db63f103eedb4b6c3602beed894934f21ab68178396c7ff6d49ab12e18ea40fd01382b70b0915a3c225fa90eed16ff14a1790ee55bde16d8373fb6ff7711d426419442b3defc9c2be41f2e2367e1d2615ea34273ca44dd51c6d69aa43f43d6666f041637082980fecc2e7d66992fa2fcd4d93d07928855a72d356d9208559b6e1c5e28129f928a8dfafa0062514ce11bf0ff936a6983d5a3d9b122f876bf759a8a056262ef89337a0b23940b58bf0107b2da0e39c1fd022cdb45482e0210195c7ab5cbac1705c689971e89f62d4445db2fcb29346d38d43c54ede54447afa978fc4e1ded5a20567c10c63f7f3b1588fde9ced4df3c5fb3070eea9571c53c7d2984405f27263279f990d011124fa08ce1a85aa43a72772a390d99605520de2de7f4cfb04d3d6333b9f4e6654efc8a07eef66002b88fdc2cf50516110c24e7200ea75862a60c9d5b6956353bea5ad94a89bd3e86ea35aafdfe94d63f875e94be7fcd5f10512efe363c2b80354116cd94368e4b18460c6ed99b3a9b9103ba4eb06cff1b7cc9942740e8a4c022b778905c7eeeba11848e7dc86f6c2f93f9d6b08981eeae86dc30456ec86f108422f38cb09a29a25b7cdd063a2c2d3853722b3ac01ff7023582741bbe4c0bd2b99c4908d71b0e065402e9bcedaa2a3b1724a75cea5949a9b85de9a856d156a80f4cd0804a1c34d6fb2add6ec3ef7d9f39272352ee318ba7cfdc7aaa60f725283b81ba15ae485d236259e090043eedca1e97c9a92cfb66e4c32f98771656bed116835870594b3e0cbc9724119cf321336a4d2fe212bc24080e31d4f15d59b55727a9111427b48e604814365e5980e520f0b4184c5af3979c679a889ba75dd1787438e99aa73907a17030fbcff36ec600cb92f909ee29377be9865d4e5ae0ed267fda5f569a628222a74feeb3ecb2a124239e3c1c9717a478d1814fcf9f1eeb9ecbb595d17a093a67e09556c5f9ed01ab3a82fce182d09d5dcfea946cb0d32505330b3931dbae7c4db0fb2d0504df6de58456ab2d431e83d6c9e8232734b489d2d7fd370c384e5ff5dfaebe2b89ae06e805d082f247165cb728dbfa4c844b0c7e729c5457736771221a6a14953b0f618664225c998db058ff83cbd3eb8170976bd6f0d8d22024b914feb8a7ad709a276ae859338c92a58b4fc79eaf8ccdd31380be60ff7b152508ac977385812e4a1a1cb5247dbf30f93e4d2433c313ef4fb859b8de177206f2a2067f4eb3a952cedc59e6bffc3757f813c692cbbb3d8e48771a19ac74b27a9562554d2e5734f99936d637c372a48cf6c5205e5ab33f317da546577471df5bcd69e038a5a515b71b2006e44b9395978713dc579a7b4db0e58db78893484bf2698b026440a9b9544255b3662ffdff0ae3e023a95ee16bbfb8bf0f546bec0ce57df29f10d2096b2c49a7725dab65bdc8658e9f95d4ba03d882380c9f49ef5490430908f21879106eb4233a8d07e19d6a564ec88e8dcd05bcbf3c0151b01c9eac9ab3941e2caf685d81edff50e9035a4c29245bf35ec02405cfb6b3431a1f6cc71fd97a0de200f35d7eec803a6299bccd9617aa80abc7ff76aec657b142a9f46d1a5a49767a0c06ddea300188b4b27aa21124e4e18c47ad2b37c76eef16816403d8ab0eff0194e013009483485539a1ebbc2ac4a99caeb2fbf103cfa9421ae843dae6556ffe1b5b569e34aab4b2185034a4e3afbdd0d96b271bb309b9d3769554b1ad08962a5a9953148014e573beb8b8a900ab0dc1ab0b89f3669551559f7eca6c5b19e415f074a321b60b763f0adf637080a2b55174477ebc9c49a2eea715bb015f7c1ed17fb6cdfde748cefa71e17a81af0ea864a4d8cb50fe2900a68d24ec0fc78c57f5db5c2309eb9f31c5f9f66695b5c131521e95401cdc2189db5120602f5b9928fa41b0012e159fa84b7182d69c78b2021269bbf316629b965d61792f806cb9b9861eef6fc4d2bf0798bff579acec66e4225e0d62496eefb5f8f23200fb1b2ea6f5baf42bc0bf314de9ce9b900a25d7ef713b77f5c7f44dce1d8e3785d6db3483f32be472e5770afbdf1d900c3c9c749b258871456b4e7cdab424470cffedcea85d5d550718c0cec4d8b238b121c84364e6a776a43b7635aa766dbd243c4529dea0c5bf862daf3d7ce5f6d7268e79efccd2e281bf5e9df2ae8a94d483b7593eefdb10b707ec41b05b19328793d42b1a0433827f0adebf308fc73a918f15efbf9bef0ea146d1e960e6d8d9f912caa652514de2bec6151e63e10c37fd9a45419100d9e6817b046b367bbc6c1fff7433975a33ddbef05c77532351cd965b9eb0b481cd5fcb7e821cde0c5104f31c53c7882f823ac9ed56c61870250bfa736aebfbb6b7177304bf0361336405d7d9df579d896b55185d8c9f8b12f13e7ef2b9515ad23d18edd1f6ad11ef3bb765f1fbfb8a9d55cbdba9452d3e2dbb5e9170c6b1473e74172a7d8082cf2843ec618a10136bc8611742af031ef3fd8e14c82877d3817054bc45baf6a1fecbdcca876054c81a496a09be65796279d6e1ca8ab592e5ad131d03026f4c3e1d1de78f732a752e56d615f9b1d8e0b77c125c53f18f4cdbe3c0ba804f933ff17d44c8974d1f75500928ae8dc95d849519210db56d477bd4383cc1ef293007f1e2b07463aae8de609d7f6261fee9f382bff516f2aaac2c942d7272ae4c284d2efa4b9796ff7e6d15d95d3be1a83ae511510214731af358030e433ba69eddcbff44d1fff2ac000cf66150aedc31d4e1714948e7888cf65489fd9fb9734ece709c6723ba864cf38ce3dc5d94b5a1851d0e576018a96c2d7f53d16aac593e215e4252734c884527035fc5f21e352316a61d2f1cdfaccb8709174c11a2b3d3eaf84ff93e297e701d9d9d9268b76df246c2eb51081ba4c49cecf200fd1bffb683f508bf5ea4260a5617fda13cbc2a4a4d7c1a52443c4e3ded2931864d2330190d1b94e04f6830b5a7afc926c4075d58dcc96ae08eb86ca9bb2dce548cad26a3bdad7df4fa5b60dc6e1cc66627d25a31d2293636dcc3dc0e4e105d443f259ec8d67fac7124c8cb4e561bcf2f140d829ef30ec2a7db6b686fd691dffdc87529533ad0fa354ec6a3a3c759c24cac79b78915fb335d1a6041c99beccb0af11a4801dc8e86c092b389256967922dff00263f53fa2aefb3064d0082dedb526af6c39e5c6e4304d2c0800c3f554c1395123c4b82ad4f21de7b09864f39315fa151be1e951347a514a5bb44beebe73efca6c509b29f9d3adcf410a8c9c20dfe07ce303dae701314ab2f2b6868a2ea26ff7016af11bf4558dc18ac30ce825493e464b346a727dad8b6325a5c012279d49c18af06938940ab923745a88e04dccf92e65e2faae77ff532cd20a0a2e726e8c5bfa11b54bbb30ac9f8e7a1da3bf02f12c52a32010cf37c7734e579baa211fe8db74f45379014033be39043f601b39a8a17c78963fd2a950a29fdb2a1b265c862f755ab1c36487cd2477c0cd3f19c4b93acf9dc72afe78e4064798740d9fe010a9893d3f74e32329620b0f4ace4f92658bd1c3d972cb9609a6a14723d9c824646cfb938c0cf2a1c52ca3d0c8f053513c52caba125adb17cf27ceca88837faf50c9ef222cb804065c177dbc2ad2c04f44a56beae1655da936281d439732abe6494a4b5b668f7b4c10701487e5bc7427709c7fd37500dbe1e5bfaedb1210ad68db54ee78772cebd7225e6b3ca7373bc6f94b678ed85a26f3a05b7795b10f8c95ef0e5504585d447291cfcc0ef028da2d209716fe51da3d7c78322244d94e1b71beb4b1a11d308a22587fcea63df463737bbf6eb0de16399df4b5087e1d1ad8ead86348a12efe82b9b57975e2b93add68cebdaf05d9d1c724aba89a41e8212c65032748bebaf489df13738c9d3e18fb2d63255a0471a35030f57884cdc3ca91b55d4ebb571d57556468b8b46727aad0148fe29cc364edad9ea7cc29f99d0d43ca5d5426075125777095bb2f0236bfd8988304166985cfed7f90f5942e494804424f162e531b5a9b3c3b059700a352fe58e18e5b3c108000f5fe81e447d0d674583f06757ff03d8af06018b54de4f8bcd5a0160394400547091ffec9a84a10055c46f15f45dc25eb648913f418f2e2bc20b7f3b04978614b34f18b0df9e81da05ace7973403ace6f157ee683689af58f05e34b53cdaeef201f1a6537e4ddb91b7ef4996e92def518acde8d1ae7bb68061f298abc019322f135a591208d91f80d17eebdc016ebe038d91d4a76187e96be8471907aec67b5998cf01b3144f7a5d85a1e49c45dde545267b1e2efdafa380936cc1c3cbe1eda3c99885b6f93f2ca168393f871f996691780d20428b3e4071ad0e25dd28d855ef2a62e703785875dd4d14dea5cbf8db2e06d1af96b632cd9fa79790562ee3216297f81559df249a6f3439ccefee98a223f19b06f20ca631db3f40750567a5b7f7605f07e5176a146d4e3f690b6e9f3549ad35f3c73344030f0b138e64d64b29436630dfdbbdeeb9c413f4e154ff0e7c525128e325d222f6bbcf75216b18f49f242d78ee0033f93e9dd41ea3ce2d97b6f02f7ad207656630e77e6b5c249dd1afd19d039c59a5bfe53abe72a1a286b14795e1c692cd504c0ecbd00f11bd80481c70013549997ce3c01c4d3d3f63df4a6eeed8ae1e9ae0e7609152bbb4f753283f78964fa1712d4fcf9d5a2e61002d5ae50761e0bbf3549386f83ae65b0875f7418542f9fe27abf495174304fc6774da404b1dc29d815b8fe57713bd9cc333573220b9d5ab4fd4432366144cb8b9666fe7d7c408a95fd41f19e6d58beaef6f960a44dc32ac5fa8ccdf735305683312a38cf88788522911c7ded74ad69ac27996c22f9558b5910afc6d65e95caef36ae9aa5e12ebb4b5f05191090494ffd19edac740cdbd8e56825a9f525f119c0f5953e383391ca25b69554c932adf559d89dc2909be2f15acffb04c7ab36a2077d24241a938da8ec933874dbb4cfb3fac696a3fc6f922887e6bbdf2e590fd81f20183e10284ea647714391395f6b97b4072b2f565003340ba2559424b35af65e9125d25ede07ef1433e7b046a4437dc850f81427a4fd0643c0687b86410da7d229aaa8a29ab6a22483eb4fc100182cfdf65de928497262fd6f2468461ad8252ddb5d5324f673b39c4c009273b1f1e97b3cf75239d4ab03406e60acb1dd74e2886085a205de76dde1b58fe7c5dec3e1bfa8b24e7023626c601b64f64d744e8d38b0e756b4faa652fe83b99192dd6dc0738aeeb59809f5a9479dc8896c81e5d8aff64106ed7d7121e199cc05170ea915a2834a9f59abf938743666fa876890df2ad5e99219a4f30ca22844265431e92705af5d242d9924eb2f3e93d2a8b0f5b19f927b2cf00c8f3d9fe557533d9e2260df1df6dbcd2657f313e065d7bb3f4a03ad304a62f482efeaca81860df2c73fe095ebf36f983b2f14b01095f61ce5f52b3c29969fb5eb54f0c7d5da3df5926259ba7e8626e23c3483a519a4fe94e12085f0c35f2e54f5aabebdda58728391fd5a970c7673e038464e5c8993dd285050c1aea9f71e63f1e6191e79cab1324406bba2ff2d8572866aef4088e2f2879e006dad92795d7ed3a6079f3c00b851010e0a8a48efde50f7d55bdf5ab47effba85cb9b9aca316348bf7b7048361563c894ddd7ba5e22341a0f9101490473293906269a3d6c3f8b94813e366deb823aafb86551b2f0e8f5e4b02313ba4d2417820fe3ff70ad84b5d27baf23c8615ae2894795d13f9837f1ffc7393ab60b5f5bf77a11b0c436cef417c84f671201746d37251e6773b1aab78e4cf071b93e2404e4aeb5802f4a551d5fd158375fa08c2aaeb67754f9e2edb20ae0798208e9b537145e68750be6182f19c8232dea75f7fd5fd5c0f89c9ddad5f83566b3536871b2f551a0fe04c9ff455deb5d6a75dd75f5bccd2e1d0171fc72ea163f73215deb537725aba9e177ee55830a137045f31bc9421c87366f710e5ac69660d2f434b5b48675c281a8b67334c0c2fc86b0d7b4904e3c2d5378c9e1ce26ef8d45772b863d606947e58ccf49a320f5dcbf85ae9a9427a3b00780b0c1247a344c7b9da4b7870b9bf7dd0874d257a56ce3bbd5313f3563e1000312ab22c1b83be1105b3b01f31df0671b8482ba4112472afcb210f30145b75379aa0eefba01cfd3d44d9dbebfbbd32abbee7e4775ab90a1ccf7d0c8449b901e1c72714657c629a12372b5aad6ca27bc388d4016a287ed73d657f06069ace84b349820834f848a26122ea655f8d5e861c454a83940671cc5d4838c0ebf0e3906c850d9a1e413ff0e5ebb9d445eef8012419b0c97e58739b8b0dd51d61bdf24425c8dfd049cf38fd310a1e59db0999f566ed43ac4476a6d56599e62bd73185044b34af5c87ed5424678fe495d37bff37df986a7d2f535860a6a4c2583ae2ffeb4ce0bb05ba93c7a8bb9645d7d6c3fc558c53d435a282419a84894671a4a74c0d1b951da6b862aad97191ce422150d8da9d6f2b722a2a90b1bbab04b127b9a2725e62fa8d5e3b6511b1188a4ff0ae0b6ea820dc179a20fc466760f436536ac0f48004e97500608bc43cd1a50b83d28d6444734eee15ab08f86534d359d1871accd4f24da0848d5c34c7553f6af7001d8cca75ae846e1a2cd810a31cb28b2684f1c5a4b28803b6211c44995e67af834543b0a6a9d2597c0b2bbf0431acf1d2a0b2cb114b5194a59ecd0c15a93e6e0562ed6f9517ff066ca6af732e176e6044851521186bf8c3680abbc899782fd901cbe2d4537496e6d053019637093ef36ec49dd926a86419e21952b551bb146a540c079c515f4522c3475a3563fa4f702c0a37231c17278e8a1dec23fe8ba9f832a411cfb884c83b4c538547ee285ccec705777d5e2908ade110530b370f42b3daf92fcecbb5eaa6245cbb3071cb105d9375d687b41d8451dfabd90d2a7a44554697f09e29a5de500972e0767e4a268017920d36935ab980edabe834feae0e1c19362d0c49993d980a4cbf3a8e53fc0e87f34f3acc8431fcd29b7330f40895726865747caf939299dc65336d99e381930522cf179cb65f2fedf5055c536412a0272109e81535a69cdc98eeb92059a796d9062b3ab7126353d3bc128adaeb0f7ecbbf1930f977e2b2492f0f426d397911d5ccaa599fd106781ea69911f41631c9ca2ef666f2aa2d849068dee6a495a3a608cce5122586d95789357f791d4302b2ecee559710a9f6fd75e41449775a33d58315f330908b3a16369b7ea6d220c4edcd9389fea62c76b49cdf8efceb0293e248d42f857adf9e3cc7575a5ecbbc97e1936950394ade3332f7c0804669ae0dafa628756f604550943ff78d5246d1e192dd8ecfce8b787a62384b9763b0d045017484cc442e3ea6d182a73b98c3b48cb3d31e3a450df1482d8a1d97a5778a54e93bc81ca961ed21a7e777d8ca6a7944462f60b9efe052b13ab8a81b2a1a95985bfc580e6d11fc852dd0f3b71600723e0559b4d8ac9bfab75819b096fb53b7b0b67167a4c3aa99b4de1c9e94944aef986171154fb54a7f4fe1cbbca2c25e2691b3cde24ae917c33ac954074db3ff80c1b932514b0970bd7379c47350110d24ad2af5de35cf85aec55ed4dc1e4954b99bb55a13ab64ae1e0c364fb2c64e7410fe969dcb0ba2242121645032d8b8a2915fcee8089867c7a99775b8251be01e825d59739eeb8c1d192ba2fea4b887e71dfb67650e3f4ca08721ce235a631bfa5bceac0e5c9fdec783f24d364e7f793ba17fdde9be80872f2218fc45a67b7a30023bc612525937c90ca4331c81598dab6836b2cfe9981a2a1d5e789dae68a712eaab64e54e537484e55320165057ec214db942d26dfeff096b5b91660d999f7a085033344683bf392429314dedb47bcba7dfa7a4c2c1c27264382bc8d710a889721e8e417cabdd878e4945d4cbdff6912d0dcc6ef0bbd84c44dbbd1a5bfa1c9c0e3e79d89b63f972fafa0405b198304f83ce3c89c00f9498fafcdb0fd8d0c698cc3e07055f5ae8a6099e0cc66de9290ed13b9cc165444d2b5ebd963c0a9a0b37fe0c7a03136b50acb8196be4779fa34183f0f61ae1198b5ef82155f0c08274f8debbf2d95a02e3b603ac9ea7778c1360ef8249f9d76fb29ec8d055673efd6331c2ccdf65606be61822681a24a57c664f37a606c9ef9eef1833777fdb9dd66bba66c1156a59689e0ed0feeb8f0e5501554207efed340eab6dbe771eb7464cf1f684ff99e3f009e919e1386f4d0203dec27922364b14ff89b2fc7cddc727874472274c9276817df4ca225b37332b3feaa03b1add07d3b1fe86cc3ee7abd7af3f342515f9ed2e7962ce72632bc7ce81dda3b16c0b0078572e9828b9e2637108492055cc5f3f694d7fb70c6bb575ad810b962726041ae11cd7a1c38212d2ce78e415f84c543dc7372879144f97e876668487c7a5143a0b416ac6f2bc41e62e893729df3c84755d5e84b803d3eb4922c4a0745b4d74263c29b85d3e1cdb3e1c09420867fa102099daab82d6e19a43dffbee599cdaa42e97ead1354789a627ba5fa8850e19bc93de51cd669e9959303d60a830c717b5868586348d16b24e9d73909462132fe95e56588000ee4971820fb1ebb595d8b5a464a40903b2b5a8eb998192a83f17d153f6111da944aaf42a37598a17adeeae629ad6214d4aef2525b3113c099978c436d02163c31a0bd8bd599c13ea803bf2dae1266a20076ab049df1326a45a456339314d4bf90000346b90fe8996925d20acda0dab39b34c075a6e03a2492fa1a1ed8c904af0984da0f96c36615ab93c2c0b5ff05f289d73336c9ef5c952d22fc6343801c0a36197955d19cccd2d69384258c835f1bc72ba388ca7b0e91fe8a5119e55cb8d1d57f8be23ac772c611a09cb3dbdfed234e9b156e985f4991fc1056116ba8c45bcaf3715e95b154e5d5ccca4d3902267442e9a28503c3d0a64cf8731328db290003a78755cc6836b7c92c344c30755ea195c3748078954923a2bfd29bba8056eab7773e7f0d72e5a02952e2b93d7a5d968e44f4d7bed5396d89b182ad7906ae42e165c7e124b88ccc131554ae128a1d8d2e872e9f80e39c6123da4fc1683e5775e6608510549426c563588611cb785d6e624d71c216618942cd7e51d338eb64129ce55a721d84f27aea79c102340b714e2b9c02f968be3255b422b6a62a8c4cb843720032a8f9f5c3516d772a6378e89bc4492fcf5bec79ad6c31324bf51b2e133934e20ae6fcc939da59dcabbfce1763f9f79e114e9976fbc62713490f2e09b5b294ca042443a6e8fb59aa8b48cf784609529ee5ffa7cedc85e72431c5681eb514c837afc9f973350cae78118a0fc935894bb39cddca4c7da14adffcb8b727b45ad68e5c33f226278c64e5fc56217ce9a687ccbfc56643544c39c0e91c2d1887dc79e194dd0e17e0e6ed9a4aedc4f178f9634495a505b17be4f565b20d43f984f977d500f4fb7411ec1a3504255702e8dd310b0eaab01802f2583cf733ee40280d37a8a616e5f342de41a1996bc9b9dbedd66a27b7aa7c68e7985af8a891dd2288d79c53bc460ef915e0bb74d0565e7f20f54ca9c70208c12053532cd7f84c2b3f9ace08f69cce165c20437eeea1f0261cbaf30e2232016fb10d1c29846810f8ac646f97034152a377d2d6f28e1cc5bd968280e016c54d63c18f648cc839bd91796fdf351bea40552ce905ce4dcbde1f91c375b969a8fd8df79f8c6fcb91ac03fea05be9167af6c5cfbc0f188d55535ae989aa9f1edcdc52bc6f22ae9ce7567bbbc2896c39b68ad57ac4dfa34d25b069a39d65efbfb74f967f6b8369583ddb715b487e67d183d3faaa8471fb1d6a29ab21c32292249e1d6d17936941d8dcfa11ace789da05235e120ad619d1d6eeae2ee94218d7f0cfd93bf72b04a752696e41d8a46751dd73c90efc9d30f40f3cc886dd8b0bce01d06466d3ec7bcc0b96715c30511088a6bb8100ea4d5b8348df04614a6b2f62828c39cb512382c2ad836f94233a33b5f0e0b2b55aa7fa745b1f7512c87122ae4c4e49e79711a68a5941cc888533e23ce6fd78937284a05d62ab4eaff1b5c976e59490f5e264a6e051366aff92d728e98778f30e77c9f2603992d9544179581cbfa4c79483292c88b0c65aa6265873b8f8b0fda74f316684f6153fd0d5a9b72a1dd5635a685d0985a24998409450ce5738cd3c0e10e45643aff0d6a0ff34acd28c43ddc9c05ccb647bbddd3c26492655cac22438c9a4bc1342d74b93898b01f579c782b19b987609100fee0e5ccd6510d4338ab8038b60d0b7ff1338de59a988264bc1af844e05fa65cfe23276f01565a684ffc98fba4dee1361ad2447a42c7dcdd415d1423eaa0a7c856a17c157d7ccb36bad34513dd2c30d9459b26d81d8d47ee7075e38a0fc1eb974bb85d919aa11b74518979619053cc53168ee4bffd368a2283e0f2b06daa88d0213eb7cf11966d346712411455d687f79a8ae18e008e14d004e57d151c773ab2297163edbb8fc883a5dfeb451db338c7fa63bbc333750a17cc7ddc1f9837a442f21a02639088340745adcb93cde6c814a80514d5e7da14a4b48dd3fde165490746ab1b03ee9eb49e3cf7525069d2eb79a528f58de80322238be6e4c83f51e4129ddee3f537dacf545c9fb75129137aeb991d510ab997bde315757cd4a86dcbb56a2cd7c220c7c052f157525a3fa44418624dbe6474f3a577ce393695538681d9f290df07cf34ad904691c858e8ef462e50c2d58ed8e35e87ea1786355657932bd0c6a041516e02008a31c3ed673ad4cdb5d8a4cce019cc6ce3b1a13488cffe21d9a0fcc289fef2bb3da8f94bae2ba871f38335e6796936d613de362a3d268a08598fd38d6651755be4f4a69007fedae1a1470249e775898631cf2b9215dba28de2574d2a3b1ef0802206e08836b523e70e05875281237dfc236d3c53475b3bae366466b998e3dd54587057f7b508ecc22d624c334ab8118abbc83235939bb11237e4130cf00c616d8bd277a4dd46498ef8f7f9e233f60971a5fa95eacff42e2b84ce077cf99017e5d3f46ca85e4613ee50cf19d115e99e479c0d3e7acf81e0666a31fdd32b32b0aae4a3decf7442a042a4317003fac63a800c92b346eb6065a3ff4890f92dc6fcd8d2f625c42223774851859a2a28e4316177e88726e145ff92d74ac2fefd5d0a2d54c3b0fa987a0ec7097676b7fb99ac10f75c4b410af6a5762b258e7cd80268a4cc0a64921003f62309487d1f224a5b5ae4eb919690138880c5c61d9e361b77d43200e2c0a61ba572978e0fc15d8f147da3f3836f8332a24de571b6de8db54c4dfecda1381c1988ddfb716a54efa721e7b16c4a60a202c49243d073f93171d049167454feecfec84cf3a4c0ea3bf8c65745597079ac8481b2f06728fbc8e09eb4f148f041972cb20a67c793f9c5e274e2674b383a340213df9f229dc51d76ec3341d7360586440ed7e6bab404187b27682a9c9fd331a5713c1bdd0364efb68e0c3eda03738d7f1ce213b99bde9716a2c8183ac9db6eef7a410a289cf600edc1610ead25c6a55f53ccce11b2e047d45a5470339de1f369f6ef7ad9d3caf28012c708503f79da8975a652f815cf86e82d07a1e3b11965714cffe0b2ca814d59485bd48e126fc13b81e4401e52109b62fea53b281bbd1e9ec3519c1faf17aed7730c18ed1314198470bc17786faef537d6b8bc67c2ea44bbc345f6705eb79caf1e4c93a9e5e525bf0681bd8a78218cd6c58d3c49f024851aa92a3fe93927d3a4f98b42ea49bf7dde8b232c788b15d112c572ece2f03f477d48028494320c1525e692e15260b4e179db91bf14cba71fc1a6550868352248b044c9fb256e67be7b65891d7181ab7afde760427cf5b06653122fa394ba425e27dc8812939e10328f38a005e956d989b47973210b340fb2072f166e41a78a54c7adb1994a1b9ca0f2919366a926612332972b8cc0f0dcbf6b59355b62e32cf5ad1a0c23b6015aa640cb4a60b4f1ae45515e7d2ca9969679d9e13037808ff807a96d1001b8a443fd0afc9161180d3425743462580e74eb30c114669dca7eb6294bf90c04175f7b3cea33d461112d63c5432ce33ac3a2c302d6c7c51890588ec8ab173066703cceab711af0f2ecf18e9572d0d2b1fd36ebf7daab8bb09811fdf87bf73389b25d5123f31418910b97338c8f7d029c3a9c73740494dfd73f85278fbd481d1300362bef30269260c8bad5c6dd666bd08a1f06a89c6cd0a241ad19b24b101014fb718d5c83a512846e35dd456165d736675e74e46223b22ef0c2546136ef212b25013e821b1dee02828e86f9bfb5dca4d3cb237aff599681ab8fe28308e37e2d470b24df420a108120a3f0502471131c4d931ad06d6a3cc1092e86b169d1b9f85153cea0646c19de6eb9c35da56342cc2c6b2ada02630cbed9cf926b7436bac57cbc3b55c17667f65ced9f44a4ab20f035e34074b06c5461b2ca2bb4229a414417ec37e24fa6b6b6dd01672500e2c20f5f03700c37779e1d284b4e1ad6bb5468cfefe718d86441ba699f775c8b98f2ddcc5d6d96f0aa03af3e9dfd146248ba92e13728add45add5c28fbe480bdf1c9f4d71b8c4e63fbacd1f6ca2448be5898fc342dd2fc08c7df1021107d0f55636b8ae08e90a5b69bd9f7766db3a9d33a4938793d10c4a8620184837b5a377141a8ff9396ba05896950dafbab8ba03feb5698ca793cc445e84b3ad12e3b4538bfce4e2552e6c308c10085b7dfd9a63f96461cb2e96b18fd91ee8dbc21652c763c4dca90926846be271e3ff226bc9e63b2cd97cf9ec70ed67805de515ebe888ae43195222c140ce44bc2c6270671f42d3b2601cd1766fa40703bfd46a85f9009d9045b74e94529f17098d0cdef28656a0351b9ff1c22f5dbb75cf8250bfb7d0ed9adee884c278e7be5a87ca1b24bcfcd9d3c3209c4bafcec9679fcb4ee6dd8f17274117995e782f26ad049dccceb482b275ce9cb010b97440e74e6ae0a8e3a4d5174d7fe22c9a2b06e91ace78ada63fdbf10c08985fc53b3fdddd29cb99ec771d24d72d696e92330fd8c4aa8797790495dfb8f764e8aac42723dc86812744f35a943f6525766a1efda5f075dff8135165f4e953bc1617c57ce191c9bf7487a87ca5afb6fedc309f65b7e277b53373cfd8c9da1715d858d36c9966ca449197a24bbb75e3a260cf466f5a84aef57d6d98c6cab1cb89c660ce57dd3c61427d08e14da19b5f7120134dd823f298f168ec3cd5c3ba2e5b2baf6e1a8ba208bdbddb107462392cea6b1c2cf1ba567cfd105fea2f722ac3ca8cec892c75f4b4d2ce1a36ab577202399ccc0b1d4c79d8f6e30c857cebc974c5412b6c7a5518a82a42c5c085088f8386fb99b3339df5f1b6b58ec6c9c7a0fe451ae41ea0f076ff113234a7041f10e75d7d728eab3092fff698de07da7cda158e6e61bd181231bacfc64fe025c7d98b0a3040aa58db59bf478c3d1b110d00d71aaa9295c259c701d65dfab35224d764a2b9c21421a9d094c5a8b997f87b2b146fa52031ec1bc98061c87a2537d17a5d599e1d0399ccc512153bb9876b19f01613c92b485c4e776e90dc11a1e51fe7de9c7d00b637a978f3280c67cdb64e316eef03ba4625973a14436986b76fc7a1225b5a794c5991f01429fe3bd40f7c15f98cb9210c9bb9c0acd40dba2838c6d4667506a5edbc74315bce9abb012e7a807bf15fcceb794b73c8fd3772f3f24e1727bca92438e442aea8d3283ac5637ddbbc2e2c4d6b1a2ad2db821a36d5b70554701668ad7a37447f1c82f9c0f87fcb28bb4cc6d3b6654ba1af4dc7f6d9d9c68626f2b5c7ddae770f05b779eed87d1061892ba355a2053e268bc77a6cc3c3ebd5ca925449515041fe60bbd3f5b9e8efb69e435d5a62a3edb5d96435de9dd5dcdca5e3da1ebd58b52f1359e1317512b28f8082bdcec2bb46b02bf43db4386f947686818fbd813927b650fa7b996eae1f16fe44541d0fce263ab4730644b819ec5afc6f726560d9f9000340b793bb9f689234f5e0d54dfc09a94608c24fa59dc6562195690147a112e34e5e44ed48e12318ebafd95980849fdfe3ee86c38a6ad358aa2cb64b6a36ad24a4cd8edfed83b617620605967bf5b0e8e4995042726e18498cdc08dd92d4b2acac697db4cba69a324f15fdd6220b28efd3b89ef769e5808dac8bcf85b2a0ac9d3ba99665b92b1ad1ef3cd2a77c245d6fd9c7aecb933c758ded83b1e0e4e7926349da1da17a654c0a9c1165c9b9ff9ec3fbe407cbbc5109fa706a357242b4bed60efb6808c28ad080ff00751fd83a702d38e9e0155d2d8cc57525567313c06220a13fed2ad84c302108813d3cf33580adfbeca9be1d725633fce4d71a69018aaa97f02bb303a8930e5e2d51cba00a0d0c49516e7dbe85bf83a7cba974465a8649350438470d2b768147fca2d435c40d168d2f51a6663f91c2e52bb3c1c2db4073c68d95ad9b21af31ec897cdccc691b47c7205bb7766ff85ff71331e52535228af0033188cb4db9ba8523029f9e912b9f3c4a8f5451f90c1fee6971c8791962a20a5fdf4612de69ec0fd4f227bd594ba8f2cfb68859f138f8910a47d076b1737b6c0485064584e0ac5c339736d067f3bd0dbce3d56cc9c56e63fa6750c854fc3df2e814903c9127c2335b2c7af57b3141bf48d399740495ecf084050e344dd148553ae47a1a46752dd43706216f42da74f20ba313a9061f9709e3a6d0a8bc96ed2b78d439894bba80e86ca7ff82ae0b12d7552462dad34924689769758ef7bfc4f254879cd060d83738d486ca84a45b7ef19ffe427eb0fe303b549f21d460523280fcf6c22a3df7bbd43cf2764114e30fb7ae8f85bf6ca8ef6e75b9937f8aa40fa6882870aa4f831fd5ec06f522501211aee5d02f2348478bd89a0a501e2267cc4bf82e15d5bb3e459d0771b65639ab01ef6c742ec911d476330692f0671bbd291dc143ac997850c87d71701c0ce5ee6c65ce53e71173484cedcc7fb32946ef4c054927f7cfdff8ff27520db5692de8d69f6484acc2296f61980f82ec4e7b81cf03814d7ff8ab3d2eaecc98d5d46834a47f0d1f2f61ccd35e342eca36eb6461dcccc60adb4f99ebeff41f75cfcb50cf0a241439f5531aff6329394957a47238f3c5787146527b9a9f91fd44c7423b231a08c5d63545ea4744188f71e417920e44805290810b5daf6bdf5c2cd2341b1246156397d7e98b39b6a18c6aa2a1a029b6e512f469e22bd5ebf02af4d8ceb1b7c978b4ae2ca19db5d1fa72392761ffceff2841387bafd2a9d1f4293b76884999ee2a3309ad43974ba2cebe138869eadf2ffbc8fc24a3dd31c3b47ff464001f7620e8fe0d093946c9cd87f24db708e702ee5e76176e094f15b04f9c180dc1053b737f130ffb071440d3e139fd548fe01f6eddd599a244a9126ae6c271f8441e99b35f95a4cced4ebe6ea50c1b9eed702e024927d4cac53b2ae40b2eb84db3e209076fdc83c69fe965dd921649c7a5e32bed48a83b6ea0dece165b8b2a222252207d7d06cf23cf9d95675941ad5fa7e4440c0fddaaed9d804a7ee7df99ab01a289546210c6ccd29c85f5b3498fd5f4cbefe757fb224c20c9fa15f8253d071d468e86953d9c94f0636cb7de087b7c61cc6e05257f863a0edaa6b71e0c65469406c6175a2c2015f6c26bf04b5dd6ddd0eda0289e6bcea2a722e7e29a144935cd2ac6b55205a6d7a5e2acf4c38b0d4022efa6ff8b0d67ae4d626d9c5cd7da93d0080a2fb40cd69e19747375faf91b1ff2f3f20f34a4a7a930ab9ce3dabd638fa16a031ab73eb01ee3aed3dcd952b417d64d5fe9139dcd6542629a9d3b3821c8c55587dde096f414dffb2bf5142d0a607e873b02e5a0143321634faf633a6aa30a05a1c92196febf956bf5be20419d408106fa171ad9c20bb0f7ae159e3cb5c5d79a5f702c8aff097350db46721606251be8ed7854d2a18b1177ed09da15ab80bebd8536cd3d8fb39e6c2d45beaca2e02c7402d136dd5707cd630e6c1ca87885f35777bba7a96ebb5c95dc40c03137459c318f68d67f1778d477203d860403bd4ebff5b5f0f8e5bc3fb4ebc319298a3c33bb2b6528aa3678146d20462b7e0c1329a20985b88603d52e262e6e0d3b4e30e89d2b05e5ebda9b4b0272c8a5077250b81dcbd151674b1969836c9b1e3bc569d617b480a4518420249d47cb3741417a4625cf8dc5ec9a89df788793e57939225e66d87431fbdd96ec6c964399763c565ff4ae89cf48ad5af33985b3a6bc16bd1e1f287b46e30f4441bfb2993f8e78c92a0053070ac53e3bb8616459897e8dc5405281aab51ef56596ba4b781e8a01c0e1794941459fe7d50494f3e4685f75315301069ba41425cd7218acd2885517a86d220ca7f307312cbf057bf1b17cbc822efcf2937404fdd282ed0a1cb2edfef32ddf6f2d941ce3517f7fdc2288fec965420da42cfb63f2fb128c6530cac66d4de3730b58a916f2c27671da4fe7b54cbc230e0208d0eebc87a91c9ed83500226f02d0315d927ed45d6f0b1db020e3d8a0ea97f1554057c9c65846a746a4b01ccaa48670f0e25e7170b9cb2992950faf4224e4a50711d069d36ca6224bab219945a279f0878eba51589fc3c891918301d77fe84d0bb5d58a5ce39802a664513ba15af68cb2ba819acd48c133caee2ebb59b1fd58a11f4202ddbe5247ad56b384777c5f885521de4db8bf85c5e375048b7e1685e686efabde2546318ebc5f317231a4e7dd75cb969b389c54e67293094e042faf57a3be7774920b708540d92e9b98f85933a1bafb2e002271396b99a1019cf618793e26a28661a5ff688397b33c407015d825ffea0b750ee6af2f0291ac74915402a548517b7c6e6458f0b8baff1b2c3f74273d98e805c66929eb9c14c6cf9488bd995e2070cd15cb3b52892aa69833e278cd3a7cc7beb6d268f8502bf9da9ac4821d67e799aae3f935b5bc19ef34739ea12a53713c67a6e9d743abfed424a7c8d04070277566aebbfa60c6b8517a5897cf7c6e519c1d353b4b1bbfd4308bb92a47ba73b211d1ca350767dec11f134e21a63605e8ac0f43cc292f6a626eddeaf4679a6e7a784cc2144ba00ef55a015f7230dee7294bcc1b4023204e519a063d8d5c8512d71881bdd0c128368b7966a96aee7cd7fc44467559e1ffdc407146da62a1ddb89a072f4d372deb8ddb7b6a9c1010a1bda6d52526a8bd3a1c2ffc3eb7cd7ab56e7d0c2383328611afb4febf75a1722df826c41ec733583dd7e49ddb8440e76db6bb09c3f1e91fa560d50ee6bef77a9c07712c7920233d3300b1adacda139693e1f5c8d13d2b92dda53225a75b223cce9469a97168c9269f90ba2257e02f22f769f7ea0c15107c5d02460a7339807dffc56cb9dce4a38ea56bba8dd5c7cebbc2d105bcec70617edd6d54ca9fe9f98263ee7e137c2dedef5100ef8ea5f5095d578ff135f650211b1fd3455ab263e9cebe39cdc0649ab8a65d058d3a1755e8fef9b4cb2f4fddc535bcb3fdeeff0681c2a13c8f17b3fcbb12bb76172c018571dcf4b1ecba4fed878d5cdfeb7e2cad2613a760c2677465cabe2d205d4cbd2b116f9cc0294581e9d2861811da58657837e35d9e9e02b9f84d2086f3a71917a382b09f170fa6dfc9f3840b6e5393ee83845423321437a737e037d43da15c215485a938cc2dd10922efc6a16ec292a391024d1c55326b6714d09222da5938a479051f1113b73de02575a8c995c2c17936835c100fe8cd87da633431d67488423f41916c80a0ec2d791609acdacc3b228f11afe6e7c8898910cf7487741039aa110907a6a5fbcfc5e8d221217ac8e9f2103041141ad2a086e37d0da09695d65da9c655428798b144242fe4207037c99489fb4c7a5b8c0e689d8818aa478e18d8bc283ead21c590a481bd35745c9fe5f05dea90a7b5c85b31acf58af0d09f4cd6b62181b2d51f0d03d4ac45b1e9741c0308bdfb84b7859f470c0938708b38f1c36956854459e2f43e83cd283246921e05a0de9b143372278159177dca33dcb29e8f920d7e2dd61efc887bc418a116515497ca3d743715a2750aff5af593bbafbdab941bfc3f999acdba890d8316700bac7ef41ba568b5e7161fd7d013a6466ffc34369fcafbfcfbf1fb391e0c3b6b68af876dafbcb539679f384263d53b48f95c0b76c7f91298275c2b0fe3df42697ed5095b3213946e05e6142287e64d1ea51d6f3778ae4b1a8f77f07da78a98b081fa5108ec26655a19bd3d02721dcab9861e7c162f71455d9be5611d6b67d4ea40d6b4c6a131bc6a6429c76853c10ea92d2c9704466b6c66ae319692542c7f5f1398adcd8090d9a7de59d3167de9a0c6dd1ce04540122d0a38f01043ef81aa5872fa9b164aff9ef6f7b5744df3d0a5922e6272f9f1ce382f5e73cd5eb5fe5f4c764e2a057c43554a892f1572c79d8837605381a23873557e8bffdfd915d798cd1a150c6ced17382f5b08719b0417174b8f5e6e10f8d1631334caca78f9f58369b2ff5730f04d13c5365bb745c3a0eddd4a971d63dcd266b1838fa4d87309ad0c44c9c9c33757f661b15a811a0c037803575ded2f7b7fead4d7ae792c8a0442a54b9962224b524da6ebb9339a023b09b762ad56cac94fbb494d46204f8609ddd66bf49f2b680af327c7bd41b6b80e1827b501912aae89e375c6dfac5f515a7ad90b74ca6e702cc385c649b28fbc18d530dec27f47e8d5adf16deed6d465d5a2643a42136761f3f61fdc119f4d6fc9e230783211c003de135f3cdf4f380b2050c18460db496620e4eef1f054b88fbdc4f333ac869e4a8e6bb3efc5240282d2c99c50a878d114e61289ef9cd2e471f9d830900253686cee62841524b88949653af31b0881158b7c0ba3c8ce73691a58bce1e8600d3182c14361859ae96b68d8b8df40e86efe39ecea34aedad1483582fe6e1396ff78cbdb8092c5d2c49eee158c7f09f90e8343d7812c74c42ba4831707165f42e31e69022978740a1aca3e04ef353478092996a7200e824b12e3fc3da86f257a3f6b5610526b279e89b89321c36e179cb504613ce6688c950bab4f47d57ae1f94d8ab40868f4beea1113dd991522cf466908c617677be4233592c6ab86bc717170cb2a41c7105d61b697b3668345bd93d4ffb723fde9b6c470c08aee4391e78f1457a808686247021726c0fbf0f1f82c7972d5376ce50410a9c2ec181d80b6b0e4675710ca6c1c17e455757836e72971e2e7baca85098f7891bb4effadc2fa4dca65b55d6f7e4b6dbd75b161f17a72ba2631d821087ee42a99c0f9d61fcd5012d4e670020a68ccbfa77eefe881a8ec07c6c658a3365c0a22a10f2cca2f8da9a465d58975896d9b922820f1d222a3f07d008de3c781c57702668d99251df20c31b74b91f87dece03e869c96229a4af537940e1d8260e0eb9bd905f9a2c1be60628b1f1fb9ba1f940f88ceb01d41d39f9aefcb440b047ed3977df2e0c53e8b77b613e237fe7a3a2dcb27915001a816036bcca4d4136bffc5804d59a8a6a7aaedb571e065014805262f0b45737f1b678e3e8f417d0ca228cfb06adf16797a0fae5e4d199fccc9ae6420eec1dd3174bb15ee4b9a0afdf90800b321274a82d1ce64c8712b0d78bc316f9f7aab1ea07577181a96311107dd38a4ddae7f922846ab7d1cfa37a6af97632cd9085823dd09e77859c148d26975362e24d5a18b59446aa10902de28c78de0b4483af00c27a03c2b3b7878544175f0bed94d668174cc2f1cabdec920d159d36be99377a9ae0c2e521248be73074cc91a008d1acadbbe35e1017f831e86423302061f07a1b542e7cafbd3af67dfa536279a8bae12911fb73dd4f6958ecf17c48ad3320d4bfb67cb8f5056ef95a6ac3fecd4bda54945782ba87c31d9d7c3141fd98d93d7bfaa2e5afd05df4896d4ecdf399aed20efaaf7df6fdd5722c8f6925c1b19c39f29892f349e5d1aa25bf81b5b1aff6cc694ad32e83e95de1a503558e6fdee99d64f227e7b82137363f347b532cb9c1eceee68fd62af540007bb073ae24fdef88516ffd3cad2b091a00b3c1c75693208d216d3fe43da014d477b67232e46067db671c01c0f8b9433389455377cc6ee0f141028d834517484bd332ccbb3dfe118c250e6abe6dc621ce4a3fab5b1f9dc2fe584c7839966e95554901760f4177e18a2dfdaa4b11ca05b45953ff31ea8abb03753359c1b5ce7966ea9c800b3dc0cbe7c39861fa6b3eac1b23215e22220e6f8208340f1495804787c8c75cc284237e7488e42009c091d0d05adc75073bdba1798d1ffd0e77f8153dd3381510647cd7be7952e1ca50cb5e5742f520874fcda77eeff20c2544d493c78246efb4077029a9722e947a51ae5a175fd2659c2454f0a36cf9fbc1da28c7e493d2d6f016a879d06030c1fb1a0d6da4957e3d45e58cea5861b76629bac3ebb899ad773dadf5f1075e3323f01634fbbe38f477ff272d069376f1b77e1e00974054afcdfe6f86a97a46ba182b6522ae12e38f6343fe9306b2fb0d05d4eb4846eb39f009641536dc1320fb605ff7a1ad5c6cee9a05c9bd98179974e11b8efe66fb5d1ff40d1c5bf5680ac5ebeed9f38e4062ae71a21f79a4f41bc188b6a53e86a24b2c7aed92526c5303fa89b6f24b637279841276167c7410b71d3edcec7aa832cc2248115ff42136497c2097e46d7390780e928c7d5b820d6c0317b1cca4b3a8fd6786ed57a33261e40fd92bbfe00fb3e284702f27119e3f19e468e34d178f0c3e9dfc0190147e66ea06fb3bdc26ae783e587dab9a7d62d44863e260c564ad073777fcb26b7bc9415e6f8721ae965f6bc2cc30ad2a59cdc8e57a4d7a72b90957cd6b00a9693b40757ecf86ad914ab5f21fc88c069ce5c0f734c3832e83ac3bbf71014c64ca1d8f6b97b2bc2996e169e1529e3b16bd7e14f9f793e9dbc2652f2db531f1308166914b0ac380781a491550ab1be2ab7b31a1564f5d30f487695a292c9fad0d505705db5a002ccf582acd3abb6ad53604623873c5ec11d61f38654d1c68b4e46b6129f6a8fd6af9b537d8e4bf053c7949f2ee837767b069c84403c29c85786b26b1ef9e358b58255f9fb69e2bddc4a872cc6e2e13423293173b241b4b534359198e66ad381627cf08cc1eb20f2a38a2bdfbffa158b701c8fe3b8664f3911143f6ed728356deb9e6646cfd9b509872bd3c3eccdd5134a61aac8f19011e7de4113cee709cd78f328b940cbf9b2c8b513d1dd19797eac994dea016a1c00ee5af1910f00ab5272a28e0e8cce043904bf9f6abd9405d85857f6f026a3c574327cfb20446e3a3082008004871ba05382c9b246b2a8c60b73268bf6f2855f52ac59e3f4247c9f229884faf800e85b5c1c3aae75df0f7a200f68fd910a37981ee9d71443088aba57f6236d8b4c997c4614f5cd428a79c3e67cecb11f3ebe77d1b22f2f9c9442a7bfa1aa3a1670da6b0a7193103e7bebce9b45d3c0c25ca20f08a1f60591273cea0ecdffdd91805b7b771dc04d4dcd388e03481ed3a010dc52337a69fff3a506e9bb0066819174592c4b8968042e28d58f5b2f1003513794d7c2a1c3f2d226f42208cee0c8334e0c76432910d00609d897a7ef132e7f3671973f617fbbf11929bb1ebf8d59ad77fecaac96093d16c39d61e184574fb95e53b50a8bfc62eb2351f6afb5f79851e4f4679c8893662809068ad9c25beec00f4036ab4055bed7b0f51c17d5377dcc7d7e9346c8395cf5253baa7868b458669529549a49f3ea14271f506f1bfe20173a2f2003bc6d56932568a2a18a89c5feddceb0a5d68184335676024b63400fd3cd91e9b37cdf30c5cc61077b85ec0e38ee76850bff5a10ac7830611a8e19458cd84c0b113969436c538adb460e40996fb9e6927503268ac406456dac956de0d5aca0dc81d818b4a16a0f99e997ae8df9bf83e63b7ad4edd68b5af430fc02aee5fd65380d1db277265b21905da064377ece1ffad7e852b52ead8cea7af00d99613c6193dca496cbe194d8f4fec977345547223fe71e193d37c9e05bc268fec848cc9fd8e05f47c6a73d0213678503dc7f1c1365828e584c16d92769ea8b34e5b23a1c2cc8f6c3c9bed6f56832ae680bcb8f70ed08496610e7ad1747c8d1c9a8adc3890c91c6d908e7734d4e228ce1e1cb6f8b1052c572e59b6c1e0f0544e1db34d3f7f44970f6f12acc2c4710a0534781c151c214c7f42c91079f689520079ada7fc70cb40e8e409c8b3e08c955442ae3f2988eb342312667cb49e501c7139ab73b741c96e93d3551b864034d938b10ac8e8bd5499ba384936233c5db1a507394800a0bcd7614ceaa46e8ca7a7f17f22f162396fc3c2b240186569e59c6e701769dd83513acf068d6b9ba935960ff6f710afabf28003dd733c5b30f802cca6e9bef7b0bc8e9ff4eb2d40f2709725e0bd401a8ccf80683343e26eb24ba85304dd334d7ac09918f5bb819bf8b56375a13b2f7e18faaf59435e3c3ee606825966b30f92d73d28262f6f8b1acb3fe31822e6421eedcac231b77a15791ed8bd4678f8a60fbea5dd40f813e4d97f1dbfc921293b56bec7c02ec353f354b52480428b4d096887899904be889e6dbd4b8d73860e149805e93ec8cbba00e163a6bce3e6c3cab4f095809eb97b7d935f7ac710a611f8d91b12cfb28f9d1793c24981d692cb26df9715e8f84c4fec8c456acead433bd8dda1b006a7ea6c460ac8c637c1d8584138fde74d3fe2e990b4f8ace218c4448af980597d3d41d1f40aed356b467261f30ae911db07ca0d8f428b1db7a5804dd8316ff47ce54d70d41eb24f2ae61915fe70d2d14b556f1850cf4a01ef19d2a30dee0dda6962684b3dcd2d2e4ac78cf3aacc8a2af4f748f70eb8c6c5cc894652af2306385476b93e1a33dbe831dbd9392eb07f29c27f74c5d4bd5628b37b6f9ffe2e38c0751354f9605651fcae361986d436bc2470548597b7dd0c26b1ebb258181578d15bccc35a2bc19bba7c1fd0dd1ce32194029bad5ad56bdab607dba97c80fbbb96c71ac5a11edf89cfb0d82ddb9de32668ae523692145f6336d5596f8f2876d4803067cb759f520481472044f53221f30778171c5c7e4e09249db610de3e34ac4c4f1d2a94edad965e8e55a72f5d38c31836a0f329bb1f16f5349e068d53f73bd5db29428d37d8e99fb6d47e1c71af4f1072d5779e126b073db7f992d0afcf0eb2f80eed7592d09aab0c627f4a8452d56f9a3c6323fa947b6d3a2f57367149c6ca6425d9262a3a9acfcf345016b2182b4c7d9ee7249d9ecb684f1918cd8ddf8745c4611ad23ed0a9656e192967d91b23573272a37e393c77eb55acc538738567ec2bf2a38246e258c2d6663e76300245d9e1ec34546aaa1c123bbcefc5f3da6e71d47373f946b1c3cceebcfb6e7a60305d3fa0198bea6e00f87e3fc30203315fd09910bc1b3f68aa22b452e0c7a2fc2b371efaa252ab0cc2455c5731c5098868b40e5c58577a6de7fe2552632cba59387dca30ebd3cd1df265d10285ea776ccb3681bc1b1359e15ea78c0ba6eada8119b551390fabeda83b23e03230b7094ddd8fd3100a4e65e4e0e7d04d7042b72738b3fa38b8bb754d13a5d37f4bee54c21078365c351f2813c82cacfde09bfd73973542597f39df22422687e9b0aa6e6f2f42250973e2c06511894d6c022c78f5b6e5d111caa95b3e93fc412e0847ef5ec9cdbb27e9cde6228208d82b9253aba723b5e67756aa848e555d871802c5153798f8c37bcaec83bf30cde22dffdf0072a8d77a8a5fcb75c7ef7c50e7f792de10a13bf6a8fd9404ef9afdd182306ab038e3fa34ecdf61dcc82912f835e1b5e167da3e0aba9fbb598018a98c500a1bbb3318dd69d6b4cfa3d6bc3e1a3370f44b42b9aae3402e5882f797bac2d675dab25953c5f664b5935c15b48ec4570afc876d7bb4dfcac8543a5f0e70754e1535d620cb021bef35b745b0317c667c8f2888700232cb851291c928bd84be4cd2e349704127842b49bc4c697b2e1b5584093505fd39e24c4124f6af3852dac782b7fd3ffe40b5f723eb1b6a9275b0c94d6ceef5c5a001146c2d98d063f7af0b69192d9ffce3bd6021b623b6c9a88f9760654405afcdd43478b00d4f4837c34635d980a4cfd3b3817996479f02a06aab1d6139af19792dddb2a45426234fbc9872eab9f603c4e28935dad550f4a999ee7ed90880585a9676f021f6b71eccefe7407729f933d3106bb29b28cf932ad076662b1185530a3dbbaba442f94f3073fc180ede09e2fbea6730ef9400c5a0d21c53244ecfe4dec0f275d7c4b4168e81f566ab1e499d23f56df4cd103c98e68c8735df289ae072d02214210cdbce28388db890da50032c760dd35dab86c393e762a33ee2d87e3810352ba29701e666d29e190efad5c4be7ff78bdc73ec93e5964de572df4de8c7294795f4243e82cedb64168e2c91f507b9bca875306329e54a415c7b0a21fc59281ed0f41f6d87ec31e94b7e966ebe9678fa2566458d9b0b00c5ddcf97c40e25f1f0a500214c88c197cc2cdb9cfe266d3affc02887ebfc0e1c44bebaa5478f73bcaba115957b5a3ef27a0c97d64c43ae4ee55131c7250f07268cbfc6c309ba81fc102cf622d3221d32aedbd15cb63bb7de0db7087b0a39e85cc433f36c49285853431d9fb210712a7c72529584d567f59fafd64e0163839f241cc571da7ae90a75d9590ea23d045adb9fafaf97604a84318ab87a2d6ac892118131689a8ca04b4c623c8c2d79f0c3bfd6f0e6a7eb2b69becb0f17a206b977b4a3f1c37c683f2e3db9fb3a2a188406dbbc9edaa3166b25ef38e4d9207e15081a565a72a1289b637583330ca667d88b91a083737d531081568ca2a1b36822a865de6c230b5cc3a61c89f351414dbd1866ac4daf6b62239ce0c916aaea87ff8ac3e4edbf38322f15edfc3e1d49b45c7eea8fec7df6d096d08fbf1de1a1608463858df2effe97eba1d078916d4e7d39a05e07b37b4a023bfde2709a4a723359ac6e673b9ac9669fcf04351f2cd50f3822b53b092479e815ba056e956795c0c7743fc55a778e38cc13d2d40b5daf21f35ce18ee601656d4c4789a0f9c02f9ae4ac62399e0cea10339b6bda9d7190a9e8094938d01f32c968a34e1fdf5bcf967f7eb03cff2753192ca1318e4f3f244039a68211d39d4f411361a749ef1eae5957abb9518534139bc602f1930f7903aed972903fcaa7fe0f51dfcbeee9139a6a10bc552bb53a8925bb7d240210b703065edc5eeb95ca0e36ebc19a57f03f6ecac7c40f96eb819f8f867ed85c4458c90de6a52944c20b1e361f445ca1f9ed3cb519927cef93500a3656dd57835c3da9ec7539732e133b76ca396d161e40dcf58dd491cb9238e6b14a3240ec54b8d5054063252d607b56287132b1f455b708f15d35419c791929f6c3272dddd0eda8eddf52e221979ea304ebdc5485fb0195b18919ee270bcad7ce8a8d1e891253a0be47d35c4ec91198a68b095394ee4baa09c2b3c7f326e21528fb9aefb41d81fecd0dd96e528141a4e0cc65d0dbeb1626241c44b007ab638082f5428b70217149e15010c0cfadc947c306b04c2eb082f97213fbfe6e52e1aae24ea14c11325c590465f6079e769a30371edd2d5c89f4d461bf59d630045ea72b03995b875a04aed56486ff84e8241d305a126c4ec0c87f73d01e3241e0b8ecc2a384a598f508495fdbeb5f328d0e040ccaa1eb1e2272f4aa4446076b584b210f64b97f35e59d0b7219c576c7da0c2c7ebece602c6fd933f91d00c8c608981139d1746e818d7b772d6fc2b4252c924073c090dff53d7744a55ab20bcdba5df42b0e557243d64df8003e4d03fff07f4688a9ea2eceb515cd11b395705d29e5abb74bda1aba84206ba44e27133fb1d2b2b54b73dba950cdff40edd1cb946654783a947aabe977ea2330c721b24e806aedb3c4b5db34f92b1c2159846bbc0e6d89c7a203a95237171f6ffef60cf115cc19825634af1a703eb3d3d506fa7dbe13f172b7e8218d733a0dfad89dfd8ded6c02104ccb1b70e3ab40b4df1379ca70f52d5385b73caf9fbee3166afc726b920d9e2e5021db0b4132a96cb053c98154930ab3e42a76df32e029f66808cfcf68da6a89b34ae82695d77ee7d9c0901aa90bfc010dfe2555843e8d5d4af773c803bf9db936b8b89afc96a680f50d1ec828c59b350712fe33cf882ff6f715b0648c3e0d31322b53cb189d9c76daf1a9434d0ead27fde0f7ac9f06829947e7d66e670639c9d149013d6bf78a4c5c06042fb4484ccfe591a9462151ef78b064baad5208a8848ca6315726bde03d4140f4a89700bef7a498a3956bf329d463241724cf3bccf7414eece3e9df9106138b21d28ffc5daa245095b196da647ebccff12b62f53e9f740c890f00b24184327ab12cd5b16d12eaf16df0b76a6eef59731b3674b1b5c9017f0d4584815827f00b752628c3248b253110ef78de7b20d81e7ffc009ab387a26d2c42ca4df2cf528d1f2447daf54c4ecf102730196a27f1b66f8bd2e3e23f1cabc4faffe26669b237dec1ca75c25c4b98d8a26646496a933b66bdd426956aa267ad013d80257a1c42d6535a344d0dec6f172646f70dec6e46ad867d466b76d52f28355e765ba87c40c96dd29dc10ee0d7a3af1a79f8cbe902b80a84ffda7462e8272bf88f827b3fd0f9171a923c59dc6200a00c6db850935a9454ba2814f8d8f80cf7f51f207643099417bda84fee137fa49b9109344a1fd5b8b5d64f6040859bfba14786a6891011dd43c6dae12d72f9d648dc6d2109f3b257bea089999b8a1c231d658617fb9690fa4c324054774b6652fe30c75c572ce9c8790ca96b1ecdc7316249409b223a191a862acbd0db92145bea02b0fb6cf1465727ccd4767a035ced00c6c9256a96f1cc29fd550f98aa2bfe1b6cc1282a26e57d65be17f18fc31a566acdf98e865530c5da5760be8b2bce0655fa5d60ad917885c71ed76826f4822f5d012683bf56bdc09afa08fb9818310b673e2ccad4826887fc917a51c1fc0f67ccfc9f9cabb0ca90b001788bb60816c56f92c983b811e9bad6928a9f141fc5215aed81dc4f9e32a010c9351d4542ab5f9c4774ded210ecc44f6edc8108ec7eea4da2dad21847762f6ae0217b9dcf574a548f4ad5a7926a8879acef87a0af39784bf4f2debb622fdee61d7754ddcc16cae44aa73700bfc3a98b0a05e7a5bcf3c56a09e207545ad6054acf0a3145432c0d4773f7f59fee560fafdcc9c342a42beaf51c563853d4895f60805e805fade1a730c4a54d3d17066d7f33bf9f4c7dd46cd4aa1e72fab37a935499ab72b54a372108913efeb93703dfa0fbbc68b93eb23117f7c2d168b7015e30eaa9f70ebbca618074723ef7c8c5fc1d843269fd30ba7e997a872564081db44dff1e1aad5c4a42a45585fccd4f7932d6d25e4ff4e782ed8829f7c950c50f32fe62731895046f78a34dd321441b70c883a20e269c9df9eb333e5989f514546906fd8ecd853d7abbad888530e84bf375bc834d1d92f2f9aba63d82eda17df3369ef2c743ebf3da742600b3a549310984d9c7b14d3c8998cf6143b25ef486a480d57abac68e4856fc67d8796427cc444c63a3eef1f888982919adff9717e9f45d1824553b0e54f1ec3a14019ab0358cf40f076820426fe8f4ae4efbadb171c8b530da3d529c5dfef1b140961631b0bc8d29fe5e6b2fceb47037b5651f3fed0025a34b3dffe51e0a2569cf763296df6bdbdb6247065b2e08d50f5710bade04788c41cf6e9270834e5afae8edd4764d1e64a3eb88e7e3282f76faa5b7c4412b3ec563c96e9529bbf921663699d8b2af8f4bc5e1d3937a40da10670033dcb7c9abe1679340343a1875188825b201d5b9c3b4186a29b0559993f0e183a4e02ebe1e92439efd6b70d32db33ea4e79a13c69749b164dc9f5c723b59b423927ab4fae9bb42e6b25293c2c2e4f11adecc736f090b00b265cf2af5d5bea7b13a8884c9203ce0987a644c43e2e13f93d3f1f60a221ea42dc6553b55cbfb8de3d3c67961ea94cc8c082b0aebc5af89f613d39b66f158cb034806a2c899c05e369918ae4636e79766d51a30ba2c6654a52053d52aadb40bb2e739cdfe494f4b9f5bb0953fc87979eb40703a10ba7856454c2e02be0198fa5192efb7ec046da763c1ba2645d969ef05bb680fcf21a191953c380d8014d51a8733c91e2f7d56a3f1ebd6b886907f6d70b1a3e04f6cd9c827ee2a9f90e11e97eb3df223f8a46e382078d732ff7d71d629782e6b3e559778b54adb4d96b88abb177a9f9b186d753841accd94745f98998f998b9a49a4f02602afe5d55017c7a80d6e356afb9862b429b74ac3ac3b42c7fc36b26f632535416f54f409a5fc576dac9576d6f6947883273f2dc450100e3d88d66c6c9eb82a9f4d5f3ea31046fb35dd1b1cd7eab950c9fe44591d465a572f764eb625703422ce1fe45a35732c4ed6d6d90d4a11ac7866938cbf0d6ddc98fbb816776042ff118538df49aa74e6f0ad9b8396134d25bc2e863da17090043561b9b473e730b27a1bd52246cc5507e0974a7dc7d2d52e04d0b5106064bdd7353b33d27dd4a9a6216bd87410a94576deecb4f7e03012d3f1b70663518c68b931ea53902ba91cd7cd12ccf149a19b392ffde10f11d44f22018246d7e34fa22827bcbea9d27cb031de4b62d6683be6b1c7bf77cd6ee43932d2804e8a700e87a7678701db28a826a444deaf618045841c319192accaea17071adff05d6f70c18466d182bfda1282e536ba339c7617013565d451d43bb53097120e53744aaf2a98f8ba990fa9ec75bd1b6d24516c17e1cb7475890d37506e5fb9b740bcdd7a429af2430fb279c38aa9e94fa9df1d1e65f8b676d4fa2163f8dcf3c06d8fb9e0c9170f8683b8f3805abfc87963648e608581200960d9a82c0efaa09953de5c60a7a477769efa6a4202a168162a2c5a39b5d39a7f53b2d526648472182d90c83128881a34d4b6ba1d30c08e8bf4e4dfe5f0db42eb2e32def083442f7d9f7f926f56202d848eea68374fefb7fa1040b5db1ee1266136fa4d2efaa712baa74b4a45cb567db8b1c4f26e1c6e3480704ba26f8445ed01307f9406049d74cf88ff8d8030a69927ba733720d0e07dc0f1d63b193e5035ec1d5681a6eafef8e10faa2a775840496a1ee0f0d094d6e6ff2daa19ab41b6e7bf1339f0c422397c64a8a49ed9392063fb51fc0a096d374f6e6bd5a4b84dce10d58e99a5c0ae630a4245e87b55d793a2b7f5045c45c8da4758326e8ff85a38ba12c1a59230744a3dcb5f954cf8b494b2f76d8b02741c256b733b9389cc24fa523bbdd3fbaf5108a17591b8d7ebf2db0eb7ca5aff7497d0c7eeff13415c9f783b91746cbf764e3996346b9607bda97d12b97ee571c939097a302788e934d697d6e655ee5948ddd228d0edd455e32b0ece6c0d19be573d9c3d74a96f8cfb8cd888a26d2ec16cfb687cf215218f019aac35eec73b76606d50bea2800564766e162480b4b87b4b589f7d561e118c10a9f4c3087f254e5effad98a4388f6528bc3c624d77480c5318d85403caedb1f0952656e70385b89d095bcb9c286c1c3cc2246b55967f01bbcfd4a2d2d41720851c9410649dc2306b416fdb562ca1d95d6860459d0a91e262868c547368111b697dfa030b52eab465ab2618da5a47659c288bf6a3da41b03b8d508c7a2a98e2468df0e9b9f79e2c1a7a6656eb54c40f6ea2fdeced64018e23755f9dc92a6e2b3deca3dc2a40afbea0e840e2360e3b38509f0c719fb1139554ed81428ef99ca497dab0dc177aba600b007f8cf35986ec27c6361c2e1f2cec5fa1ed2fcb03d1b23514df82b5568defcf5129f2441855dd7e6d2f3be1ce1388c5c3d69c0f1f80a7ad7b9a59fd8102c7fc59075939397c52751c5c0e96a0f3e6b6a5979881f3e567724cd921a4af7ee5b353ff16da82bf2db629b4614d0f04b4d74014c73cef44f86fe10fa73f0acc14a2a2578853eb666c0eddf711eb2d06d656aa989e50e6ead08c5fe5c8b9e834f7276472ea689999b77717dd4fa6430c51f81a9f51e887a06188c19860ffa0adbf9107c25ad546c65abb6ab0e52cb364d1133b42117166177968af492e97bdc3205792c21dfcbc5c26c0054868f817d33efa03f578acb1d4cc5ae4611d4cf3b743e0db4010a2415a687c18cfd7908210814f70eaa9dd21178420d94a93bda32ec7c574e4fe18d2120252a177fce98be46eb73ed977d82481ace24a4497a819ea6a145b3a9bf1900f5b0ced86b56135d95cbbc5b0828330658353be66b07a906aa2b83e6c6d0d7f4834512e86124bac423aa2c98d9d47a530105f8fda7181a737e6ef0f18886dc2d62936aa746771c1ed98a404ca0917164aa082f897654b4847e36822c0e63abc7ddae303d7f8aabe8fed8614de88e37c10b194a1eb547f2cbfcbe4373cb93c31cc720cbbf0e015af4420dbe83d8198bc83490db60e92b9538b46d84289538e4e144e559438bf4fb23054493e09ceac13f4b4301e8aad34e7dd9e9f53d2efc6e25a4e61880d80a9ca50e76512b6c3a063dfca8ea41c45705c2a90eeb6714b75c71b43e0f2841fef8172da061ed1b8c4251ac3c9286a88540b9491ee0ef5c20625ec14e28975f42283451a712a64494317d2e55991dbc290eeb07edd7284ae99eb7af20d1f2d09d67ee76a5faca8d85ccb4a38b056a6eb297e52feb6a911ecbd46dcf00ab935ef5f9dd970c33b2ac4b2bb3f341dc9b8f641570e65d39114096bea868f59d3f7ed4608d8ccf916bff26295cdb173e46a6809b446e0bd54926a2b480ca61fb2518038768556dc81ab51df73dc124c31f209124ba3cbf72be5722306e2cf375f0fc5c4e4d23ea15cbd556756782cb1e7acdd4ac05c152e50f08d941b451baf9a113362f4e0523513ebe53f19068c938ea47413e7bf095c9f97cdcf7d5bb3b3b1597cfa5425dd2ed1730f8199f2f0fd82afc69cbe4018fb91f2c0caee4dc6406d2555bb57a955d266cedbd29c19d62204ce2faf3dae3cd5d936892390ebb72e0e06668e7ea64daea9816e5383e69465f1656dd910a81721da30388ad12840d209870e3759c17006e968eba5f22ed6d6958dacbbac8ec5ccc81c374cf00c10adb211a2452cd2b1e797591d3dc6801bc1657afae1264f8e5970f22040f762bde69c225cf59cea4e0a378677617fc57d3d1832e6d73f64ae1f9f1b1a03879b47689353f59ee50d3b5910781125397df08f87083a200f07b79b302fe66a01997f5d1dd08e7d824b3ed546597aefadcaab55e6f8494234e9c4731af354ae588568184974d8f419760b7c8b045fa3a52f32d4585a80f743551598d231db9040f11039762b4521699721136edff6e80de804e8e48898820ab6115b7ea02b54e296d97973e10f39b73ede7920d4615b95bb6277c90b44e59bdedc351635f88d64e1f58de3dff1e5f5f5d0de6ebbc8821fd1cca1fd07a0c61c36d546896996aac6f24a15305c24dd1b3af80257a388647a73d920b84a3e4808908c407dfc8d41857b186d5c86d03f655be36a53f5ed387755210674b0deb17c1c68759326509de4f0e263faa39ca23d8815d63a14767b7e11d4e8e0f152c3915e93d473e66954d592188984b7170a50874096f76b324f15ac06df8aadd78bc983685b71a2c6e9b1304b25903eb93c0a2f52613a242dc0666ec211e5d8b175de88a02563bdfcfee4974d784cb8ab246335253912f18529e4a447f22d451a503d0ddd7272e15de1c6e11608b963efab2e970e2f793e93a4c0fdf0467751e6004075e6f33f49bce9a1c5f6de0c8b4f7453fd27d564b5dcacef773b6105fc2da6db47ec57f3b0dbd98d02ee2f253b0eb471ea7e1f44c046a5aa5425cdc2c7745c34817b69edca14cd2b8a3c0af801091346795e808093617d768c73951f6d645210d2a7bd70ef85ed1edaaf26f35a775fc13bbb2da95922049ed54f2b27c77cc810da341246ac08a09d363c3eb7d01519b949dd6180256a46513afee319fcf548fa50216cc65ef091273bf163fd9f1bd3fee1ae1b6a15b5298dba50c90ccbe2ee12683a7c6299f6876619f613beb9ce91b74cfc70cd04192b5cfac183f7b5319d1bbc36cc2eb947b9640ab2c3d08312ad690cda6f0786094002c69b23b9b0d13d62e46b949c2016dcaa10414e86cb2005730cf935885879451fdfefa1f2149b7e3d099f37dc0f7f599a216cf48a45099adaff125fdf03df1b390d0f5be5878d575eb278f96b3ed1bbc6cfb5e3a4f66b0ba69b293d9bbca3cd81ccd9a285a107a92da7e7277f24bcd309f89c91b2373330db609564217c0596e14cc0cb4961ad436ff24a32424d133d6d17f9348ae4ed3090f37e2cbe90d6b0914351bb100d77974086246cf4ea303103739f2ef1199c8b1ba6f224411222eec149ebf4a20ba11aabfd9dd2863fcd49264e685c8164ba389f4a91fc949c73b1ea6c7444192fe8f959ad0a39cf6df6444bbaec30beffdddc79c95bdad75c928d489dfeffc85a371ea997db2711873aa0513a500e5faa4d68e21dbcc4f25610bbe4094a949911876981b3361ea04f8007e6793fbc4b15a8c565b690035a1dae8409d35995501f6edb7f1ae133ed20fb158b1e5a8429201954aeeb6f58e149b854fc32cfe8eb61c1a16b3104c1cbe47cdfc0248616dcb36994c225a9b15324efadf9cf679f0992d25e81ca72518445fe1936c301a7cec1326e9b1e388a0388141624868d7e72aeb4b0af951416e3b02f65df9b076571b3c41b5cd0436e65678063700d518d9cdf694713f1e7c0f6f25fd55d89d2f574371865bacb564fef8356b16c887a6b7a3e23975b0a18a020de0a478bc20dfc457f68d5fb63ad8233795183a5858d28bfd579bc71a1920ec41a5a10a098ebf5080be839ccbe5d779b3579febb729f41c8bb10ced03e8e8298a1ca15d433462a4195d745fa1808cc02d5dca5988f458d3968fd61565d7461f46d148671dfc8023d4aae2193ba594dcd6b4307290b2f7748c77a3159270f81ba53beb85c3d0e3f1973ffc4bebfa504ec5d9b3b08d35e072dd29e4ad4669ef9df7faddfcc4ad8aef11ce13b34e0141ca9c55766f043dfb9a2c0938343ca4beffbd5132a50a161db9adae45ba46e11d0e17ce181ad8ba775ac98b1899f4e18d9b92cf9d324df3d7c96d41b428c1850a821e2adf5360c8fda426b4c5590fa2e2291bfb7008c7c667178863948d9529d8329edff8ee87e3929aa8fa04ab91aff832312786d6970fc2f60279b8a7fdf81666c36cbcc25f8f3d2389f598bae174c51b521c7c3892c0e14b1150a1fd0de2c2b3761e29f704a0c712362c75941a7e06f3ea5db9aa06993567024d9c00a66c8b7ccc085bf767352bd35d83397c0e3e039f2ed1fa755d717698ca2b51025790e61e2d9ea82ac38c52d598629ae909edbd4e5ed042f17fec7359120a9100c74f2522ec9c271edb80dc4d37bc44e29cc36272b3ca9be93a9e369633189ede5b85a744203286b7b60d12a863b0202f42072f776b60f6aa4b46a31fb2f903f639949bec18379d437119a8a04a696f47d3039062fcdcf17d065b0e316020872cb0eb51ee309821676d4f9b22ac02e18f23cbec367a74a1073ee35b6bcaa7e983936a02ca5ea6868d325a695c609ee42042642a13a37b25a86bbe09c6f693a86c32dfcb7086b45fbe3b45a55f289dbdb16c4283675928c7c212e4175a974ac5b494df947d6b91081919bc620b2e15e5075a68ea759912a5ab7101992ea103d8722538b67e735a4ada260edbf95fcad708913aa43cb21ebd8b18d8c188a0fcda966c3225635e0d586f15dfeb6c5742c44232b3d07387bfc5166546dfb5f1861e1f0bfe77b5cfde13421d3a8e100e0eb028c2f5ad0cc7c535156e65178796cfae44e186e5e5475382d9975ada298f6f3449ef01966301efc10d3af37728c36a37dd7584dcf0535a207bd76c9b2c0850c034585a9c1590440f0302fe8df0adc9d314ce9d4af704f4c6809ef4d5a9b79e0c118c51c7529953f1828cdab6013ecba693a83537096ee9394fcffb9348ed4256285f498dd62b78eef10c1e1eadc7114d7466915e99bd44821798a5f5f79f221e01c18357a9e94bac78248811823f9bf1cc73615644f2e35a5ebfe95e9d7733a872670b16ba5471462d79a8db399955dd9da953acb184aaf74597922a6bf0edf5ff5e3b75042b62889c649a40e84e8fe90bc1d902fb8970893437ef944556d15ad195fdc21603c5bc463e2884b85a1a820ab33ef9e3bb2d18761b3ec3e576c1a1043afbb7c17a134e908d552820bdac5b750a6e1d29049d755f3f7934103152178e1af4bab3c030e785972c1a750697d28d74536952ff08ae9d698f78836c41366d0dd3e4b81437cafc8155daa3a741f0dd33cf7df0e915f586f33c0c60433d9b9558821f5c093272345587fd33414cedf8dc9bff7ef45ad0a72c3070613da7cd615f94f7c4cedbed774bc535d32d0623850eb80f5d67e2c32f39ac4a545e181ca68b2fd193b4e1e66327653cfcdd89338d7f4a3d316d3fec84e67bf50037d575ce0f1f38496dbb7db0041479b966efbc6c112c4df3d74f68f8adad7042d16dad40dc9c4ba7d7b4c82d85cd888532ddb5ec726ed9ab4cf738c16baa728688c204701618a50c5a742613df9094c3dc5d8603d60b756be97febf38c5ed86e4fead4c4e7c06228eba4d99e8dc2177e86b3241893d30901d6bb14d08d68d0cdcd09a092288a2741dbee03875cac8faeb2a23f28297a4417dc1aba5874424d4b6e2936478086ce61fd2f7f9788b8bffd2a3ae9832418c3b2e4cdecb6a9950916a501ead0a4f7009a421cb9de7cad6be0c1d4c38572b73522ae5481a9e032a7e55e4d7a964ac96b4917db1bb0c0639914deaf3b0ead471a84e7aac31063ec2e2d568727940796e5f3ca83138f6d8a877b0d49ed5965edb0f3f93f98ba831dcebd6ab54a7945637452f849d52d5cb9d06f9e46c0a338376214f7f5f6050938a596d81fddceeedb48843cba51b20f720e4a110608b4c283910d3c80da6de7d770d876bd27c48e7f4db6e869e4f9df8b1db1f54912440bf57e562c77834f6684b9a4da11cd13b63a442e43ab722d86c159a25323d92864d0ec3db495cde56ff8ea29bd4e3fb40985e760fa9ec49ee65e48b331ffdb72ef2fbcd4097510f2c6abbfb09d5eda1833faeb727c212963cd30a4fbc167442b1d82bb1bfd054c7c98dd06be296b05ef7a8ed66e30d01a2f0ae6bdf2ed901a88aec0427aa6ebc3266e2e6866536102f398680884fa605f2e49c7f8944b675c5d771a7353fd241786a98ab7fc147c9d057bb78a22cd29b8d74e60c04d8bf4a39cc3f8dd2e061146fa98988e95de63e5979d23fa2fc63b557f986bf00d97e528b95a4402c88073e7d21c13072fa8c7d4b668186e68800f19ffa7837f484be2eab9c39652083346c68682fbc43d203bae8ee82917948a534ff5cf52f66951518061f840e334d1fe37a6bc538c6a1a17f3e81ddf0aa9f3b6ed9573add23c30169b0399e3664369e680ad5facb97f1ad9a6debe15d0575ca498f44a20a52701e877e1348b2c72c9f07bf93c4c91f26221aa115da7ec1cdc09f2ac27da3917516d338ba7250ed2976a4aa5235d0f7ace560d8fae8bf7870ec98fc23d4df82f6b95ff9737d47bd974c7a2a9c7248e4bdaf997d60b319c929aa13fcc84b50fd943f5b5cb606023d672b37abc4e84f365ea668ed33c085a386b5c24b3fbe46415cca8f30bb550516aeaca40e5577ce91fd03a3191bb6a09cda8e44fa1783abe994b39e2fa1c86301d747738e53583452b3b755ceb421a61dd9f18913c551c4548946e1d2b5c15f837c1d076884221c32687a2867e883cce643ba8c458910175b9c8340d8cc234e0e7d57caee43c00ca5af64a66b475c752a87b099a01ed6d816d6b3df224070de928f7ee2ecf0b504267bd7911aabce18444c7e04da69975956e9b0c58ef0c235d6741a8700c64d25579e384d33c97c7bce82643ff59a51c4ef8357941dfc5229661e6bc2a73a38eabd04ae5a02062bace38f6d1b541bf5e9ae36d7ff3e22e9d950725efe490ff0e50df5374e22e5d10a1d701806ab4545e9edb2800d356c5102a8e4edee63bee9b8651a40962beed99cf4c748328821e5fba2f0dce35528675a55949d1563dd9a6e020cf5eebe642e03da4cc028335d43c1b2ababd041e2f7c99091b2e9293219377d2299f0ed8ece5636489e5965f860735b77d700fdae9109d9b2471ee0b01af4ba6e8f8397c24521f34237ce444b07e896754342520707e98c31932bc48b6e4fd84322e40980b409393d71389e9ea3a5b7282d486673b997238c2fb234e80fc756757bf5001b1930a4fa65c9be4d50dd58ff2cfd51163a2875d504f809ae1f6f112746dd74b3407aa3f8eafd7f3e67164927384655bd92040a5bb73e198d4e417a66908b7153c4016ba3b500e0a8edc2dc6a036acc84150172447f1125b0abc0ac8a14355a1a5c932df5fdf92bb5f32ea02e7a4c426fa8b3b4820d6659b3d124fa85299566abb48f7f75ed9584874bdf80ad06dbadaf39d58ab726adf09ea762e406ec39b4756a6a3f2494b63a718537f99a291030b1589a74736a6e5c669d5365391e57389dbbda943a28b8608466c911ee46e3eec32c53b3871f953d95d76b5ac088d2349e217bce8f04987a51132b4fd258b11667e2a5c7c0a7c86b3c9172ba4f3af3ca14b766290075777a884992f728ee08cf016865709cfa3f5e92e244c4009840dea29fcf5d589b7490182708084c9b1c8ce41d37dd7af8e1e6c72824f7c2a9a3799c53b797c2837cef2175b6bacfe692f238fd4495407d1da5266a52a767e1dd78ba8dd6c59f3667d57a08cf66211ed92040bf5fad3e8cb65c45eede21bdef7d625455fa1e78ef31fd40d1dfcda8ace3ce741d06d4a5cc60794b3f4c07baa7baa5dd84c634a61020e473b01058a8c7f67d7eaeb685c3edc301b92b05c33af80e51f2d174403bbbdff70a190bed7659bc80922d068afd5b68310e9a610057f4d7e37ee3cc8c6c87695a82d994c5b9065eaac68e52f517088d5422dc01957addc84d7d1ff1443d5c3d56f2fc71c49655d65875dea2bb475fd681cda3342aba5a81665d79058c246008b6a3ee59ef9e5cb3316c30dbad4522a8e1d3fb81415b5347f9d5c9f7ef81f19403c6a0793c946f841d2797e5ce0b15751c15c006e86f708f156b0e8007721633ef34e1655ff46e66c60694dbd66e938e1f87b555951dce624641c7452f20e94607d1d81bab05e9c071e937ac68a8816701f34a5e1a6e211d8de919b67bc941867a7e376a03095220c6865be812b975b5b2b2d944cc8f34e685a0f597f6748ace01063d619ee38e8628fcbfc0011426c6928ea6cef504ff4f87da99c998ee2a9555775e7348990efa77c3ebca74a29f651cd082b89475811d66b766fff00f5d6db52a2cb48fcfe13c73f612835fbb68ffeef57a2a8607d2ce0c9ff466ef3f16e34135952240e6f468afc7d747716719cf79c74800317d390090094d5e132044f0961db60c46a09f3fe986dc7b8dca1f515386e7fe7f60137d64f2173db01e4384be30ab93581d43daaf1a434d4d18c8be95b39bcda2455ee60e8ad307465e50f539f07588ceb4d2928e7061f0f5412ec5fa3d32718f55f46a20f4226d4fa03930b8e013d41f830b1ba0390d5af3c04cb4b475bc99a1f666c316bfe0bb1cb9490943dd594c9c79600c88b62a2bcd9c0eb4dee33843b8693f152d039ef4f6138360497b4132ee1d0c8003b14630d277fa94cf5da4b883cc6fa88ece1f6cf78a8b96502fc118d1932bdd0867cf0703da11490249d9afbe1f55004f51b7a1000fba2da937c975295a22b251d761c88769dfa1c2b5256dffecf9b824f1bc0c9b22bac5d44a5db526a3aa18a261b8ce9b3a90c04f2d8630ba8cf5ee402515defe559d9bf471fa0976c3298b7e94f3f95ad4a7a4c4a0dfe76d1aa52dbab3b0bb4af7fd1401b56c29d1a9086a9328ee4c08ec248e39d04afccc42def4a8e4e072c45dbcf98361ec3bc6f7481a56ca9c55b5cd8ff6696aa1e902a6893aa5fe8c081eb8ea8986916d06139c48abc914328b5b59da22f922774da83af9ffb597516f66f67cc5c409bf2c8ac5e3bd13a541e7b648c502814b9c5a8ec18c44715f7f0dfc30f348190e6066b2683641b134e2af2ad1425947337c7752af55c5d9b43358db1d1ea1131e7bb5bf17e1dbdec29893130c8a3488b37c76347aca2137ae9e62cc584e13c2f6cb9cd3bb7570257c74cd19b24e20f798d258b1bcbef5fde49cb0b9a678fe7e127bda0cd4e58a6833a2b01fd5d2ea557b50712377cb29ed5a640ce9c0ee886eba4d1520adaa4c1028fc12f8465616436fcd94e8c9376382244e107f89da7c2e80fdc9d534e9d8e57f56a2ce4c98eaae722fdd894ab095f6fbddc9cc3166e07f4c97a174c9817a481a2b0e361382b92e5d96c4e55fced16a9688777abb5435dccb57b3c12680f1a096fc1828655339dd4918739a8bc5d8ab06b1426d25dddbb0b5a81f001193b1cd672fb56f2b9d9df28b3a0ee87104ce8e326d90c1835b7fda6e53b536b1dbf99e00e15a953760767379414d0db58ccf341f3d6bba38bc2212de2ef1bb33b0b2551d75ad523621e037655b39bcc6b7b520bedf47144b8123a2dd4b151257f6d3d56ca25f3a60cd95ae988152aec87437f46060063c0a13e5e37cb45de0fc09d8370f50f7ea26bb02d13bb3650eabe695567c1f9cd6d18d21ec9d66829898f75e011106e72ad8c6ab66987981abb69d7ccf83e5960e69d665eb4d9327cc5594a51820b33305dbe70377e26721d7326c5d71fc028cb25c281b1f0485d28cd7a03c166074a82dfa053d3e88df351bad6f449218881ec95bc2f3eec60c18eb232d8a52aaf3db1afeb25249e490cc21964adda5b37623da9a58615100881b94a75f4d93a4b4af0abdddadf81b3e98418fe77ea9c95340e8e744cf84dfa9e14ff1edd848708cf2f9b379b6dbf2e23b12b0e319cf914562be7e9521a1386e8886ad67f8d264e3e03c12a5235901fc5375f4fe1c84d44bfa71b4dbb3cb5768e1bc289d1b3a4df58c512c46ff772f945a67482ddd9c2bbeac58cefb0fea4be82fc3b25c0f9b5dd11f4d0b9468cffcaba007ba9f10344f266236c697ed5febd6787b65e4b58c98cb2bcfa22332eabeb8ae0bb5e82d48765dda68ffa9737dde2b35c1e1e7ba2c39ea108bfe1a6a2f55434f8fd94a48b466e433caa5eba6574b6f3495d1b20976382e9ca32a9295b1662de22d20193290bd631adb97add09fb1afae5ea66016b46f080e8ce2b754f5e1709cfe9556da63f3d521bd0a6ebeef83c1a7e2aba60aae4cf70081e8ad13e78a22ac727210125347e9defeb121fbe539ab4bd5cdfdd8cecd58af47d038968279bf7895b63ba7a31cf9ae81a1a08146a0add922fe0a534144fc8b421163376bf67b8f84b6b42216f7ede1df5445a184cc90411cb05714e5d8ce063a4782637d6b6188a9d7f0998ec53ae5d56cd1cf9faeb2638f3e4e02657cc6cc114dca4c6b2b0f924622d4e3cb6965567aa2a7ec8fb143934acbdcf57f81d59f1910e506893ec9edea05497b1417ea12afbb3a145c3cbd532dec0a3f7b07d4553877b040e057790f4b973b28695c3bee33581d2212d3309e5b45dab5b01dc403c81d2e943965f3d64cdd6d7807c7e4fc8f82d028bdbb2eea73576edb37a81d427243c7fa33f2c366d087f087ba8604d3ce6c05c0b4514bb214165c3255a0002a9bcded046be0995d9406864292175e3f106de38130776457f17c3b8c91e55f85d5aec3cfda4926900c4005fd7904c2930a20ec94b27b5edf9d1f65ff4386cd2b07ebb53b7a1ef7549b0f2c919628c6d2155c39804ca284b01baf1d3f92e7adb8a9fb7141e3a98ff0c9a8a67fcaf9b4661115d38629ee9f074ea477a4d280ed1197df77d49a06ea94a7e507b390fc76679b79ea395752d7973198b69d1d84b21ef1b352be4f84c6d2d2c99ca9fbd0151356e35905bbb5693c2c60f0a6a2dc03aca0afb044f268ed48289cdf65188da76173706c0f33358df2f485c8b6b36be3d3cc7c147f7178eb0ea4755c7ce6b31fd21159b3c7dcd13effc540e933603ea9972722560e835729c0ef6dfdf75058b49529111b6e29ba64a2e6fe83bff17912135d7f4d10e731843485cec6c92330ace90e23099cba42845c1abb6568fadf29d2fad66062a215aed4991194d97fb2b40c8693ee8ac8fb9c6608ae7e42e359a1dc601072a5fc6eb727babd5d90aa0c7a0ad981580905470686dfbb8e28244f0ecf393f744c3ad60cd713203b8469a653e69d21e3e9a87c96138a117dee213f314d220882a3cd13168f5171b902516e0f7a50d51e5ef28cc82e74eb23424b1da4eadb720f7bc3367581837a2e38e361ed3f6b505f41a99732b108c3205ff6fb0854ea9c07898901b57d1f0028cfb496ed235654222f888163a0661b8c7466a9e6ba8ddb0c910237c4c57bc6edcf1993f6fe550a70a8c03f716a3ed22ff37e79cc97959c7cd044d018023228c0995999cf80f2bffc4574a71bd945752bbda4b80280fc04679baaff0f974f656800bd3baa0deb570d2cd55f22652254df7c83eda45a5d1313524573844a4723dea1c53b7700b571e228c0a9a9272c182ff3e81156413e4ed5d20c4aabc348f326b3fe6f7a1a47e43dc6e33a2367d03a1d39b8c69f669387a2b6fb458c06b74107b8e22a2df8ce4746cdda7a5345b43c1b7459828e97ab19f0804b3445d319c6f5a644277d190bcc7810fec531fa066fa832cd96e7602931d11d5161ca76003bea4876b41029c913c0293e1581ccc959a7439a1fab886a0b559cfa5f7f6a63ddedf150febb00470f61d862d9bf7b5a5f87361250b113f7389167a1a6184723d0d5490ef1396a4766c84e0e338ecec183084494f366a6a8c2e219e402a45ab7f2db693a72a725a128af7f8a696e0308b305719dc1f0a68d6db9d450af8eb9509face308b4cde2d6e14d1f1f3a262fc71728efe02c3319fd32f7ebce88162cd0539110c6eceb807f31bb3893828c9f89324b0f22ea11039f3f83a566a630b968a9e3024e4aa911240a2f1add4591f39300586eb8fc4ff29eb606cb42bc6c2a1a9ee530deca609ebd36939e918ef77a1c3a67bb2a788b231d5e1a5d04e99421788846627dccded18fae5c03b23fd2aad9ce876adfbe81fadd2050713701c347a86c5524c5434e750cf256ea00346904c724d2b53343be53df895215a7582a6287eb05c5ec0fc464f373578d16de49d25d4cb9f3a9e715c6012ae6a2a8f9c8778ee99876466a1aac144b8da39fd8f707538d77696784294e54ab5c303bb96c2c488ae264b69742920fbb3bae48827fc0d53b8bd915299010a04e6e89c62673553f5b25300be8b019126a17ad12c0b930cb22c9d71e2819f859fff4ebea85ecaaff745001d3fac8dbaed5f84a73d25ec0c23b63151be40e78f03271d6b975e2e7f3bf3fc3425a022464e06462415aae2d7bbafb090e8d388cf469f43a09267bc59dbf5de7564ed4f75bf73868318130b521c611a9afec258aa6281e0cf364fd62ef5dac8f29a789294927d5fa376105da6437f49e67507d6286ae97f1db670624d0f5dac307d8d486a1fead3f291ea23b5590eaafb779198dd66555fad7b29f823533183ba060d557de04176bcaf65094cfab49c99bc8437f9b49349aedb9c727c430021a1d4520cda4de62e1d38c13995aa2bf045a42e44dd5be326ae5a5c8f6d987f2d112ee63a8156c9180075bd38aeef20318b00c6d60ae567634ea624253dc2c7c2c48f6e2a513e87abb529dc6a770f6374988f03f8008e5b9e5cecccbe63a7ba662e0cd36ea964380d3450a405c42c885c53e9885f4901bec7cfb94ad7a62502ddd4cdb1a439929d2b33f5e3abd932482f166f55269112afdf31305763435fb4c8378a51f966a8249da2da57da9dc36ebdd298267e3e31f08c338db68f582866678cecd40184ca660153a96c5d5430ccbb440601da36f3b02378cf0dbf35954726814034cf2b82583851be58110cd6d706d21cd17e830d2fa2dcb995e25fe11412b5642717fcb7041e85e2b8fd3ee3d48c431986ef48f70f9e7d44041f1f8d8a5b80774a25b2473d0a187b99ba9e6c47aab8228aee4dd788aaea505f306092af1add3cd01955509a49cf3715bd58c872d95255f12871118dccba039ed52990183a3d3f6756056a28f0057a10bd73dfb1c67be1d38404ea2b07f9b90416358b0c580daa24cefb9ca078d3d5bae1a07d8e88a3a0ef58256a8ce251612247193d24369da70431f128548b6036f48fa928144126dc8d2ba9c837d1550a2c84453f39f427e5a53dcfcfe14d9f2ac95b201b38b8a8e67362d4ddfc32e54d743779c2f2b264b54635ca0b6dfe4cbfe8ec3f155a327ab2f88da3d3edca16fc114d620490d496c17a03f1da67296d21d9c89fdcf2e708099b4f3966b8e726fe2ef8c7e9520a27cdd508e19b9942cc305f5cdaac88123b2e7e53458c33248d44f845dbc6647918d5d967292b1cf2e81f1db061d4eaca81db11112310a39e617d04796569adedac9a5c90545ae3ca9044144df692e9a5be7a7d21b3934667e7c9ae74838b5a8bda323dd0f4d334ea1a04ccc7115b5b315591a9d6a2c56b40dc78404a40a4ea5113f83e268bb41e3c81199bb422c0bb9668bcb49a0dfd032dcbb059649d681da6289c84ec630cd847157c1f71c83ee6348c36d5ffd6d57aad62a401379ea3383771bcf732cee6f12ba22529be26313626dc3d738a28569a7597f38d4c3168d1387cfebf8ec08a952c8d705361a0b95a6c926d2eee7b2f8f360c5b7d011ec14829af008258f50eae75f214ad4e661e6b6ea0b3cfc316952973797befa81c95a2de02c76d3180e140069c304a42c21324e83b3559cc38f9c2e237b73feb2ff5e43aa6d0919f0b5064bd2492eb17bb35f61562d56730c60123cbe44dc773b37cf0051c9175fb96c2964592ed34dc9283215a6a346f78b55d2ea973388e7ee25536b3b1038e14be02189c991e779d7bc688c959ab8ae8670e1dab70f1e036f91d890153ba0251b16c8f16405dfb7f350b3fe82be422526a01dee951f30bfcf27b6beee034206d6a345cfc5654ea07901cc1e73e81cf32d2223715104318afb187b604612937a1f776d567c59be10bc5c21c1d7fb39017334728a332f43441c928bd7dcc27cc964d9ce6975d461c4a8eea5511a7ac0587049b0772c54d7554ff2c4aeb4c533c12e0c93ab1d0a91f376c0afc209366e135aeed59f51685f690fae014abda9424e5e54e1c0444b91c34ced0c8b3b1d7b1fe606003c921c34676a0f6fc0b20c01ff35f29fc158bdc3b9c410b9c155a249970c51c3afd6b634062dbd6825be19abcf8f180d431d9eaff54df3311638278393d02fbe64dda2eb44d2ae10e28399f8bb170fcdb736693ed5e610ca05f2bec73729cd46031b8d99a364b17c362b7b4f6a8d1e30873be09a8deca639674f23e7689920e9b29216184f6be67aac29b341e4290266147d66b9ebfbf8f434e33f401adb029f3243c701a166b87c55c263f5d9d364121638b10afb669bfa6dac1284da0220a965219edb7c96833211822f6fb907b7dc06eec06a5af335593dad190d3fac9a4fd1e78d1316c4486f2bec78c983e50141718d5f9a7aa106d12a3b09c9c509b8ef6a1d16dad3b1bdace356093fcc24030fbd808d2d728b40da9f0f03eeeab5e77b3d398b58912aa33373e3c182e279e61a4e85e4dc96913adcf67572f1c05492a619f357695ac9dbc22046d91a29f9dd5896dbd77a291b1563168c9206a002fde80375e1d4962ab74692d9d94fbca0e3571971edf1be9fae24f6f5b2c1cf5e8ebad940b36ae205e93e5f2ccea647ab65c505c5aa6c9f024dd1da23d080905ec8b64d295ef43ace2af0083d235e540fe309d8ea8ec8d8511d9f450d4cc40c6ac9cb273cea539d084f3acdb2d6b3398ec2171a1876bd30d39f5b5effc24a06495b3776411cc92cbacc59afc1a3c803a0a9ec7abaefc32814e22990b0e0d1f57a380241dc924c307c3ff546dee2b327a407c410e87d4e2ed436a2ddda8feff102ce0856d3830042cf8c55d2a918a944f441f793a2f3e25d34fc3c83a04f7761101b70975c9ae18bbeb6ed288594e3face7da28c1a3cf34b0f02db6ffa43f2df93444d13e9d8dd1926ef2660d1b16ad6b1f1d04584e615ba342bbe8ac293a13ec3112a7674559208dfbf16d7e044611148e5b08107789f461c02eabfab9adf69aa151c217c59838cf8aa3bfe1812c633a1a13e45ecd31bcab8cbdc2ec43b312ce36de351bb32d50b10339f431791b96f134207a5670e05cc72d5fb91643bcdf64e7af82ea90a69e9ddf1b0d9ecff2b4681c7c0e2e845f03ba56c318091f5d6a9dd14659370af1c065331e2086e1fe19b5cc14d13cd6cfadf241594d5d51ba0b618daabb7b581331aefac523a400451bc89bd996c405dc88868cbb60358810108ba8072ce10006911353f3378e9f3db196269fd8d0ef61e4d08c3bab4797ed32d8085db7fed564a6a1cc7e00cc5e20fdac7ce90fda7758d3bea7dcce972c0a107a38144cce356cc257c453836f07d12a6a2a9297de45f7f8f40e55b9e8aacc1124dc62e80981d376091c8e243c1e26454b635d6d6f43b70058899a11f76a70c3643cda273d257cb8c4932807c96e77929928e2563d1101d773cb827559ab280c167dae0dab9342cf95a8496921e21324efde541cc68ed75e94b1ca86aca429cf5469198623abdcf350f55d08f9cb64a48ed34513c8f917ad99d99f595e426f6170ffca9fa27e14f6543468b7def77c93b6d75ea7365c30f33d9a468470d93f0346dfcf58bf3021029c6bde33446b172b0b8db5d17b201e86881bc698cf9e37e80040cd95e0ab7777642a16ae84722e8995e484346f27450c0f9f1d6a452ecc92b2875b299c032e359677406c12641a9b0df4a4691a8f7241e4e3b99dc26046f19fe58d3386ca3a766ab4a99b27cd666bae139e645ab5ce2bda859134cabfdd86331353baf57fdb7c81fa4dee1948d737f60bd940b9682162fd4e2789fea514b69ac649a5ba665209ab6d07ca988608e92487ca792c306b59552effc21d1082063b1a113808484c58a4036f34c841cc3ffb6b23ea5b35697d421aee86ebdd43d295532418585ac7dda184b29f7c17dfdfea2d5303d8eb72242ff5b41e4fbc5c231d5b8a56b4b003761495004f7c8658a63ca639c165f9a82dd8562d33d02b1bc44312a142e6f25c18636c43450bf4234d892242da5f62638bd87a2ee00c03dbeb8f5ebfdbee0572e99822dd86a5a93ca86549cd2d69c55138ae738ccc66ab41e9271dd26107e88cc1603c0260fc93259a2e25ceb6b73ca810279e804079334c0c2ea1c2e00b6216325ad211ac9e1b8fb3e54ce5a8000ce8c6f8ea6f5e47db6cbc7b30c66e0648dc3c1e8bd7568d34d26d2babe900f90e4368274b755f55db67d81959c6bd51640223536b367522f1ad2321cd59b905a4b41774af1700b1fb1415e4bb585d2b1d446a16a12a715ce3b394a02a369a6da2dbca2e546a3e215c15c0fb5cce614b5118c3e0bcb22b21e8c544e6707efdfdd254a330a23928ce244029336817cd12020b232b66c4ccaaf9c50f3e7025892577f27dfce1e82f9ac29460bec814a24315f2dfbda1c3ee4e06fc7da33ce26d06ac188900e40584875ecc91bf3f4293083ed22e8a4cf0e0d698465207957b056951e73730276a77ffaaf1c8cb361df94d2410570cb59ef0e3a4c346f9570d41ed50bdb48e3a51af985612b514f3e952361eb7b04713e12bf35254be6f4893943759b1cc41f3e783c308f5c3ab11f6d2d7bc391d77c3e348946e1630417dfaf42f972a36f3a3970ceed79924bafa23bc3166a58c31259abb3a1b499c2074e1ee92cda9f6b1e7d4037b844b0442c177d0bbf6b30459966177f296d5ccb7735f4d6488ec255d7b5cba5f3589071869608400c0e354f7a1d7bebd3735ef5d4c3b3dcad9a5936fe27b22283855734c0951fcb5192dd48a5ec75461d43ea83d0ebe4e3bf714b1db896cdb4f589fdcc4a0699fa37c6b1028c66ed4041c57750d9c42c5c8e24e7ac0ae581aeadb0cd591bd072375f7b16acdf769c48223652180bd85120d69ffa7ecf37d5ef551e07603c062a66ef0328c8e948ec36849a00c47eb7f2859e8e5885aeb892c65f662f12d967cabc5dbd216535b93dced179fdfe3a3c1df2e58e4d4e5b9ccf5c12267d130eaa5d7e88dc08b48683ff9f0df9222a3e96db0674d6d63b368f7a17d5fafe1e01c096e719333616cc40912864f23b6ad6be8d35ae34c41ef075bb731c406d9a6a25fcb6dd0155a484210d3b844bea473584f0f02273f7516762608b4be6dbbf7339dd38b32f477c52fbe5e0058c9c963da10ff372451097a1ebfd0c6279a3f3b595fbd5be7c43069fe39c43dd7b2ca60f3a908bd318f1467d9cdb8948efd742299c5518e482207459ea0524ff09e243a8ab64d00b45bfb49b0621656e477d39c1a0636b621c8a78a5e01b7a2229568f051be15aa58e64b94a2ca59248c743a8d43254ea389f960c473b61376de372db9d65bde2ef73c4879f90cc6dccea8c3dc7e8c300fd1dbf6c5b8459509e51267ad60017061c134749a14c64d290b50501cdc8d7bdaf8a20cdc2ee1a97293ade16eaba7ad5ea0eb4bfab588b7ed074f5eeb5ad666e59937824c07642879befc7c8feb2f82797c75ae81354b40a50625e6bb8dd6b3bb2a5d853e71a3309e0760844dd4aecd8209ceb8513ec994771b4879084138135007f53ae626409339cfb18e94f22f8b0e31b1e377fbed119427ed99d48dccd7bbcc403ce2a11ceb05bbad6ce5479f6f8c1d9d67610859cad4b9212a2be3a8f18e113c5e7bf1c38943deeaacc147c065c9c8da028fc65a53ceb2d8dfc1fea8d71d724741e7496ebc675978c08b17d1a38e6c42e4753722d4d9674c43dc3a759308f8d44f56eb1505c3afd47239b3ef48a772c1bcd23d7633077600cc0692f474982fbe9e7aec8cd01b6ead51d04433a8c513f60321886cb83f41ba8b92f9ddd603a9f1594128cc6262c2472f9e7faa93d12145683bb53cad06e19da9beeadfabb384529adec8c1833fb7ca23be57ccb35f8d082a6b68057302538ee9b7ca253c53aac4a515a1cb3a3f9660834f57c9d43b95628260e2156dd5fcfc01dee344ecc2fde26bd74b7397e4e4a6be1fe128c6b57930d3cb8f6fb7bba02622cbbfca0b7bd9a49006c598d2656036f74df2aa717e71bfc8fbc34fd257c0fdc36214411b495fe2a19b015ec9fe599040bd1b3cc2630eef1bd022f8d93f02e1e5a54ee1f823219ac57e934ace238a53bac2be7950a6f2dbd87cd4338bfbc4819d9a9a1bf3b1ff9679051282b5127c1d59f32e8c59b1100484a12e6542b1de0fc9bf73c34a7ae4409b5467f24fe51cc5716c54aaae98c62a57508f9fa30de8942758557cf1d7fd66f139df4c52c371303e6841764d913004ac75d2571e430c9e3f3af5327004fe68fd402c837cf886de7ea921a8235988f919112faeb02a2a54e8d174337827ca17772fb2891655d0220228b4bfff417c5a37e5f3f791c12a12d431cdbe1160809d3e302c90407f863b212e4f72034ea289284011c32d746ab27975034094ae7336de079b875536b0bc55a6987b0e88e4194321a48c198e0bf20c80e784cf683ffe5cd885b7ba5ddc9c1a2a6a4135b344b881a6dbbc90aeea260f02d153155cb8677e5b2d405aafa2073ab881e328489b35a325f5bf94dfad274a61e4dadaff98fe0ce3d17b84dc9cffede218b675bd949bcfb9d842b1218acb3d1d89f3268dd347e6d78d5baa0d49423521185026e8c5a46b3c288032aa4ec751cf78a6c96675b72503b3db895d2fcf1c99e9cbcb47c58b8e4bde9bfc774e5d84d49d3a1d8cd49f7156ae6d6694f715a6f882a2c58bbe3370838bd57e107c3e9871de6de762fc4dc703924f3ad4acf889efd9a7c63e8845d797dae76c67fb6953513c95de7c7ff470ba680f30889c5ba3b02870a263bcee5dce55992896559a431ab8b4406082c97da343c67bf8e371014a62e1fefc3476ee1bda4cfc8132068205fc0f7d6eb7bf677124fb274381e6d6d63d1aca7ac1801378a1d940c69e0a61c96d88a6ae2b23c538e063330cf52bf03f7c59ce382b33f1f15b0e67da33b0ab5dd6287aff723ac9b0909174eb47b5938bbc3290a0795aaca53e42c86b5005a0890d3d4d58aabba80981cb6bda3cc4b99a1d9059ecf879ec219d3b9469bd260310cc6c121b35b659301ff61e9e4dbd478a41c39eb26578f1347f55bc9e820578c7ce73cc05d77827c48db8bab02c489d2f141e5ee8900814dd51d71bac23bb738f50e8d7d2c2bf6dd1d2d4071fc3ef08b7cde653b6f382e53cb4c3710abd450fbb065f302dd58b6730c406fdfeb8c3cd13de335cd99ca18f4c50f875e99596bf70a6d976ea6d198a26d32731fdbbdaaa567fa2933ece9c7e2951542654c2863a7ff604b8e298adcf0a2a1fa5ae4a99b4689e18493a58bbcfb6d1879d8e71dc7013720155d9bc1a1e5b5182e50668f8514655a42d9da6f0a2af60d081133648a768340a164579018a4d2b400a3fc3fbad96852288eb21768a05df73c04ba20aa8d968598b248aafcd3afdd0272a81373aa547f3f1c14164dcb7d4896bc2a4c9b55dba796fccacb3e8368139bb25c6da8f4bc396c836c02b0d292cef8cf51f10a0f1c2d3fa58ce5f8b6ff236c81b5c7994706152a8abcc620ac29406e2767d770e5fca6c40eb2b968f0dad15f46bcc537b7ea2359bb3fbc6d820a478f83c00b186b3fbf25f2cacf995b59204f13ac010052019ea4a946e77de038bd71b3c90082af31e09558b67acdae24e3231fc7e0be0796cf45bdbe8c1d12d6987df974ed22afc4159166a513848ebf63763f1bb8e1842ed242656d8c16e6ed23b5aa8b8b6debedd2582d1d7185548406ad3a89df0fbab76d1c308aa434ef9dad8c617222419edbe0b5c9a41f73aeeed566eb5328461ca20ab5d2d35e7f1361e43a293d4cc5ef0580cf3d843714835f4b1af931708214995d23b1db8e6755a3dd097c51905ba0ae25a4a5619295902f400c51abab4beeb3d22c30a4f334ab1679063de708955a7c5166d7e1b45cc87f63fcaf951e0b5f623fbb70a6046366e5bec3bcfc99ccd0dab80ddde0c435deb972ce1a2075c21b9d68c2220d579e6ac3f08e08224aa0376455d2bd6829cbfea6f7d0f87c8fd2275a020c599cda3d32eb12831e151d054be18fa8424bd56db49d1e07e48a6628115a8a376b6b448c4e545dd10d8e934703812ecd3a6cf23038dbf4ea44777719a41ba92cf542e21512daba8f9569be3bf8f9d25e99584fde918c670a1c810c07fa90d16112ec06a0457481c520952d855c110b23f846748d31e75fbcba51435c4bfd04d211b022ad213fa0b5d1f2a3f16fbc63d9e8a67d6094605be94336c0679df2db3615daae6558262541cd4e9c57b91e25969d504bc7dd1719712b3557b915e044a31605f237403d02afc198c6bf695038ade8d3f04c4ee0b3fc51e45ff35297cf61f06558ce96aef1e4b6a47ee80a2cf70973028e54fe2b079736d402f2b7c8d6c02309a14d9bf4c557b33b8d70bc44ed44aa0c9c306c4f65102333e06ba9dafd7dcdefd4403eb40e5812c95f0451bd0dabd99d6ac1f240eaeec9e3afecd446c33098aca2f84a0c161ef9995590cde8d9e4a456fea4f3b9786b684d3e4ab8e0b226a3a6465c22ce9dd630d1b73102dec703d6630e24d4ff554ac288792cbac993946197da3a1c30db3cd8578ce85f20270a9c238127f8ca7082710c2a5e46b4de54529c41f3ebf38fbcf6f4326a32862372b79607c515e2b3693eefcfb00ea6620af3cb000feb7c47978a730d6b19e3130fc5fcef4e46249f5ca16f66898060249d8ff644c73a75d3b00fa1c4016634262292c4890ee540a0244be29ed370f0454d770a6d50899e956ef9e2c974283d0463e139508040e11539401408315d735ac59f56b96bda17ceac5dd915651d8c46f15525e473aee6a7191491ab77b496635b64158b100119bf21b18b07c472de312822a60920ad04d1fc4e9679ed7e37a0f6f0f1e230a8e9b23879f32c01a5bfbbc7024cd09c04c39189fe293ecb88e91362f370e379b7b0abfa0ff5f93e8a743c295b17c40044addf5f65691cbad9118bb4ba160b3ca03d6c6d8c7360715491f47e4fa6762d991268094ac5f94a772510967c007b8c98183e283b83758c4503b3a8204df6f4cdbce3bb90e1f3b94cf19db527b3b1ad4b15b082e1a10041878c188880c999f7a1ea4698500e15c1a60bb4c6b2d16e33f9eb3a475afddda946dcde742b50acf2f4d86599203b1973ff9924f3419ebef52218618a9d8cfb287545740c2cc3e0fb71af141341f384cf67daa4fbb398e4d3952c033b33b904b9e8980e637dc4aca2d9144cfa7971cf3a85540aeaa77d1e59728227115f1b04c7b24f793133913d8cf5644c28a87f8d96b8aba6b081a63664ca857511f165d2460b2b9e89872fc7a57b5040cfcbed7f3c09570289ae9ced9d8426b4b2b26d6adae5672e07db241bba0eb5d71f8fad33091b74a3313a9e3e2271c3b6e9dff780cfac6cd91a337ddc3793334a16cee13fb6588a43c0c8d20fb301c217ce73bafd8abb74800395b72b137340dc80e436e3f9b81f2f3a4247efe3f02e106d4f7ac4a3e2cb47f45f0e5f89c50ee39fb73093657444524e87883bd7b04cfe94fcfbf9bef520db3d1a5545a35fc7c59ea8bd551728aa6b9efdf1995b9ec32e5fa9b1fe5218367a42d66d6bde77eb2fa0ed4dbbce51a6448788b5da5e71a113688bd47818aa729464d6871296df6fffef40b886aa4e089bea5928ad5423d528649441310481d4caefebe3b7a77f4e5786384a0a7e1bf09cadc606263e49a9fc214e3bcd6e65b60affe47ad645bff5579938c776f4b2204d0602b21533269011032222134b2459b8dd8a73b04143554ccc07aa1ac05e0c75b693743493594f2773b227044c0e6fac02439cca5e8115aa8d2939d7432a24a7f896ffedd1b9c145626fc4c6bfff00e5ef30cb30cd7202c279368c52a4600cdbb94b57a018a1d16882f5a066e390b7c1894ab4e6d5176c0c6e02e54fd7741318dfbdd8686d8cdc02fa7f0422a204009b151d20d8f34ba84023e7db1b3ac78771e94d92eabb2be0255bc001042229cedbd92db129fdf895bfb6e17488ab90e8dc229590e4b5cb37a9819fd82806a64fd108711b483c03eb0b46bd93ee8bb467400eb517ffb6aec447251124da928b532fe9d639a3d2e20b418e21dcb60e29fe3ca84cc70eaf142753ac2bdb8c24ce657fbb9e8d40f1bbbd6f95003283f80ca764a1ae09e55f8d24c53f2a5ceeea548b1a6f08660d0acece71979ce9ab525e8e03724d65b6fc6086222d22b70af393529a468d087ce9fdc223d136876d6d39975d1f20f7b67a28d1427e74f85f6ca9144f93f68df60d9101a38de282e1c437fdf93f84af034c85926e99d9a5ce4455735c41e4a819c1d09ba53e7731d369a56d2eb79ee9d8981602676da712a0b01295f909ef5fa2e34ef7b957ccc880500e2147d5025c8cf88a4b3ba0fa79e7836b3e06d708781bb922dd9c40c33b540e3f9305b0c5de924c195c73146958feefbe0f48ebfc169af68ec94cd6c221d925133f7b97412cf015820b89c1d4574a4b329df0f86f7f4c0532581ab220a4340e77a452abc55e77fe59a6ce6cc57c0bb78357d2f0e7ce7a6cc2378cd399dc09dd31993d760d16bce780015b4b9a8086e8583fe8643e271220a22de5fba8e4284e435aa400fd7d910bf33447ec468e7fd44e6375b8cc384de1c0e9a963f70a9d3eebc820b42f9962c4a09cba8053c2356cacd905067dba42ac117a72cc0165429b0655e41a5cc4c649aeeca23dc80dcc869724757f6af61461f372ca27982ce64d8db5b18a4868cda76465739da83804637980b29e7ce3ac8579aa74da7187e342291bc72615957529b9bbb699dfa83341b8368f6aa7f525a9ad4d104afb7220f16c5bf8e4887118d396f08be31fda0327dfaf13dd5276b9253105f4cc185afdcaa6dab6aa86c2103fe7b929c4ed81fb0ee5679992eb2a8f9f3593703d9fa8fdfbf8b19c2069e734f14495a291553d7e33f305b1d5c0a36f160c8673becfb611cc2dd263058f378a3ccb03916638306f458b82822a36510cd35db0d8af8eabb2663a0527f99d902a4d885b4fb7bc557a5fedbdac211bced74bf8a1fb3361ebbbd3268e1e06308ef4dc781cf435722412141d4ab4617fb879c4539204c2f33fad48dc1c6dd80b857e5bd8fcfb6324600b57879362000dafa02268dddab6b36b7745e4704eeaefa5ca5f8702f2f0d1576696a50136e82c8108927ccb6a632e4494cd8933d0e6ba81ffa80972cbe5d8fe32f7f8ab2750deb4c4728251d31293a9271d0a5981091e56f3df7cef93f12b17baa6dc73eae124b97050991f82925280b44347df0ff9c043e48bfab84e5c927588d5a865232e7da52900cac2060b587c8f5b2db0bec0c8a98126f9ba73c5f5d9d16195265c3a619188d56cb1beb3e28dccd495601c2756bce1a54d4a31c572fc806e829a982517b907fe825303a4c04506bd3689d25c9caf8c13b613215d3dd09ae9622818c2b4824225f79e09321619b614938b7961a2117570126153967489d8b4b27baf0848372bb4ad3aae72575b9467cd18c56aaed07057bfb5715be97b469b74ef45e9182e6ff7fd2632ec2f742a2e069ae2a225ba285766b239b7d98e81c4290ee9479d9c1f9c57287f8cd378932399401e22fd9e72ccb34ec26a66f6dd1d0563b4a34981ffbffb9215f1b5040f33f9a27de892c2c2a3c3d8ab08f87a5d0ad57270fb4e79d1c49fdb9aa6bcff974ddfd7e9af0a93a3b9b93744029d06f35c21f9153f0fe69d386c7b03b73ad168dfa00d7260058f5e313797459070027237cf64ddb592983943cb681d67c1569c8ca2fc75de871061c872aca41f0250c5542ec940da40b3ef383fb7fb840fa15533d29fce55df7263177903a3dd884c44faed53141195bb0561e6a1676ffc70dc01fba7f6b372f0bcc1e0a2f5a60cf662e08706c2d3182f206d15de8f6d871ee5ec682b78e11c57167446b9d35168fb45a8250cf0cb7934a85fded38da5cf647879cc0d89c0c897c54fd1e0db1c53cc529df877bbd5123ea85c7b7216418144909fe111b308f0b7296871ab403bb91b3c5ac4369a410d8fd8143d68ee8d907e628d4dac8bb80d04324e80405eaaf0688d24c187c955b8a462d99e52268a7d8ea30c8d9c8a5421c2d8259484ba7cfbdb322621287548fa49a5f9b7f3cb69841e2ee37cb7a4daeda52ff1ac285022fff233940a74bbbdea5b6e3e90fb9f610dae63a59431c9adc9436cc01230ebbfa7b5417ac02b3793bc1051be6d26126c659a5273560991289aab376f4fb2dd596e264022a7afc252a4dcb55bd2560874218e3121435d49a627e9c5efbf76b8b3d763253362dc78f5debdab8256bc458f04f501c9b140b35d5ac7553adfb83701f1959e0001c70851a710226c3345fe94926252446dade837d0c14def8d401633986a23ca8c4a9233113153bd691d232514077ccb1e62277994e5994bb517e1ab7511a6aca25944039ed724fa99d1538c339095878aff2b458ddb00f5631032f9f520526b3928785a23a1eca8011f4ace638adac0cba7c578502302a0153f99626f1f0bbbc3159dbb832608b9dcdce23b2a230e112d439089d1a33cc8628a6f876e607e4f02db6bae39636fcbf7f359db4f68a4d551f70d8ca84932bafd404fd22585b42d2bd45b959c2d8997620a6d4855d12dcf10d98481ad43e4718706fa0f1bdb2ca469eff0e941a0d69171699302c15cb55188d303cd3c4ab25c9cf86e359738b2e7cd737b8d3d4c793843bab465063fbf9faefa216543c7bf0a41d6c6509154b7b352bd7c5cbe678725b33568b71da37f9699366d8808a34d573dc5f7726774be53829fa77322e608ae9dac148cbfa2afec576205d3c4256ab0a538133ff9c3c8dd04e20fd4d386ac58dbad0486bf694641717f710e021442fc58389cdf15171ed5e8a1fe97b5194cb5a4bf3033076b2e3d751a837e9da067fdd98409ea7be4fc45de77af93897b711e5bb72d9be5e7f8ef256477abb335fe4e46fb504e4646b91aa3bcf360eac7477ba826c5f2a99e52e7d598b6ab9c08541fe3fc58b61c0a6648d64b26288bb2c88efa27ba2a1e83b39fe0e18a45e5d1370e269883b29472dc91dbf0e31358918a7cf9ba129f1739208a85f86365c96c93aa2a4dd416a3c67b3749cc777ad5763f7ace52e3704a6cb7924c56a9890b89a8081a58492aa72b0143aa39becda5fab2870ceee71268c5c93cd1ffe13e9c9ca44f58dab7741dcfad065a4431cf01c2b0487de6cc3dfcdfb664dde8c92a88cd9269a527528fc751a5b26e9458e7c68a2ce55745143dd8bf623c16838ab5cd378e1b89f501ec726121bb503058f59a3c35a2e7645d613d49f923b2a16f74d296df99083d6e50f3a5c1236316adefe2ac93f86f63beb954c1a7466dfbd6ce2b389a1c601efa9a23b36966f8462bf8e1b504d70cb788c7a8ece277fdadd63c1fe2797aead70a52af1c6159c4e0174f61f5822f37fb994c85c9bbbe0a84bd280b53824877137ef1159a3e0d4a7d9d44346238c277b8e677ee08d8498150811725f160614f96982caccdcc75fa08960c2bcf332474854ecf8da09e2cf3f548ecc7e91cd067f5a318671a2a66393af30144f14c75146ac15f046d46c3f09b8c0f5eddff21aefc8cee1f7acff543fbff470b059d1fe507bfbe44a13fc34bf533303c386e07387399be1fcc3df56718020493a80a7390275e4205b709bc86047c51c4180ce54bf61bca3b84fd9d9680e6296412c1fc9515753364b4b43501cca80bd1acaa1ba0e2c724cfabf678feea3ca55af7778b1150b6138595eb56a6a8ae0f331fb7a398ad6b946886b3c4a5223e36a94c0ab59301b61472559515f203ce74fbf42a492854d4dbe39a0140c8d2314274579a413e64d9c753588d5392f571bc97a52f897c6cdfc087ed2f6f16fc1ca572f121a9bff744134c8d57f39ccd363bf3b6555f5371830a5651bf9082df64f3471cc6c4a516c35c46236e771d2b76f0a7954f6c30a308bd87f494134adc020510d03c4211469f5cc5a1574339be9c73d9e686a56eb2e1e9e949df014096cd246448fb24af1f059374b1b89a30dc9b59fef61f99645991b63626112d4daa34a038436ae3aba4c4636dc1bd00c906a9f7d2bb25b4fb0a51865a2ac94bd238e6704c627146344df0b65129367e941264ef81a5270ecdc5381a9a54f9022d4d30ff829eb4bc0fca13b27e3611b2af0afb27621f727012b24194c44be40974bbcbc8302dfa647c97c60a9420801cbba158952c454a52e6bd1ffd39ab47b9166ac2ccef5b205427a75a771fac9f4d0f885e16516a04e12701d76223e91ca68073f50754214646a8110377e9771b30658f5abd6d2cc810db8de31e06cda6f48486041c4aa740bbd3ce6620787dde82905140acf5ea95dc6855218f2ee7ddab14f3ade82070fa3d3d1b55a939afc2f74413f60a9b46e21bb2267b45f6ddd36e8ee7575694efe5b975b5e053c5185aad4d46327128a346b1d3abd3ca1e3fe210f6d83ff26a2fbbd32dc9ab3fef5357e4933e511360e602ecc665eba8fd6902e391ccba962b18ad52cbe8d27fb0cd0a3bda3518e1e578e179c16a728cd215d9d42a11aaf39acbd947f154aa09d84e6c27e0a102334c7a419433d99fc747f955d5cc67e0e311548d8d3d8c0fadcc9ca9648d6c8cceaf5fb0cc5c612603bcdcb16ba24897e9d87081efe893c59443defef96d9e69b9b884447d2d6d500ed3a8b2d4204090f7dea69b35a6207a1823626f475d9fd0ad34a17f127d70fec299b1dac67a6bdd513726ca002525328f86a6e4147856f44823addc6bc83eaa17b7bba6f39584643f085c5690d44d911fbbf65bd393f55f14c4b49818fbc18f0018f440675e01c131e90f195c2f5884a32830fb950890d45a3ece6fe14a8e75544cd9d0e99eeb594263e09ea105e0ca27f88ab3317677058a623ceaa16c7eaae3653029dbeb9fe3d8b09c59efc0a9e752b4801fdbd18b6444b182654f1e4074122a07d8937cdb098a69565e5d02b10d799feec0c54d4fa327b3878b40b2cfb2c122ad29d2cd019b6580c775809f2662dcbbfc1426e9fc3ec632243d8304ccdd5d765597e20a8adda6f894e198f20fd9bd9b7155bb8dba6600bf0567fd671beb7442b7f2e2ca6edd6669ecd789583c4e14bc580528eeb1000c5c1372c7fcd91d8a3035a1300b643a6e06fbf5fe4b482a74fe508096a6542b9658f20480d92238af78a6b538aae202fee63cdcde74d13c846c21d48bd6a2fd4cca2b2a0d9ff28b5d580a29413cc265f1a90ba974c5be336db21ead53d683916fe16c62f1373565696ef856aa24ea3325b1edbf50266d696d8d7224eb8821958f75786bdae900c25e7c3e68158fae37d213ef2eeab9001ac5bd93493d41d06abeb59817f830cc68d50cc09ab4da5fad88a68ccf79ae154f3888c5197f9085b669bbdb4892209dca9f92d1e08dff0b2028e055cc8e4bf309a08c3c58e55750cccd1ee4adbc980d40cb9de1c186193ef78799b8d7c94b08745334fe492e814aa40e822607f26cee2b6037cfc2744af0fc7fdc2ff0283e5b135ceac5f989a52d8115fe3962fc5a55ce2e62f8640f027f1d02d1a2bda977baa2b2b7b2f09e2305b32c9ee3330388ed23566795445d7bd2926343488ca8ce7640a43c705bac5f216e1aca7920bfd99b232c5e52b62174c353044f525b86598c2b0d4ec382ac86d8f879b535bb3dc4622164fc0ae11770ff671c6b3e91fbc29e818b1ca757494560e983afbecb96c3232f3177b447f1e7dbbcc70836965653a9a1ebdd8240dbf2c21ab984a06473ced9025cfeca605f8f9e56e6f3f11cc021d39c4666908105588158d7b2dd96bb44463850ebe2fb4710b543c211d6a561b7dd374d628948cc6a8b64667f1e320291215e6e988e53d1b1f671103a264603a9a7429561930af037b04e714661b007bac14d324b1d0c5c26ac7bae5ebefab22d453d0144061d33c9647a02a6f0a3fb3f517e35d99599f2f778129559fd95ac041f003251ded7e92ccb745ee1f9d6d5fd08e8ed6c97cb00eaba18160edc828c86f94a5e44a20b287a941ff633de52a3a1e63e441887c71e465b73333fc01eebda965b346e9c5175933f009d317084a6006ede6ad2ac1818ef0b1879900a7a0162c88b4af35e1e4a1d5307c5db40ac48c15d518da112cf87fd2eda81002b0d86b73fa59394e0aaf44180acb342c8b3ce4cf8cf6e0480ed76cd4b43ebaf60244fe7953729bc54c71b38da42b6320ac35abad95c6701c8a88f40b895d9ded3e83329f5096bdfbae7296c06348d8784b56f4e7ae4701015a53a047eacf729c5fd3b62ca3dd1c2a57c6f60235ecbe6649d47c078dda29b22bcf8ca0a078e0196845ec648b54cfdcf58194a078e0ed0bf757a1834147a1e064d67fe9d1cc50daea278efeec8bac33c7dcac4ab0c94878c870e01737600ed14f05228df06359f17f2ff94efc9fb5f15c09f02fa219473c2db149706dd724d0d24371e23ba0de894cd4685957e1cd3d07ff4b37fe5de15344f931c076e1882344b1cb88c3aca4e6c599e0327464e6a1a2c18ee4c5b0a113c0df08668090dba85a8f514b0e3cd96578bc017282e043cffd8a3cc67fd63d2c92242b0c441746168f99619751120f0cf1f84ccb0fbd86a5051145e02acad76d595366aba8c612989da99bbb5dd60bae202bccd6b48359bb40ff726521aff84498202c214b46f4afeda5f3f3a62a29c21d6e47f839425a98513fccd4612e8eedd736fd36117ef41b7eefa33f2d464efca414ebd2d960d37dabdbd52d1dfbd30fc4e24a1cb41fd01131f858ff049286709c3aaab8061a0aef016882f4c39b24de0b4a9a2714e64a65e16d22bbaa68de135b3a6c96247354cc93b3048c49e610b71f6aa8cdec47d04fe056e7404664c7e02e95d478a240685af86b3f4740ae8e2acb645b4c336aceb577aa205bf2c4a1983a6036d33222b28eb4960f3da57ae417eb8a4bf142544336387f5a1206c884491dec0146a68bc767fdd9228a2b5c7cc40af0732bd337e4bf8d84b5074edbc6bc42ec1a7b87ad60e689bd17d90b2b3443b3a54a673e066d83f1eea45b089654fae1614634033f93e530c226c2f9e3c45e5947301ce81243e4a252931f48861a4a2cfcca17cde8a18010bd1ea42bb6d7d8a4d743745f6bc4ef454906e0dc547143ad9054d9fb60aca9ef234c9b1468ec0374b033bf9232364cdec1508daf93be54d95fc75f230cb3db86519b1c0d11b503250d6b9f00da86e90310378271ed1d7b0f06800524de82b6de51287b774099a8a23072b43b31b350c03d2d49a58e12c03b0bc5559850b9d2d060f86200d6b1db5a9f43c5255cb28312be889f06f1e4945265073f04e778c7fcf737c4670bcb1051aedfd05b2ba16a446ba8a958a072028620b7d95fd2b22a112964bc5ab1162f9d89c98b469a825f56ecdf0994fd7b45f656215410ef6d7cfad63286c2b3c0f68b2b3f00a6b4fcc879f12523269bbf749ebfb573e2455821804b92dd0414a1b977ff531db0e150aa086095e57845254a89b80952c94cbc9d37eecda07e9949a3ed482921da599b0ebe36d06fc7285cda449cbe7a773985d55b3136070c8c35856eea68ea0092321bc8150ae08423f51965edf6791c6acc2a226689f01fd8a9c2b50968191291cac1acbd58afd0d36bb0b1cc0e3cb5c81427fe69edeec5557423372fbd3008b6911c4204e6d193216c3d427da4b11903237dd01ca790c1c339e9fc6c3a5379add9018993a8b91600241ca6780d39fdcbc5cabc4d003bad15c9f6887c3378ab693ba1dd0400407b23bcf11708f5f0a699292b9470647b44d8abb03382f9181901d20ebbab489dc7a6d6a3191d02eb0cfd36f0cae3579a6049b1d11113625ed1212c655763ff225c7fa356fd2fd3ff2d2c5c3ae91445e4b96eb19ffe22cc59045e6fa0d674a5335aeea701176d6b4d88ae27bfbac8fe0ef76a476c139c064e5e83a8ecc52d39024e75e0a1443c06463eb4f754f13d396359ab31d9c08f5e571a7d133f68de7ac10fa8dc8cdc390b6ccaa0e41a91190a29dda7a7d76676ab095ee1d59d904587e96b49d32647c1da57c41cc21c694c562c20ae8c8e0946a4c17b6b51cd10338901a1ada4d1afb79e5a9da3ce19cd37b4b5850f215fffabd624b6181e40652bc03a9023af3d36608914c047e96fd8eac0eb1676a93d409393588aba25fabe961cb494b8450b28af67906ca6694423ad6c318cd4a5d615cf1ebf44ef5dd4b60a602b4276e200e3a7ccccc79b24a9e729f26c5f6869f9ee6dfcbf36b232246f8a0d94f0ca86ca9bc3d8dba2db4e5a3fde7e423d56b573ca56862ac5c9c4145da6fc4d2a1a3e23b7f213357f48cb19f62020fd5970629a57bcd75fc29528cb082e5a3b0a27b87325f84fc2f7d3fccbf252c4546a01a5de390dd470d00b7193773930ac0c85aa04e3132fc4919c0cf13486060e983dc0a6a664b929db6693d2b77eaad0d1482e40d01786f18cc3bf44acfe4197fe7541a4615923d1e996608601d955c4b36a247d3f5ae029365b4250c814f1d4bc5f1d22a51cc4052635f7c83f5bf126c68ddb945412c8ed00cb1eb46f4cf59830d283538a7f3cc713ef83bfb9852eb951ac8b053a56ad4198de921bb58f2fd4db95d69fb6e5bf1effa2cda8b930fdc0eb69ff89f9523082dbd963dd690894a7825c8dac143ae2817160d8f5ea756dfe0ddcec83d826ccaa61ddb913a43c3ac0813ee3a599aeb278a0ef516a6cf4f790a12d7fbd27a877928a6b9a975a6760c56bf9057f7baec7a34f0b6f655bcdadb4cdead21f6c6e694ac3da391d0515e2d7579e293e52b78668f350efa216b6a714d592df93c9893efc0c5165b376b86af2d7fefaf75492e4d70ff9d825a765216c077395828c8d387c1fee3b08949f9ddb643bd5285814b48c5e84383f17ef0c51f42fbc77e571626800d27af61ee672e5932cc60b27861c6c3f775c4be2e2389f908c45cc83e505c42fdcb3804cf07673602ad602ad984c9f5f121af50f5c7f0e55004001ba8b5c4c8b5426902eb640f374b7ed8e97286b0c1122ee37c00a9b371d364b919f9f8dbe076f590df1c0aab6894e49d3677a0d15d886de413b854eb467a5733b85109c2f3b6ffa08166be5b4f503a0f8b13b3491e7b319547e2055190350ba41ddda03719f4928c040aa1047664d2de4fa2942c4eafc002be5f598b5d4646e8c059c4c1ac88440ef9e0cc03fcd1fc682c6d6931ed48c6722b21f8ff697e514709c6de90b6c379bb4d5bf996dc8fe6229e932c1d29958317500c3470e61c0661a70bc40e77bdf9c2cbb4f23dff11cb79186d6ec6902aecee002a41c8877f1924b56b316d2be88c2f64520bf059c8e7a5ab79811ff5700861f5ed503e270bf3fd01af1028f69b38577054c27f5ef3a1496b16a877cef19976f3511c0e6e1d8c66e2169471c80f383397d9ecb6601a4906ead1362bec0fc01ccc89c8520497b1e8082fe49e67cec6a60db560b9cfd51332396e28eff7b7ea67e3eaa6157436abc3384fd01b9b2ebe3040c158824686f7b12887816c2ce3484347a2c63c52203d3d0286831c0f37a8ecf99e2eb40de426b29b7525aa99bcab0099df7f7de1d562b61ac7fff06d8066f43ff87e2fd8c6e8eb92f075a9fae0c36c2d8627114bf7c562ff9318048919300faec9ef99ac10ebe079eaba11a6cbb263a1279445acd4c80a9c10825449160947c53b083545952c834cd412472ac1547081772215c96cb6db59237dbe32cf425f54837e7353943128556bf01beda0058f56bb3d72724a40fe092e98680f50e9f9181891965491e39b31f830b57e6c0613c2a7ce7e401e854ec4410014b144b07565a4f101c23e063b479a641a5872d073d489637f5d619d36ecdde77a89a86ed8830dd295cbaa188de5828f505bdc6e25827f8b4a4cb389c92c58bd003a38e9759daad580ed10025f0308f9f46dda09edcbcc90e414f9ffcf42253df090d13ebb042c688eab18399d8686f2c3dbf17f8da7f21d6240eddbf7569b97ae925bbf5f324340d6321e40dcb9b7bf66459df85ae87901366aa9f0ba7c9a7bb006af905f8639d4c248bc5b12312d73ea55bbae1b6579cadb8c7992409026087d9a380c127a9d236d644bd37760780e0d04dc520fbee9aebc6542a16187749ba91139f596fea13461e3d9396a422922ca6d6a8fb398a3af7340dd75c413f415d0c29b01f137be677c2af260159d7d7ec9f82398a7586cda08d229c586a0549587a697ba6d17d3a519121b4df2a8c13a394c2b911d476d8707aec75cd4a59352f817e1fa176c03071d1bf48972562a318b257508d9fac20f74f0cfd23b9f8ff94e62e9f19c3a6389e9ba0b16959cc08a8ac26f60536a65d59421aa12524f937703956599b43592eb370ab6ac7bb17519f9098b94c5a93c9be70a3858331e818c568080321622c8fa88b7d3faf1108f3ffd6b27d5e547efe8f7a200ae6fd024526225634c51ec728b608c57f5eb0cfcd47918f90333ff3d9b964bab07a5370d3beb5cbea63671cc22f38d90d6d81d8ba9596a82191c32740e4789962136024134be9019f3886863456efdc9db1bc1978de4c72e1f9c3f7b589444e174e38957545f75a2903b130c143913366e1b102e4296c46fe873e20f02d7cb8335a60e2d8be416a6153e678b3e5aac56ffe6366a8868ce0e5f38fa707bc4f84511b334cf6941363c957b3df878d14ddda474c9b7a02eac91586ce20d7d6929d000d36324c968fcc3d48eeca983e06a901db22b2f24ed3a63fad6e0b98c37b25f6861b4d9af2bdc4d53096cf9cb4e7b50d1469bce34cdcd7a2ce886891e0982954449938c92a10b32130a6defe855da5203161fac4aab5b7a78ddbbc4414b461dcbe3efb8acbd7d5193aa73c73513d4571d99fa06d0cb4e4d3efa55e490262dbffefb1d6e75ed553929d9d182609f20898c10fc34a80e8e12facaeaea19f53cee7782590fa4526003cbc08f50e9427cc2f83477618934904288a311be3d35a295d28fee032655a92b2e583233277916401e3403e17b09052f7913d2b1f9934fa2e4410040241d358274f1c927988a94ea08e2605a04804685900422ea51c71fb4763c9ec702c5a00bd00e709bd094d946750d15f580f444cecf097f480fb1e4719faffd687b3ea887df3540c50c2db9c39776a39a743043f967d3681dd26f0d162829185a93e68bd1f9f61c580a9060740b0234295ea1c6f146fc2e947802367a2ee68abda6c3b5f8487b82b0ae1afacfb46d2c1591a66552aaec47e620d060f98e74004726104540ab2b93f2d73829fa5c52276dcd8dc5a51ea855e7ad496ae5af9412f59b854a0bd3b1959d821e166d5806566964ad8b06dfca318d41a83c832ce39b9bbb1bac0c761646815a89e9c037a1f78460c05873def5adeb9607ab5b25fa41451d886ea0b0d23df90f4d9f9ad1947de1bfdf4fec5fe8491c1a76916bda3c256bc573b3474413b6a26ba6b6165cd9af9c7fa8c4bdce0403596f7b1aacb3b1cb288f8f71f59881bae4ef0c8bad03d37f2e1a22a0a4cbff36a988eca2d1dba5483326411506b92f2e56ba94ddf8b1584644cc8d429f36fca9c6415cf6eb9c486a9ec8e53e890f075a0672702d5da479d9614e238d1f8cc4d08b5a0f57b7b19ea7c494fca09bea7eaad706a9acbb3b65862d23c7ff4b310f51bd120c06b76a0c5aec429935387a6bb91000534ca6b2c97659f399a11cab42031f5bf887a7d3df7a00e25868c1e89f048a70f30ee59ac90970ddad77845c71b5eba0b25f0bcf789b1ee9123f35b4bcd8ab549165297b35e95e3783ef0f02e5ae8e3f8dd56ecc806f1336f901083ef5def3ce902956f0bbb1aff74f2bd3a1bb55208ab2e9f86d4d323b81555a80facb148510ac7c031a3970c1e1f9257114e06146e914e4f3499a79bc9c7e711ba2897e6e1be3b947a6dcdc5274def8eb030376d55e7859d0d16d10ad75bc6c112ee32e7094df7e2119191853fb269aff0aa7d8658030860f6cce3432dfa7481f173a15b431bd57ca501691483c7496ee899d5749b8639e57597a7228efee385ddc420ab85f3ede6f72064d1b088d042a18e49be9b09e449e2c0d009032b2a2e4e6308708295d8c1f1633eaf4dcd0482c7869263aeea252c308937eb613cbb37bc1da38db2372c440d711414e23992671a4c9dfcc7884c5b263380fcc69066200281d3524189bcbe9d0446ffc8e39b1013551278a5d1e2638b751681f97972aa1985f42fe699044d12d439ac08de74756293064b948e3aeadf19c9b4cda996cab10f3d45070a67cf670e244b8335229802ef2843c41e24f89c5f1c4002769e3a8e86a7276f6dc1ac79ab17590ab2acb76d00b18481ec799d1af2b090374a3414618c91903f1fac11beebc9bfff9128d88df8b1750d28b8986354628201731ed844fe3ee10e7c6d8eaa74787c0d14bfd050e443cb8ae531e8e348f95275ed6fe13448da3bb79c8d3c6dab8ced5d074fac57356ab4dc34a5a28621d49a0defb2ad32fba90b3731ef1d34fdea6cf2fb28a88bacd56badb2d4ce9670d74d5d304505913d9d9ee8d114d41cf0a81355788432e0f468b44a26b7d0dae4a07f98d2393edb15eb537c57447cc73e5e4811cfec441cf5834ec58e9700ed9810dc62c1fb550cc8619c3e582dc6edfb717e4c38844baf3aff75daa4c34ecb1c1ae4f4fac21498d5c7aba42a78960a27e8d5c3a04a37c9411fec31cc11c28b054556d4ac85ec046073f8c06d427ababab7c331309310add8a04367f9a4ae08e45fb833a6b94be0cf486863dcfef1ecbffc7166517b2c74da21c011d74c704a6a2ff7fef26055ad6679eb811c2d1c60776c7a943d66f556517fddb6de2c23534e0c32ef8394da70aadd97c228d312c4e81ef789e301e532e7012a1ad6d282f414cce3253d0a2eecd5ff0cd6d0b82614f51f24ec4fef256c5249a939200196e3480cd294dfcc0a56fd555c84a970b4388d939ac0eb24dd284458e717a65b1d73a7f2c31b8a84d66c6e1ecf786cba5b08d5ebe62832d2fc5db5910deea15906baf795bdcf51cafad1e7008fc85ea0c1409073bc0ce3f60881a8efd8aaf632316c8d62c9c6bea065fe1aeba209639618cb7cd4452ee78c06a1fdf726ef35c07f3208783d5776c608d15858937c30c72af8a0ddd2412fe70b352a554d7f6f3b97f1c55c0b8f91f6f64509f3a5cfa4f7ebd2b446555caf48d9fc44845794bb808c3055dd4d2e98d2dee9ddffbf325e625e9dd5c5b2666e33dab80b0188a16c845b2535b49ea3cea3d8a9954d62dcc638b656a9d42be39fa5680143286d106a8f3bd5940ce191c3755ce0923c625368b4478e7eaec8380a281aa0d8fae7b98831a5555f872353791dee4a84f98cdd81c0b91df6150292a7a7bc6c8f54adfa862cc405a704d623bcf4e0491f9c29246aa7fccc00f39e2d84d39ba83372321f09b77d4901637b0317b8d2ab5404d1bcb61b53de3b9ac08c8011b37e81328a6f080924605c1ac0ab1d7ebd2f3d9dbb1a5396329b12fb824e8f5a8465fd84c21cd1596d985885f89384077418f671affc7528f2f0f87e12f5ee4456d388e22106d279a5d5a144b789abd8e888be853a77c3ebf9809396c1cdf655666987e03a93f54ea2b069cc6137d7c07790371a2ba616fd487caebf3dc4a7c2cad6a31f43ed82634f841abb41625296f098c155729057d2074c92a115dd0b7af04873e62330d2b1fad81069d3db8d6c2fabf7de3daba34fd522f0b4e881801c65336729787575d9f8df9213ecd54971e8c764f2b1999130de9c5abe9c572565f4b56afd4f6f5a5b450d56a66c2a7ddb0110d24fbbd5871036ca28ac9b435761afc6b60ed8e92be9a6cc49e5ce6e17c313f278a9468398382ab09ee88d2571030e56e8f16804c5780a71de7229b06bd68c5a9b16773b44cbe70e8276926fa26148a1e5d39de80104544537376d2543b1990a54ed25dbb6bb68dd1f95e59260f2e41fd5dcd138a06c4a51f2e610b475547d4d85910eedf0d50bea090c5d04e54cae09dbd7c29f6b5eff407ca9fe269b8015b70385e05e09c138c3b532ba03d9bbf910e378f47fd0004233431d7ec3911f8cffdf57ec1f367581799e7ef7ccc3d91922869dc8203852ecea8acca34bad05c37a4efbec342c905a2b6fb5460ce1046926ddc8e2dfe3ab69538b3cfa453ef7078d057aa8a2448b69f8a37d3a352a915c0d6f13fd1cd04f32783699128d8306a72515f67fa8085342d51f085c3c9842fbf8752d92307aceb03a2af60374a1cd3faf3523a9f8b20c6ceee2542e11077405970be79230a42420155315674a4a1ca7960fdacdf00522f9d619a680cb6ffd5a96562a04a944171ca348f1c4f9964d7db7e65c90481c38a931c94aaa51a133f2dc61cee6cf67952b4ed8506ee064295e36ae68a3abeaaf7cc762e214136b054f9508c7bbeb5e57c0990079f5aceb7806e41c120fdb154e9f83c5d280aef3db3cd44835087b64c2125679d8549101bec899f8a565e4755a05e6623efca81479359dadbcc6d3e8bcaf11717f5b6932bf9c98d6ee844cc085fa2ac977cf660bb15cd4058e7e9cbf146232887d0308b06ae92ebf2846fb1f8317f56cf69e84d40a482b21f5abf9d4edf2b6b46878d20dadf4503f6768ebabbebacaf6da75baf6a3f28abcb1b1e54e3f28cae0ec7beeb051d26ca3b1fa0fd52b18fc5475707d09656e2748e92aa6619c59f5ca1b5364185c15902d3154a715f1f4e49d8ca3498b039ba8deeb1a1be084bc9a97fc10d1118788273cec5933356384578323493a06c6ed38f8580e9d041e8f0b0a14056fd1a82f37b92d85c188d6fec93eb29da4a85086244ce36b416bd34f7caf136a24cd32795597c3df5768489ac0500b58e320f0428d359bbe4ee1ce8ba83d071c618febd83e2650522fcc9efc230c81fa9c777d200fc8aceb26fa2c59ca5b16891ab81d5dbfbb3c7088b2406de3d4df74e1e39349d87b7777fa2823d24068f1cb7827ac5d474c5b1293c4c34a798570e991653a9e3f42d5b7931c21c8ac2c5d508cb9cc71948b06a0ae18a2b125a725ac6fa7c228ec07b6f1b9352c1e2e69b058a5b71f7c020a4268d0cd1b66ecc6c71351f36c0338c61a08672e86125c9affad596f63c54449011d16c5f68c7c4b6733bb28088623009dd11f61b1402f2b305bf221537403e3003171251dce4a9b84f748365da32ed1c54fdaac10cf11e10a8aee4410db4085fa0203b89eb8ce5f4017d719f6ad98471686d18ff09403fc093a46934f83ae6050d9a7bc18c048e397c444b6e7f3880b8536c55fd65595c5e67823700dd9a8320b1b03f2cbaab558bfc769df0151b22e4464863054b5b36f6fbeefd267b885bdcb862096aac6a76f2b99ddb177148cd1ae0d29edfdcd707b50eb929cea739904c65fb9268e1aec81cc31b54f77d6ee346ea09b2c8cd88baa1100ffc54051292c042f1c7f56ef842c226c71597ddfaa14e2819a2a7d9b7314ef38cd9615aeaacb0f03e7e8e30e91cdd48fe014ac9db33d4a2c326a167e4a51a5476d3c06a22f1e374d22e578c1af1d646a67ed3579bc7c96d486d9d0be5224027fa9ddde761983d88470413317eba6bb55ec07897cac9b43d7da5e2feae9231c21d47901e97d4bd1b10072fe1ae94c9c146b072dbb29f3b26ea01e6e11221fd2feb157ea3a67f5b6837de9bfcd9ec4c88723082b8b52b325bb946dd31248731efb48529b574217cc389e9036122638eb10defcf3e07d01a0db1727a7c0f1590096a7dcbab9ea38984ce1359cc2a5635b346cb6674a3a6d7f00b6c0c137902f4e758c6df3075798147d8ff6ac676b912ada7c79989e982c42dc9e79b73d16dadb8d93eb56a81f266b048beeb88cd5b53088741485c93037cf0f77b13e863db22f11b5bd91fb52b9417393b061ead51d1fd338521a8abc68c2d577124e4c1fc86c8d19c7c06fc41c764eca588d178474e463451cb2e4f22e196814b7501e14fcce4e9bd7df3167c672f95c5b6dfd1d19221417b362d752fe22165a35ba83e2191e6977f3e5e3fb7a027ad6c08c3166fa295f34220948fda5a8cb3f5c98ee0d1f1412c7399cdd963e7d3b725c5f295f32815962f38f85c3d10eb343691b3a38540e50acf4a007984fe19867091df6d388b8308f957ad8fa071e7d7d040dab19fb283fa2c56c5ec5059ba691d64d84fa4d9af7dd6bc3214afa91cc16482dc1f28069adad043c9ed7b7a6e232c086cc54d00fe5cf3b579f3d7243279ab40f025eedf8cb2654b7f9116f2e812da2901bfc7a28389eaa59dcc77ebe0b8859519049377c0aa0ad64a980bf60b90eab679d6c6a3c407c3807a123296cfe03e20752ac83a14015fd164e0efa6a66ac9f73272b6fb1707ffb98392ed77f4b3c72fae3b5ab1e498537d6a1997f1fb02b50ef2d311c0700f576e6774183c5be50cc420b628efcbe7231b73ddd21e7b48bd7dc19be477a310b2bcca68ac3626926859369cab30b2cb9f69c23b890b0452219741054a6b6ea0359cfdfa932568134c05a965f4a6d83e5ac07742c68cdd4d9b445bd61c03a7c0db9dd1d4d819701add5e8132d5e509df5e47217627144c87092186abc389463bf94a2f5abed8942b19d72b830e56e512565782b33ad942f525be1618e568ab722c694c5f642e7d310a7a771e6bd79f8a1cbda910b3d9ed1ea8494ce0fba9f7f172ede9e0dbc5215d7c6145122411edb997748a7ffeaae62d9783ddb2ba1c7bbf77a393b983d12117fb42cbf11dabd5092b780b8fa1ee47b36427ab5f7f16c23a43572d035048b94c86fd83d3356c6e699740d3ff3dc6403b40b7ad4e8de06f65186904613ff7d9e2917efb2152996eec6019972604a614ad77089ce5497bbb619893b5a4f3ac58096dc9e0c9f7fdc577420a5d54c91887c0bec7733ec2a4578de64a04fde5dd0deaa1942afeb54ad6f0cb7feffcc2195d2041756e82282b182d615db7cecfdbf3cb6f6a240b745072cc9f4061e58779ab552f40b51ec7660d67851185222b54fca539fcf5556f3dfe04474b3920875f010eedaec8bfee1c66b58c948d4501334fa865c48bbcf827955606a7fff5bda45be7e3eea1ba5e6f51cd4bd0ea5fa66982a207fe004ebfbf543d7e0844a875cd783dd6fa479d78fb2caa7f51ade625567bf9b0390c4fce6b801128223cc286795ae846e8f74d164e607741713fbfee51f5d634492acdb99fe05985acdd30b21e06c1830a567fa1a22a1b0cf5e7b9de9ef16caeceff2b19617c3d53bf75728fac8b79cfd4872f5f4207d0791b51ebbad596f64fdede51d7db4d771a597ee41c39f94840bfa219ac5ae51c871a5b969f312ade0c92ac01034db7fa3e874e2ebeeab06b16b1d4a93e1094f8e5bc7513d91ef64e7324ccddab51960965403301042a8c27c2f698a9cfde1f152a753038b48e31e51221e2416d2de36ff9ae55b419bf74edd873812b41b25be5a1db852d8308a2f06f9fe400fec183671a6f3f68436faf87c6c500c4defb7a9e6efe4d6e2f6440be5f0d317fe991a2b882ca7f777206eac050af8b4e37ad260e5316a53f201b38dd7081b5bb6d306a359de5e67cd38a2695d309c6c368f85075a90b54e6097f8443556177fc4aa5142ed15826b5e5f4199a646cfaaa0fa1952a0276fec692421549334c0013ad335a6f584dad4f5470ea342491f02635b971465688a705fb331826f89e6861b07f1fe7c2ae3abc4f690c3bc3e1ca04441f376aa61f13f883b41136f61c1f5bc74d8bd6eb114b5dd19911464ff1c366802401c9f615c08a6781defb61bd0da652c9a73aae976506089af03a33d25b84b3d8ac02ef3d619006ccd3ddcea7bd1f8ce8a1885598a4b5f62f25cbd4f9e8a1a15e112c08711cbc0553e47bb488b33e7c9a3447b658cfb16dfebce3b70e7620f46978e31395aad3ffb3fa16f92a0e38f7887dbacd5b6ee2f35c2ae60088f8415b9df6b1a4c003b23e9f7028fc2cbd51d9f3751ff4ab50770f8159d1d406e2c57da7f1e911df9b2376be5b1acc3a034778407a3b4aa856e09463589592084b0d6669f7216b049d989dfb95e191f7fb08498610b05092afa1cd642e453be363b87ce03d676a26f66d861af125e144c5298f59b17a58d148830b8cf43efdd6a9695cb1eb67a5f2ee62815ba58da6cb4ad218b70c1d63fc17dce6e5004449a9724523b9ddd3f577212828359e2bffcd0a0737445d9bdbd4989123851261bc8e6df6f5c7f95ec93fad8de35385a11dabf9f02e917bbc0be1d9c6f32f811864091f9b9e2899811e7df56a61ab917819201f4f9ee88358974f0254cfefc545e23f54d1f44cf87bf039e508af687b780290278a44b800d5dd8d10ade7839747cddf5d215f5381520155e77b0d39d77336f66b3ee98affd1c0de18ebed319b14861ef09910c144267a01822ab4385332bddbe85035f7ff7783c6f1cb12ddfad345dd8b222faa6f2a43159db03b1f14355b85dddd6f45294111251374452c4b3f3e12424f77a9076502a8cb7f18edbc7f4dd3ccd1a54767786fb74146c1001d8504ded6392592c6f171d06c26266a390f0625d54c74a98bce97f4d48fe70d024176f56fdc5c2b1ddcfc367d14b586b8d64dffb9870eb5f2d64b851b296cbfd8cd4ee88d28ca019eb144f5b9a3b4179fd7c214d23862d0a85d544ab64d15e695d4d33cc8e838c8fb90635cdae4bdb7aca04638548c5769d20e0d3a83dfca321b4f2aa967d546ba79fe8074bd3ffb30fc385101b6b57a64feb3f5a486043c092d651910a9cff9f9d3fec19c2812de8ced7f9d98d035dd0b3f52ad401c58a9c4f194d62385f0bfed3da64fc11c1bcaa4062d7d40eb2a287efef3a9d636b6d56ac4e02894d6d336016b69bb97cf971bc475a8e4a60ee3f21926e074d048073df75e0a1e3699fa2ddcd1106cb80024c2dbd3b38b731556f36e2f7664fda4f894acbb8e1a9a9cdb95f34c9fcae7d9216ccc579b427f3451bf05b34cac3f4e08d4f2cf667c4071887c340fe95a4ac4a7084fe123920e3abd454a6cb90f95943991790cb3ab84342dc324785517d0bb7f131ba2948c6938640792b8372d7d0ed5c9ae8198a8f0949eb877fb79c352e40fd2e2a0fe2a8e65c18d1da31e4c9836c474292147ec1c913cb49204bd5d5729e0a55f799d257dfbcae6fb193e7040abe545e036555c1a818ea51f20fb68505f1424b0b07dcd9cc1ffee66531c45fad663f6bc01f91018c500abcd59a833971a8d41526d1902f1d667a3e821287927fa787e67de522389f9e2224ed7518049d84259e64318785bd00f99c5e35d347669ff02c6538656b74e28cd9e16efdc2496cc517cf1a229f010696738b8ccd9b0b7f3131b37b501859a59d72f9b298db4bf1ab2b7d91e3798c87738cf5a719ddc52e0bd499ac1a154d8e8dc97853050129cbf79739b168934fd58b0518435c57bfa31f4047068d6b737670f0f80441c50c84cb4ee92448136040e815918ac53754034104f33dfc6439adec2a6972c4e3ca9069250c9b4997fbd063cfe4a4cdd89b9cb36d98bdb88f1ea624624048269b643a2f04538ba75ccc11e78de5a07233fa39886b03abff99e8b224fe95ce631ffa541377a34c883088f784eea0be347c6725adc05a72b787b0f5ff86b89a6cf68a17fb9f2dc8b750d2dbb7cf94daaf6082f17f7c0d5303c708f5e0c0e526e3660d5c1aa8e22648c33997d0248b4d7e97ad409cae5f58d71387979b790e2b534c068362985805c6703b5a72a398053a0eacf6fa7fe8e203f68cd9c6ab37261d9ea03e8b6f65f0a72615b295ffbfb8a38cec3cd75fb04729486abfd77986a98de4274540648d37fc397b1fdcc62fe46bfbe19869b0e7df0b71e8f4d7b17de81743dd046088c8bf546c7fdf5c735e9fccd1fbe3ce0305fcff1c45ea8cd7700f486ffe78d1f6a2f48536c1c2a1ae483a7c03ce6eb0156c06178d4aba6c3b6af5eb2507e7644286228dd69794eeb160d7c05da356a6748c516737209b82779d87da28ce6bc728c91efed84106424b854a05791988d1588697c191f6837a3bdf0b616ea33d1bb5b22fed6cc3803be9276c9af20eae9b2e79bc1c5ab593b370332a3453737467cbbc75a0575bb273bfecb7b8512d7cc4b29b5a17e2e1b0a1186abdcaa2780f3ef4e14df68812880d420c56f979fe52d717dafb6428adc1488e835a7c37d9168034bc758db160298a64ab49aef8e474e9837db101655405e8e63a039e5e4965828387bd43e7319cc9a47798f6a05b47cb1b6f3ae95362c9b6067b5d38f5c9b6e57228ba1311f8dc8e274c7d19674534ce3663c94d8fca06729b1db762cda139e59f456647468927ad00bd1883304e4e099e2b474889041e9fd430686594581454c7d81394a7d5d937f347d0183121f502f4f46bc2fe7a14bc16f385d7c14b50bf983f4a380f6484395aa186701b857c24ed815862b5e0a70078cf13f664f92c8f535d5eb9a58bd3ffec3baf5eb82bc5fb1faeb07f40a03a03155e007816a5c834133b3c7682b13123f3d82f99b6e655b9917280d01d8e886431b1074df9c54834fe6ed7c667426f01c0028df001a6f1c9bdc18d08c06d6d8b6b15bdf003f98f2ff6e49aac7e03cb2941bc58860c1b3cad1560d5b6478e7c41d3e845129af56f98fbbe4cb2d75bfdb666543a1cec68758573040c0768f0d3a7d7dd066c7ce91dd40c3ec4392b9d1f23af6c9c8199cf8ad858991c375ce5c027239921967842df33530c2f97a0f8b33bba63a33fb3dc49f02d8ea1597180ea46eac50999a08c30a9766bea8efd73c4ecc8a6dfd32da22aeba1e57396fab950ebd7b449a0b7dd4aeb140ec8d2a32ea24ee6f91717e6aeef57338d370d0455b399c862420e32619b6453dc0f03b6cff81d2c744675aee5085d2e790e187712a17900615a6e5b26d67c12a13109d6ef517701c20c5e82634fd78e08075b547e43914e942f1a32f894dadfc055bb677c830882b901509470edec83a7154eb29585ea2b13e892c521815f90be71b3fc601a7bce79bd090a6e6c2efb2e0d302b8c7bc4f61c66efb8ab99b2ffe8d433320b2301a0073a5d05e7bbd4c2b81ff28b17697dd2d90957882a37f33dd44557a9128772f63da7ccd211b826bcda63580508da09fa75a07cc9e90bb02c0070213d5fd9b30fea53d5fb1bf99167403902a452a8d9d820799ba02509bb3ce78a29e851b5adf2b87dc9a00b4dd4e64429f7a614bbcd04913a5560d0f6a5b5d02da4fd02d7141e9185ea0b3fc77fb4bd438919da51ddcb579d9465617e8cf392e69536208811ce3d657c887451c07f459ca4d3bbda109a91a401b460cddc6667ec7877aecddfac961e34eb8fecc8c06d1baaa740e6bcd828bdf321afb7c8508c9cb5b284ac68d08463e15d6c891cac8359393013f2d219064fe64ed36784caa8b88e4cb521d1b4186898d34d4573ae27855b86205ff751291ef2d90df4097805db4ad35c3787abb611ce20249a4f164e1aac9b8cb955e37abd6d38b0f6ff4861e7dfb785d0164c57234ccb90b961c218b408df7c08676f4a5d066a2d5a2f6f0546895849d43e525f10175d287a7b3e52b2b00aa1503acb5e3e1870d2ec5f1dd4f4f732a66fc1e49cf313abbb0c4777e87b28a5160647b64c5bfe175b2146cfbe4fbbb084152c0edcf09927cd032ab299d5c9b1e38bbcac61b20ffa86dd6ed9ad6c1e36753a179f964bd10b2b10978a4ffc41f571aca9008b349083a6a05c6560f9b96fba3b948e0ee9fbca18fe466104e88a4e4beb9a2765d8d31c7df1222b1e17c1fe96081b5a361b71e286a9a65901914eb3ab17e18f352e3558818b3dcaa10dfade0d1bfc46b8ce2ac250f8dd095f00d1644d91ee7daa4aa860076b4c0351e7fb600102ce3c7c071c8888fb5af7b3f893f5bf4a671f79e4e4baab0eeb99ed00ad9b581d1073d95f2f1d675c0004f3edae01bb8dc8267e6ec8a873fbea5975ef6114e71e5c9f60e44ed157ef28c07887dd252e3b7c3e323d9c3713ca26405f6f73b2df7e176a8a5ae7cb2e1c971cd06296cc87f030cdd4b9bf3ef258618b42f9d8bd646e4464ef5607ba522d57a965be9a0cf865fc35e5c8107f4cf16e82e9ac7dbc444546e702bcd3c3346863626829115b993730273f8bf2d27bee3a78e4ac29d0c67dfe254be6c3f03cd489f73e635901fd4c3add9cde8cf4cedea990fbbc71cc80046cd85f6f7f8e7ff75d08cb0192562afcfc8e6850383507bccadfb8b632caf826a75cf213b27f2e0c40808f2600091bfa26451d1ce4a7a684cae78ce690ffec4a53bfd6b5124c26d5064745e8ea12a60dd0bad9ccd2358d95d57885301374f43da1098dcfb45502d821da508e0d5c5e2d532c9192af614308ce5458fd62be93e572c99f6d97baf5a6bc381ef9b407bf1dbea730b5f5a4af80ae6d21dad48ee2f00477c8b18e6f471451389d00a6e00194325c2d8deee0282e086e45e82a92b73cb15c38536fc994849759aed88e5dc1fe6d816b0d89773d7cb8c4c3aa74f22aaec9a4f9c3a58155594ae79f7b2254117daa17c5f78c130b0d25ad37a30bdca46558b5d876c628e0517c9e50f9f294aae81c35962aed7439230fbd9055ea338b3cbd7649b97f1ec89cccef5dcefa032890c52d6839fca8eca0e9ef8534b099dd51e087a0cbe88314545f0328863961475c076bccb4ba1ea4cbf66a7493a927b0c9e8b4de9fdefbacda88b7c21eb7955d793ba5fde3d06ed5c4bde0a368a7b6770782fcf72a0291af815196db23ccd9ec99cd9cbabc068328f6a8bdb3bae7b8da92d198c32566e47aff8b266d02bbc3ef6341b9397cadd391ad4a27e12e503eaf2d44bff49c6cf99e2087b73324ec239ca711d4389fbbe0766f6018118ae2010b5071d1a0fdc6bce54f3348a9bc86f46f3f00b4625eb2a7d89d6018fafb963730fa9a81f4eb21487ba23347c716081605f03aa8ba9e1e54abd179c1d69481331aa8e966c02695f51a62984c0e9ab4e2f30fce3c95ee29f2eea114fdc35c25cac7195e467f4e8fb65a9c090a5c4d82bd444ca3af95fe0097032d55b494e4e07e51c45f09b4250aa2d81555cf6b12d45052cf043ed3d28d7a48e9d8501ec56a77c2289eeddf68725c9096f2a385f8e5149f36de103d117f939ecd9a9b3ccf890bd13ce5f5c05e9c321177a8f135ca062f7264718bb6dc1823d53229ee28c4fb08cd0977fed6699c5ff188ea1446f92daf7e748bfca8a4f145b587e89b70f6383cfd08a39483b85ffbafae91c8bb34fed56fee90294d05c9f4569c9a4f091a7f6910654538cac63765c9bd9eae0e3621238a78fde1ea1485ae67d84d7a1e6d4befcca99057c1519d04003eba22a314a9704cbfa330cfbd56d96eac1482b55c3f8ac35f03360543df64adbbb77785c179a7d10348b4d7cbafe28db216c51804db012f41794e0de3f9f03487c4041e7b89fd14d54cdf97bbd8709e7c8c7554458cda4b6e34d900bad1255b5edaa07a68523c74f9cba2a99571b57e65310046d7d20591bb79d6c17d0aa3fe20bf92ef9a497132859b1e1a4567c10eec0bfea570dbbd1a00d307a6949782b97362bb12b7016ea8b1b37e726c13fe6f0f37d559e2933d5ad8b48097ba4531a8171498de79742694c6a13420245dbcdc15c600d2d3b09942d7509dc93e879eb0ece8d4271d446c547942e6e7ef904e2775533bc45724b41c9e723d7fe90ec02fae33c3f5493fbbfec73fd213aaff2bb0f962e96b38f0ca521c84136c442078cbbe974c9f099b3a8165d6c109c1134e6cf15fcf4cb648d212b36d9f8d9fe57ae1ac07ea308fbac9ab90a112ac0b5a397419067ea327cc00492d0d6dab524e29e8b25a26689bbed662f80722c0820d6491b49c23415ecadeded101aa056d83528255c177738267d53eb3cb81c86d49a99b787c36fe0356f25051f8862156cec5b5296949fb9fcece69200798675c0f5aec3a72e527fe454bad0526b2b12e9ea32abca7adde14f624266cf6fd202cdde2da312b30a1990c1b4e0b139a09702e8d7aa5393476c7823cb611b4b060c7bbd823f1399fc432fe7a54ab00ee1d5d61d9ff24d904c6fa43f27140f9f56ed1ea8cbeaebad581abce219122ca850ba2bebb70650514cb6c13474b502c8b0160c0fdad49ccba09e5e3fed2657f343ba6430f1e9b28eaebe8d5318ec1af22ca33d9da2743550794f0933bb59b58b157a58f5cc055ab3cf15c43d12d8a1d45ab158ffcc155123027dccd635a387475ae4013d2970b0b2b3d9e586d61dc1414b2bdf6820c2432ff7650ca1abd573550d046ff74f74543077ea5536d8cbb3e3cdf18abca33204be3dad625e4a4c2657ff1975f76884fd548a0fb94ffe33676a39e3cf3b1d04b6dc21b9951987092a1c1a894fd401c18db9ba3d8ebe9137b942fe277671dbd3abf0136959e9920b5b06da620e85dc87cb71aa46c36dfc68fbe9c3fe77205e5f12da76d7d2fdd2bc505327bda4537fc3d13f1cb1953eea4c34f4b5f5f60ec94a06896eaa3199bb12c288e53a0875b3e58798bdf0a930d7a20af3a8240b826b7eccdf50f2853afbbefbf62222b4cc512cf1ea8d91fa661cf931725193cece8a65ea440ef63e12d53f3809c3f3c0a719b2d955e11d9c20dacac3a09b47853f3950f1c737f0af969d2b3f26cc63c442bc99b469583b4bf47d810abee41ec5499b110ca2dd354fea295cf5b3a61df92b8ed2f798bc4de90f15b5576f07c980d66c65ab2b3094b7d3ab316450ed06ed2888a411393b1228e809658be973617da6dcf2da9d371843ca1cbc58c4ba44fcb324d0f56aea31603c3b109afc4d526e3285ef3c1c4d44996f8c44f9d35fa978e465a5c550c90a437bda5f16671bdac7571f12861a379692e27b3a43dd46fe8bd1c7e76a156f4eab665fe9b4179a2a34d7eae2051c9dbe95639be232752a572de91351c1a5d5c5a3ea15ba093fbc9d81ed7169bcd76379b8e1d931ba8d0b51e65aaa764d99d591c0e302f7ca964f2c8bf3298582261883993b0ee5ff10f59098892aa1bce808acb88ec76cb8b1be6e7d7f134fb04b9643447688c44391e58e4e1df0673a517120b9c239f2e47a9732d56235a8099dea541525a6f613d484253336782d0bde3fe3263ed9a761401c82c169b3348f342905866b6553c959f68ec9402428c21d70b665041a89799ec72d09a25acd0c051a2723fc260dd3565e29b3f4d29288f69fbae6262837682cec9e917ffae7a7baf3abd24f5ffbdadb1e7c4421d861d758ee057788d402e39e683064c6c0f8252f008665d0aa5c35dd4dc861b18771f8ce51c0bbb56347974dcd09f36206c2f6fe890d01532f240088fd72657d8eb930a9e7e82aee94d8764db1f829d1285b4ef6d4615745ee1a9206823b5528a56fe1ac7856ae1d17f62ded6bac46c9e9ef225136e35c6c612ff7685c3e16bb291a3ed867de2e756cf5cd4bf343d92c9c7cc3da86fe5bf26dba9288c5bfc65b91b14894c73de0b1a9d8ef4c5d08932f13607ed63dff97d21c466a68c00cd90860fc81e73d3d6473b52dbd508b61a3d62369ca968327c6dc8d691fbd18db98961087ad6cba886a21dea9ec5ff9c5e3ecfd0338ee4ffbe04a902adaf6946b4feb1fef4fec49410738a43a8188c70b84e7d446fe3c1c15acd811eb67b500c11f94e701b98c517b4886f9d1173b6107d8494801b5ed306df3189b33957acbf1fab6da52a33566243873c591ab065338d3ab84a3235d3f98c714973710eb48c2709b9ea20c1bd8bd25deff137a865620f6a94efb2bad97fb9a25dc13aa70fd1fc95402bd393e17617ff3bf921952e9285bdef1ac572f4d148544745066beec5068f50213a686cb9d77a25591c08144e7164e0e1095e9450617f62eda0117d708e82aa5c2b9991bc2cdd84554652200abe208283af6d0be1d6f97638cf6721b13dae2095ba97d193c3d901b9ba154e4cba348b502e927d5346425022408ecd6a9861b0c02eda52803f7531d212f03dd9166a1bd3999f99fecfe0692ea34ecf8ccadb273301b3f0c850cf15394d4b943114bc004d9426eb0f541930985db7bd7baa9abd6ece0a0afbe1762c0f56e30557c161ba71405c52498b4eda486ca7d2b6b76a4a13d101d43faac502a131d1acf5e00c0861cfa4a5f32f8294d6f5be66be66e6780fce81f9cac39fce2d42a69e0f5ece15d3888beeb0fd4210aaf6b60fb2c14b5df0b4f1eefe1eac2f2a8d14721f85144d93f637f1c97b450bbe74b43b789f2b7933589681acf26ad00c7d240862b0791170a4898de006a2c8e3e34b4c820e4e615b90d2ceb98e3932758829116392ae4acf3a69d7d166a319b519133aacbe9a8874eda0b3ecbb56f5f2e31d8ad92c9811b2ed81224c9324717bcd12a15403909159540ab3d45124419b6d96bcfa093eaa34a264ca995772bd699190c9be1a0475143611581a7a63b9487d1d52e73bece975e98da61510aaecb64e3243247b4ba72e7d84660809a21434c4841d295ff75ac8ff89a9240edeb0df747587eea44653d8b56b96eb8ad4fc641b5a056c43cc254a01644319e2fcbbcf0d1eed12371709b7d4eba0adfa1b52198c1824e0f84fdd594d9ae4cdc642dfe128d8bb513723676d9558eb7c74d7eacf3727d4680950578b2cce41999258a5dd6b3636cf29ea3e7d63b319372a4b996b992a19f4be7566660657e38be1a95daa1fdec9145f952ce8fe400c58d741a8124021530fe925731eedf35c9fbd129a71d34c36f9fb63149aedb9a25e9442500de04c3d8174d674712bec1a73b227577afc801bcb84d50eade91dcb9e3ea1960e491a652dfd91171fddf26b6627a08f70a94e93c4ec0719730b9e27e9955bc7f4e0e88a882f24b54a506776df587c0f6479480b9da5bd99b64127611c71ca7679f0c8874bb7ef87e5b31046215daf47918ab90af5a776300db40333f7a2b631178f5a17117a8875f7f3883894b9404f8c74a0cc29cf5879a42d0fe7398efabdf92a64fe4a8c5333aaf7ef7d440ac96da249b1dab8cbae8957eced4c535ff5a1b1dc5242a5538ba819b368461d15a4c197468faac26e2b0adf4d64697bce1f7fc28c8f78009a6f2785eb9a0e661833bcb95f5a2ee67b9ed009f723d1ef12b1a11bdb80fd4224342a03f3e21699dddd28cb090fa67041fe556b6b85cebeed25b5268533fdbfbf59ee1d6251bbb2ca7f4ad6f1858879b18dc1d062887363bc230d2aaa89f68460c069dba3658c4ea3db2dffd44a66f34011ad351c420e647d8fb4c75659c8b5aacea4dd33c11a8d998898d39ac86070a684e0803e798e7f0ee52bb98941834662464b0b602134694586554bc36b29d0015ead5448f0ee172fdbdd9c72668832bb3747b91faaa9eaa009f6a34c97ee41057d8fde68907c8714de507cb86f2d1c8a9f82bd9ddbe478554a6795368c82c2342d77313a0ec1682dbaa489318f13bc4ae7ec27e5f08430b274819497dbc07c4d0644fd3db65730df34118107aa4dfcd83260ae8f74a4338f19141b63eef2553bb24e1907cad979400d83794b85d3cc07a4c4efa803bcd7e8dc2b09053380705485ed63af71bba5d387c8565de241fa4f77fa6f692b64dba00ac5cb68051770b83bf9f6fa290b6cf9990ac1fa8003220628f16a364846b3a78f6c90cd3b4d7e6802575af851dd1108e3bb806c0314869c5d50e43335fba763f8052c823075452896f757a2f88e1c16dc6318b1a71ce939a74f86f125f1ec455ed5056829b85027ea60f7a4bda9e04e58058300b04beaedd7a902bf86838e64761ec8f4a0c9e275608d18e66b0005fd1aec026d2ed7bf0608aab1335910254860cf059fa3fcc9b19cebec6155b489be25e5a6b45c5b46bd0dbc7730cd5bb0513a41155951b330d2819dc471ccf5d1c39d810c763f5e74c282a393e82f42bc92a86c22525785860a726766d920030dd2b295c6a3b245d8d3ff9fa2c44b1a90166fa7144fa38d45e61732523c7cba4849a0e30e8b9227ea38ebc3208b904adace8509b7de8462939fe80f33822a12ce7d3bc219e53ce2811ac8d7fda39bb94a41e179b0226d1399209f8d832593b4ea37f56c52872adbe33783937025b4727326ecc3319c7bcf7c4332114299347f83ef4fdece606b213f0bdfd68b8a54fd12f3976e30379d3300ec63029061923385a408988629957ba65a44d6baa704642f6cc77e51341bf7b6eb0e2b99bab5d6f947af0a13361ee68ebc119139c2dbf725a3753debd6e81794ac4ef0a0f028631abf50f56ccdeae1ee845a4f63b7ea06061a533ffbac2ef4f581ea94da5486eee852c68d347c8405cf4be85c68407fc66692cec0d2ad56c80478f16112d59c6ad6b490a0de5de7327781684f6771b2a56a2c283f33568f177791308ca207dab75078cfe0f6575a8f9d777312803538a3f9939f3504422a303cadee4aff6f2b6299d705e8b9021755cc3001f8cb6d2a3d6dd6026dcf655dd1e2e4a6bf71977530cd845ca6f51fc27d7a49fd5c46f5a8a65a0a4296fdf1a96598f387257727a0020d6d1e708ccb84b7f0fa9c37919cc039e4b1a4d445f4933078302e778c5a02782ff10ff94cea20c41a9e3bd3c2c0d113c46bfb45e6a5360355b0c72e5767359daa548247b6fa7277a22df3505905e0478bb0c65a872b471f2d9cde4e7612a1d249a5012c147a852c652be0e90c88fffb08c752137a3c4ea1a6bc2f64d636db7ed9fedf0cfe689c9d888fd252aca8589d13b4e78eef22f9293cc015a37c3cbc8ee6c2931ae1340ae4eccb2e53769d6bb7f5a7185a76946d349ee67f8afc2181495974080637634a488ba311acdc6fe2a34cc0bd4f083dd74c9e579bdbaa70b4a0db6db7bcf797ac1573f299219c21b170f7ac26d6b13685c625233af940d126394bdf5ecf1e9535af9ecfda4692dda8277e3893d5108d5f340e5b84ec87b5f2f35c27fe4f0ff39d3645db0458a860d242bf3d8bedf51154e7594f7d09816ac74287b69eba964bdf594ed43844752c1bcfd8392a71d97720fc45e229746269caa1fd6acc16aeabc96a9dee967cc9a7bd2c70639c5177c8df87f877f3234cf8b0d2f0aabe4ae23b099ab09324358851f121ff940ee5e53923826d21a6248e70ec1e7a6f37ebb21b26efb1febe54a5290dfcea6c7b87420db489a70ae6c52ee26b1aa6d40bb5eeeba1ebf5fd3afe5157c4a7e5661eb7eaae912f6cca02b2f86ef635f1c79a40c5d86fc9a407a3c9217e06bee8d941fc27f7d2f7fe244d3afc847282141fb324804327c7609d63e929352851a21b37836f854253933e7dd0d27b1a40ef84f660098be295b993ad7d794a0ba4e094c03f629af84c809b83351faf150c80f77135e64d658402852ced82fe269bb3d79373dd1f68684361ef20e917ed1984043b23416be3e70f641630066668bbf2b986c640127d6f7e974efde9de62a75b17128a8bb19eae72cb863d71df6c769a2b7e18e31a3d8d8215c9a2b5a5ffbca07c7b2d5a0f09596d5c916e0fb4868c476afcb5d920878cf418e99f3ce4c98f27ad5ff8961b141cdccbe0a8f256b72642bf2c59899199c00a2f18e94c206a3db76cee857bc2a7242e2f5508850da0e478aa29f2b3078e08cf70866baef442494e02d50a5811436eda9267460c174a3f006873a868b148663ad67eb087f2cf753de039133fc5d8229f366708b3044df945a472a84c1244b336ca29b9067e031f7da90b7d3e2e58275b3e2f0b8ce088e54231533ff0d391be8ca0957ec2f12341a4c0502c836a31635c7a494a21cfbad424fa5a569a17e802b52f82ea24d8dfd007e521a9f573379df7bb395262100dcbec7a1cb5f67b8cddba6b9c7cdc5c866b7c78a88fb134814c0d82ed0a96de095184bd06935268f61f76206eaf6a68debfb847b70835242b2af845557dfa89f09050e05e85f99909b7ba170f4071d7b2cae62a1dbb9a8fc440a92a02d813d2fd29f2cb28e961f8824d1b2297fecfc23f4dd8fa4a98427de8ac304bda9dc820a8ce9ee6541b53686b8c66db7160cf40d77b76c4949b8bc8ffcca3a3c9bea93654bc67955f29d7f7341d518ed6317e66d3b7df7f0e1288a3dea88d1b5e90881861ad7beb02261faac8f4535138bd0ff9f1be620022c2a194a14463e1497524733744c543e60262444f6c41b2689d09cc18b9a31f535f78cb84253de7706f29100ca370073352fad624ca527bc86a1480430c5b6aade170dd45ec86da13b6eef1eac0582e85a18ab92d4e0ad8e9eac46b61c2ff46d5d82e66d5b6174bf6a91c4afa27e41d900b9ee4f25f29ba19f579a4b8e124a35921e5f2ac86972821bed128fb1455c7bded32ce50c8f9070f02d3608369abd7aba1cf5426ab90759a7b7494e74125456b7e97f0cbf5fbe2d7e50d993d450c8cae24b48effb0dd219107841b1685494f3d25dce28c7f2331bbbedefb82ed7f85011bb82b34ea10b3f21d95e5bab7a9ddab900dd1ef8b1e3e8ecc4c895ae8b850f2c91e1eada11c336b3ed93d15e2d6f12c09d91de608bd5ebf8b11945046dcadde9714b7a0e2d58d9a109d24f3208eaf88acdd260d60d9a2bac347afaee90400cb0aa135fddf6dc4768e7e145e598fc810d34e40963a03572a39179af3c383642e87ad090c78fae59549989e47c493cea5ef2e2034b674de9ed623220ca7e31c8edbe39f13d8a44c80bcf0f3fd24c4507a12906d9933587d1ca4ffd4d0f22e126bc5eb527ee11647a86f3e890bed0c96db0c79b181817d314ed013a0f03f95b6f5e6d0f01ce2d10761b4e39fc9f7800fe68418ad515a2a42692c62c1cfadfdf9e7a1a1087caa621578bdaf10b3e21f64a71bfbfa5008b54e0096c843f57937c71283a7610a86c681b1f16428d9173075885f5adde3f7737807e6d47d71bbde7cbb01b6a96993511c8e1b6f194835e118393d4766deb882d9dc25efb7e4a0442b7a8b65d605ab279600cc99142a3f8211228c5471d3e6fc9014286bc8b7054a67352cb8e9b0fc81dfb4b3d852414c106bd087e76c8b9eb24052ff46b0aff73528143a8631f3a62deb5b36b69380d571dcd85f4966e552d00968220fa320922306af775de552db60f0732b6d1a1f226996738ae9eff0400a523765723851fbd973dfe761147b01ad901db02ddd66383cdfbe31850c36dfbeb855346d5b57eadfc942cf4ab9952fac141859f2bbbf5555c3b5dc5592920e7f747542c4e5d4f58227b92b8eed00e017ccc4ab2aa0828bb3f06eeeb86068ba4b860477169096b8dcc9c7b6ef6a3c60a6c57a8502aac8fc7c8ad39766e9447790444318d4b18351f4a686d9056791383d2dbcf822c7f0a8c983806fdb0d5a8fabf3acde78f20ace94254e14c8ae2833668f1cb904771b3ed84f65f0a13e6b105eb47bbeca03ea33a0f4d4cc88ac52fac15a81dc14387542e2621c899af7017f6feec919ee707e348d9f022993744d11241cc58ee9da1bc81602e11fceeecb9ffa69a7773eeb48c8541c634d1cb47e289ee3a448459e6855015a376b21f64f1ac8d1c61be807e07e8262afef1176d99de8709280e0dd4affeca3f42c979b8e07b57bd71dc8021eb791963dc5061a100410816aa6bddb2a5261a522db97a5b0c4e95bb03a0311fb4069da40fc1c57b253ef26255aec6aab4330df10fd7a6c4b7bcf57a6da5c1d9c4206abc027e109910a103b00d6b1a0112fdba3b44923c3068e8c4ada1f18da84fd22afca0f36d3c9dbb5fc24af92da5433b3eb8b0b72e3de8f51d2bc0c5094727b224de9f7c8ac1dc8b61bff514a1b48d5c972abae61e17b7f5d46c446200e102d7f96703bcd51b7f96cedbcd5935881cc7efedfb17b34dfedd02d217f91b640ec0b33fc64888aa876132389899d3610acdd67b13e2b3e7097fb87c123e8a217b46dd9dc46dd3f2d91599267f78c764d12b71ab4ea224985be0240aef4b32e3455b157e9a8d90cd19c9a6596d6559883c6139c7e247d35a6bfce27cc29b3c49642725e09915692424d61767f3ca93c76105c26df37be7c7ea5e5f7791d252c2e2db594873a49bf3efbad92c2e8733e9e37eb42cf232a9e745ead743fc69334e42f16681e4a28616f7404284e92441a2634c57ccdfdeca9ed15200f12d976a753940b5fc015f44a93c4a1e716186502cdedb6b40646a9c7527e90d4c50ee0436030a4d452c598a10107678fbf01f9ca7bf849976d7f6892a97efecaa2e614479af614ac51d9292895233591aa85b5786b2391ba1a899efebae326de35dc47bfca5467b29955339a4b5281a81e72e92f4584b4600813980cb3c651483cd935cafdd1748c495df6bfce78a503ac890d6b88c4d5478ffdfb9101e84a55bc33acdeef0f641aac256e653f2f96f0f258fa7210c6ac8ccbc4c28dc090c26f4eb9ba8b8948349343a42bfc2754175dcb2d7aa9565a4d2e4bcffaa3322381f811a6b2fda73da4ce73575daf6bfbbda3eef2377a4180f3f2f6062b5ee788958b3e5af6f4cb0411b136a4d787b64e8b4f9c8e211eb63d2228e72c3f685494decb04b904f8224c890a96724c1f33d1ee449544cddd7dbab5dbf93ea4495bc97b95cb3435bb81ca21ed44069b39a9317234d06cfbfd8cb3b9f6c79ab44a465539b3e8bd902e33dbf29477e3bd6be63bc2e1075a82a06ce9c7d569f20a82bdcd5239c302f18dc9e36b3bfaacf8910c2d534668913411d3b2a17358fc4174742c66fd7caeddbe4ae0a4065ead5a67940e2dc3cbe2bbafba64c5b9b8942825cd3edcc11f571a8e20a89b7c40ce98a62abcba8e5cb93b8a71742c199ebc8f0e729b98b39544a89da1f0232f3baee6870d9c0e174e30296c4eed870bdccd499ef2e6c32acad00b24bb08cca09e1c31b3ba70c4efe31a84645614c202979eaa1d6a007cbd3c92c81d6fe8a3d46669c0ab40ddd61a2b1ca51d46d94be8be4ba711863a7a12d91d6c99d8c57e83e455966b7d9a83002b5ac1ef6e90c8d0918b50de153b226f3eb13a5f62af0f460d25a082d64b28503d43cb655a8bba5a017207690381fb3113cf18934e5a223846fe0b8afbd12d558fce2c95e154cf95e29b1849628de94179881a908af910bd9dd38a07a552bb0ef87a4337ca32085654fe0fd319e2f59dbe8a17234f46b6a78fd27cbe508f43da25e34ef87e92e7809bd3b822e0b3442695174b24d5a730f81abe1918a50c6d2119327b44b642f85e102918859fac7d149dcc6c9158813f7533e8335fe46c2f38e5be460343159e76efac78f20961d7abac9b380f1116406eb33c43a5a8f9c392291d5afc1466c47b6620a99b6eda5e14bf66ce7f05884f3276d1a79c01bee8118855f5492a128bbba96ceddc704e0c7ce0e089ee88c648fc035782b8711b67e3f48d425b0fd62451f0f81620e0787adeb1ed11be61288d21157d4496fb9a0ea1d7bfd3154c789bdcc30bbd1c62ee86f2f1aaff4453e6705a31d61c32f5914f0f4f9d9ee2c0358790afb481e15c44486fa8f1fecfe94b78fb470d98d6bf36ee031785c6a4d1cdc761c56248a4376347715cf7bc07fde330d0390699e2117213479b8b3f19b9f03f30aee9c78453808266c11cf5719733ea4b2bed83e712c1d73d5eb008cc76355b0df9265414c8feb9b0397b31ca86ba198edcd332fde58a869221eef97538a9888e3df4556bc61f258f322cd914735a1913404e37b861b51e695c2a004daa4a9b92e6160902b0ed0f05776dcbb142a7231f481ff20c2712386adf8facbaa84ac543032747a98c1405b8e6e0462b41d2c37b9566b786c4b0ceb4769604383d2bcbd0cf677290c65097cdccec2ca488a9747bd981171d6e15bc72a6af31b2049b200cfe02abf62215db799d803b8e5418ae52d0e57f2470c28525cc89cec52036ed283f0a23f6f6d931dc07e027648cdb1a43b16692d1058459701cb1c1afa33a212dab85a4cd889d16d113709f2b3d8c066b585e5af580d79ade3e506e32590d9982e0fbda550effeb7125e96cca0444e373798397589ea0b2ad9091c83ea2ab92a55f852413ca1ab1984d856edb94c57a88d16d7058f80eef49519e951900a06dec7c68e85e5b2d4e7c3feb2952095f5986cc83c31170c445e9080cc6fed3726b25bb43b1d2c12c78dd476db9e9964c4708da2ca1260b2e01e068c4ec63be246e0ae78cbe57ef9abc31c0a5090649d63b5efa6a4539d4930a02b46a71d95f600df6f4df219e4c4988143836619555581c3a8ad465c61807f3089aa30a9ff85e4d9560631e1ac95a0c310831e74ca7663428a8692017b3b99e0f0165ff91fe24971263fe32b3087ab30413f1c5725836a80e0d8afd2985505584ca224e251551f95f0321792392c14ff03bcbe550a1ec790e3782af3dd73d8605711f703cdc73547158b6179b4ee75e4bc21f85dbb805e6991e3e8dba21d286288391926805a2d1918ebd663b7541f29a4ed2a32540b3c3ec36ca23306d9c001e046215276ef96e96cc30ba9ec1a61c73e2bfa78bd15ed357f0e6e3a8b632f0fbfc9ef502c5efd3539a2936db1aedb9e628e33f5716031f84ae53d20c9b9978c1ec9cdc699956a5d141d3949f7009d2f8eee331bcbfbe7596dfe40d34f3819017b6b34939ce2f5a55bf95bfbdb3880430a9cda0e0079aaa166105bd8dad6c006b9683240570a3a1fb38224c75721cac1f7019d82248d11686191a4be8ae39726e198252084f1505f3f578d674c7682f7c8cd588e14ca41b921b2c292b61b14d47b44ae4b4db948498337b3833c9c837ddc9a5a686b89acd7bb863511844dee0fde5dc8229e03f201665eada7b319307249ffd19715d7cdcabbcfea4a6d641a2b5c478cc1bf6bdc1b3b9767f9603222a5a748eab2d5360eddbce926836f4c63f2f096557a3d3ffd7b945d0aec2a61a82dd76d12578b16f4d33c614610991bcfe3dbeabb47549d1ea72f17cf00c14bee03d70147d8ecdbce5e4c590e3b4749a383d38119784d203582178536731efc73502c4f7b2394032464ba42264c24adcd65de7a1eaa26e4d9233dcbba2929847bcff9da4b9226ea3ef1b8c8a91c844dfbeaf8f0879afd165dc76b8dd122f85fd9c33c42a3d24f0cc7d16eb358537c00d73ae134d4ef2267f35bcf52c6be9f0cc274e9f82dcacd50c515ac960ec832dcfc3e7fdb7e3d833e81dec2c07059b1b1cf0deeccfa6c28236c269b2098d6e0b8838538f7153591f087ada62340ed797920d7603764f2d9e86f4d29c8361f8b9f93668a31dba982b9925deedc3c7c0c296cd9741ff43a4c4ffa9271ce0afadcc8a2a8e200acf25184ca544071df369f9963b2b528f3a6e8bbc2ff3525fbb3b13f15bdbd9025a5a48f3be0eb4d66c71acb833dfffd0236405bd9b7cece174d336e1f9c7bea6108e5ba61d4e63755391d5df19682fd18f8b40a94000e40acd3ee8e24397fa397a4e99ca0eb3f58f068445428d5e465b00c333a2442084df2ead512b4a57866c1169cd9201aabba97ab53a4d36ffefcbcd46adef11b2e00d6172ae6fbd93515b0ab0d0b4098b1d0979ddf85b7ba6037c76cdbe4ee1acecd6a929b06eb8e1247585d380841c4e50c5361123515b38c4b466beeb4bcc1b00d5105d84622fd027e94f989a554bc6e8f72ff889cad50bc9cf9e2fe80c5f6561c3bd916b66d01998c4f77b486408fb39e558651e69cffba0ddbcc66f8e1b0171e9a05e65154ec1ced96cb0fddc36cbe1f1f99e71fd29a6f8c4370f517cbd27c2b236a7c8e61ce99fd2c017676021b9f9df1965500961b793fad1befebaa2cc3adcc258a2b370473e627a3277793f2f9e50b184a15489018f072aecd6c355a0fc12cdab077eed852aeff59bf5c4512e658bc432bb610a9eea7ea946023f52e144cf54a329c7bed09dd0ab46869b945c315d453bb1d4ef6c54e2a0bd244237beadcc65dd601cb4392367b30bc2391feda15d007b9a41ae2d7f112a321f55426260a23c245c775dbdb081fd56ef76c59479df752fdf6807f51eb1e81b82439b20bdb0a0c9b7ccb4771f6983331b127bd07a1625e6f68e289bd2a0de0d7bec7e3cace6d8f62b9a5f9a7b3be5ba0e06b1f53a921a05d9abe0f7946202fc8d177454331a193b4fb8cbfd2edf1e1e0bc7a50e8b2ef3221ecc022d94d2cf0bce8f0a717f14013881ee4db7dd765918543f069f7092b1ec8468ca2077b2419cf193d925bff02abcf2b4138ac6810aa31c96367c6700cdd76e72426f40fa0f7aae8abf7be5cf9a26eb73cab568e12329ef24451ca5ebd9c25a539235854025dc44f15308a31c4fdb085388687ad95e0f1fd89c84342bcb74339a1994a2548fa34d67af9ee06b538b15b13d65ede4dd10bf98e17d73d22e264d2ec7f4124e90e9749ee573b6e851b473f77806b7b880b869ca69d32d2de6e69e4180bcaad96e0b13e57810292ccbae2d69e200a00dac1d21f56cbf6204a18713b6ea98ac402bd42f69c67331a9c9cfbef4b1318443e4ab621694928896df2baad4f7aa251f18526067aba550b004a12fb61c9e86823117b6d8b896564007deabbdd75ff4e65a969250278631f90847ad4be6cce4df4fb1cf0f6ea6c8fb87ef701f6e4ab959d156cd4945b86a9e922a44f16c065f785096affa33dc1fe1a62da4c7d4554cf31e30a72536d07bd335e5bb8cfaa2eb5b01462f90caf343e6363a6a1d048885a68680942908db125030acfa2fb0859c7fd3e1f31a26af4f862c3a337b0ca315420e7c29d8fb659ed5533c10dad0a0697d9ca4cd2fe70999c13613a98b2e58eac0bc27cb843d365447ca0eda9b38d17861a1c4358bbda353144492c9203ebb685ac9ef9155690bacb1d9ad4781d8e65b8111896c61808e26edf14a09990da3d7efafb4211094e81ed7e8c2697251a1623ef689a3108de1339b9e6f2ae051d6b653273852f5ecf7a528a48aace4cadf2397776707108ed3562fced4edd57563ddcfc9c5c7f3d73c7cf6650b7c2383ef323808209bcab840536e64febd307ef11677524625f3fce88af4f69a60ac1bbb6114e3b6527c2cf2b3b60631e61f2007ff797e88c89e63369f22d1acd0d0a8a079da5e15e982be571838f1cb3da0d1ef5bb4aeb7ec9600f99d54c60cce6874d63c03a4515161c41b859309b280e2fa2bb3c8b071c501603a00f72d77322c6bc3fbc6b1ee18472f52b1e5460f630ee6a96e95dcb59dce0311ccf2e2ab6b698d205c2d1789dfe0f664d12eead295943f809d6f5bf46caa86f16b21b17986efa4ca39bffb544899d420b81c548bdf651f9f6219ede785676c930815f63c60d2a27d27a94243220c6afca5a9c8d23e60e3c2597797d8ab12cda0e446536c28370639883e556b3b05f2d56593069c6349b0d68ad363901989ff277be1ec7c2338e4ed8974cb4f174e50153cef0c93efe07deddec06052348720bcf8aa563e1c50613cb57113c258f563b5b9875dc950d832a84b43116bec761284883ff77c9f101131b283fcb1c65c0a4497be80e9ad99d95deb6ecdfe18bdd76ea2521ba92e6d1e8db297bc4fb43fd63d9005194b7d25622dff77b27ac8e3071fd0b451b4b00f6d57d405d0a798d262a3913752052f739887563208d31faf66c2eec87c7d09a0484bc7d5466b8939127871a1c822b4b008c1f404c6c84f0460ceee4814ce7d9ac7454ea72074e49b67406282395686330da6f0c69c6a972efac036be460447159f6546bf9e14054eaf6906552c28043c01cab100466f17e574fcc6f694d8d17389b957b712fffa8704b0aa93ee05ed25509f4238ddb8401eb8f5c9eaaad968d5dbdb625cd4851cc7d4bc61985f322810507aed10aa4e9ff743e7adc4d8910eda94a621e4f6c480a05a92a1343b829df5de017fd1c37feccbdf5a335d9b116e469b707c7898dba76e7ac158a5958f0c765dfcf510b4d0100a3150fb7c8bec16f9951196a273fd89fd21c52d235aef9af5f509dd55483efad541377013dd4bfe1a21f1d307d1846486b5893db4649590779a9e707d99345bf72acc746f657644ae417804aa7369d75f7d19bfd5d746d75695a848ace1f15cc79e5c31b6cf339ac2adda8c04a7082e1e1624533912ef231976c7324cb766bd09bb07443f1282838ca0865359b132f8b257c6efd55b265bd71e74b61918b7c5c72a2385a9fa5e7d220f553783d9762d2b8c43cc2b53ea3eb4e1ee6803d4713766cef2ec9ba056b26d2915cd7e5223ad660b88d9f7b2997755bf341cc7da71592a7f77d2dce427437453a911c1be579cc7891fa3f5fe6c387898d6f149f65e670369b2c764967110b8f3ee686bd2e99f74a26b53162b93ab98a9e82ce8194a265f0b206518bd962c05cb0d0f820b2691d4f3702ca4d423206edb7075012363307a1b14c0230dddaeb9284f29925376d9ede039d68f48b9f3887e71950a2cf40b4a784ed567e126bbb75348cb41e0284866c640938d958a6ceedc8ec55a6022e4ee75a4700dde373057567829ea4ae3397a0d55684ca419b20e4c2ce803194378327a00a30adb831281213d5e2cd3817bbeab0e7b07ab4ae12a229aff6109a87a90162783748cd322e0d4e9eb23cb212cf71a98ab52c44223770c205573fbbc94b4b70d78ab9f7bf756fc06b9f8d62016d7c77db0d1c7810c124090a16e92131e1cded140dc5300a3a8bd408e6981e873b034c29b5977d383cd17aea245ca3f22ce52678b1c41f406c85bf8e864eea8abe70f324d494f0dd44882a88f1af920dae21825eb9ce06c423860c0da385992162c9cbb1808e919cbd6e680a0460575676ee52effcd5e7cf561c809bf00e712a8801018c7357c3a2d01c8640ad03848a70ff5dccea41eb2106bb6c85952d7315a3da3d1af250a73be3e06560187fe22b304c33d09872bc78d13b12f11ef59119463190d46992d677270e4e3a4f2bbfbbe399a6643f23349037b3984a4a5c0548b588300c3c60a87d4ba26aa00e6e6c383258b960620b13d27e26e7fad13276ca065cd4255ee8d2f242834af111575054cdb78419d0f36522da0b38c2d7bc22a68ae6d89a3e6ebddffcc2c4429dfd443766a945c375c71866b175695429d663c695d60c7116b521e669be0acf32f08a6cc1e6b0352cefa77ff07ced80821d68470e74f0f68e2ae5a9a7e5dbcf1ce79f0ff5fe4e83734d7b3695859c9cacf4d4a052a1346364a62eefca9dde6454c7a1e5aa873cbda72c7624da493d58a11599f057417bd72ba9115b64026a4fefe44b0aa6de18d7642562e6b60b127a8b113dd3063ac497a32ba9208cb2b23f058594c9c13f924396042d934991c67ec9bee7aba5f38861018675912757aac8e814ad12b3be06050814c22c9690619d10fc14374b8eff4b5d7a7aa802bc69d5f0722be5f7ca2b911d1489e49ec40a930220f4657232eb6d6c188f56067f75cfeb9548a0736f051dfabb95539433689eb62b81dcaf164e994e15ff8987490c3f6d1fa9bb3f961b502d6e479ba3ceaefabef4bddded022da444212857ac6a08282c3032b3c9c3e729185cd1135ed2da8c0632441ca5dbbb30934651000e441da0ddce0920767a9a780a4f7b475ff487f18a9c5f582abe75925fc9a2e5a91f6dc8112471bd34c8d9b1d35a1a9e3660727fc5df371970637faab3c376c642520e33eb687d16d89786b361067683addae9362fcec5516ba783a4fca483042764fc8b948388496db065447f53581098903200453e9fb691f6ac9367597d2ab2f8c8fef88a0e541c0825018449b69d2af5af5fbe5f9f661a6593a9d19f02c3a58e9759069f28ba2060457a7cc0a0bd632b913c395bcc72af5e16de2d758f9cb3a1bab798e0228463eb53313cfeb5ae711b07225445a03d31b070e953b7575341bca6b4c8929ac0cb9ae03eb6365976ab612d4f1e7627446aaf6a468ffbb57c677b9d02e84a187c698781ac2d0dbe13b366f29fdc52508dddf54357b366786b7735f1c89fd28e7938904544fd9cac9747ae840267c042c39dfb8462dabd6b2b0c17a144f3cc5dbe1aab4d6c40f43f03d2dcee6b1efcb63dc621434ea511b6d7642a998c89aa22a9453f2f46b0eafaeee8a2ba4ddc9f08b326e5afd2765e906279e0e82c0231eaedb9d1a9d47ba0f89baebf85d3f32dd52212952a82d3f5f2dd856c9744c70c1feec1528613e2862fc8ce8f4518449cb9aff14dcb36dee534e00773c4c3020c0ceac39e7e8b61be8eb78c308e7ab66fc77e30e6aa5b5b66ca5bcd294513cc78c31afa6acaea3aacbb87a377804ada252da92dfb23b3fe79753b4b2efab61bd033fe29ddca60602e80358a7d9210f2b5c4ef886b6e4ebc6a2b08955a7115a2bc85555472f7dde13f8e6c57dfddb3c2db55968da8ad24c1b12562da3ce0c7067ff28bbcd30bcd5a7fd57934753483a4e91b18e00ad0daaa1321d2e95335ee05e654811a3d69ee2d6dbf91bf92fda499a0b6ae9a38c5c18bcbbc26ac765798dc7922ffd14aa8cda1fdd431226dbe9391206cf2e8cc8a33087a321ed9d94b0dccb4c1f3c52cbc9ce8ff700d1110c3fca2b3ce01f21be446e897f5898c24d20d99c368ad4d73e059bc8cf2acf6b96bb7e53bcec9a818aa8f4c95693f16b11dfd775bdac2aa8b550595f76ee87c3c0c76d4ba89c0a20690e18e47e1579e9747e18be3f95a6a47d1907ca6c39fa7f246ef906bb431e69c216d41e5d114d9acbb2de2a5bc1fd03aeaab9a0e46cf451a90f3bfd51724f3bd20b1486ca7172a789d244fccf95df0012ba1ededef3bfa9be16cd4361b8d5d1392271359356d4c4054871bc1a9248511b0c0402bfb484415067d1b8ec1976d589ed39928de037aac79380d4b09058e0ac992d74f407e3b162e433487ac570ac3ebdb26b65ea2b1c49ede0e4e5e3128095eb933106808c15dc9f95a91ada44ce45d5bb366150ec593c044b0551744267dfd044b505c7da2a49981035504a67c05fb638d59e96817eefca3a5345bf2760426da1bb7b42540af9b82d3c9a2f79bd7ec19f92f238259da49d64e75f4c24bb73ac67235b9fd2abb4177b940657d684add840a76601270fa5beeb931c7ce9dcfb38d6325cf93555d3d9551ba1643ac8ed0ab68fd81220a27d7671738d53821d7849c7f4cfe41280afbc48620a8bbd166aff1fb04c042c73100964d20379f1ddd3f5cdf24556f100b449679aaa7cbab4dc25341a2ca824d0c673b2a54ffcd8949434cd6f58039ab0ba38660cff3b36dae140a75d9b6f2a9c681975af69871cc6b7f204826fe952bba95da6262f9c370d31c5ee2023e6784f70f2a05fc5296696f6db710d1bfd367866459522c42f9404d28ebe419ec885f0e0d0a825f4333cefcfc1788d82b6836aff82d57a3cafbe45a04d68c032144bd73b3b90bb578717ec33668c8d0d85e51999f95bda4bdf5ead30a25c7f60e4fcec2a79da55f1091f54888aa6a84cc4b823bc387385b7e656bac6ab4904f1883a4c757cd39d6b006212b3d64b9ef808341df024d51cf4a2ebd69d48acca0a5d19d94d6728ec0995d1e5025e5104b405d4412ff8f7eb67814e4a4b61ae4964d337907fbb54d775a17b0e8d737d5ec107b2f1b17699a78d06be3b5953d39fcc0aa811865248f44cb3e2e7ac6d24b78df6a57e4c62f21cb1de842735103f7ccd8f11dd7d201772e46ea31bd7a49702cbff8dfcd7ac7ad62fe08af2fd5fb93bb9806d79c68a5a82582a6a259de642a5385c30e5be9ea0f9b6399eed6b795db2024cc53e440c7bb9e446b6c70eb0ef10786deabf151e81a5cec5b3c588c81639028fbd698ffb46dee9937915e06e322def027add69693930066b2c911652d2f7f2df6c18f5ee4298ebb1533edf0ecd6a1679e3c7707f28edc5a0cd6514201b4b9f0fc36ccb50a11af4b2931a8b0baa7e5cc7bb79b350d6f4bc9c637ae7e9b328398e2561ccc985a0f47886b699904622341fb59eadba84fa37cef9485c124c613e45bfb48ead023f9731130197833c6c87cb982aadb4408f71d7449713016d9ac007ef7a2d36402bcab08c52de8e9fae575c5e7663bfa98b3741cd06af79b9ae96693a3568f1d114c6ae3c3446421e20bdd0ac8c9de627e8a1b4628194ab6798cbf9ec3231a15f2254f78977eac887385483ee491baac07293f03bd39bc223b1832f3e341b61c9ffcdbf75abc9a1f5fbd95be551586ffd5a28d03852268b8f26bde1ca855287ad51aa44901f5ea79e250f8612d31c8ba3645b0752d11bd46995ee8befbae8abec557e1f95ea11ff44ddc9278fe3acdb449d1669fa6003420bffa339cc5817c638fb982c8a1e15221bee9c04d39e95ad4e3009c02878e8ad02aed3d25beafbc4b130e11f21e0650b5289e0869761a19c14a58ede44635f4dcc662680c4d8806bb90340f5c0241df0c994fd690aa6be761815387518f6ad6db37a6dbe3495f49a86f8627c34389af4fd58a7249fc8c92a6d70653252d7080d5a60908fc6457704c89cb42ccfb848a1dd3b83455df92723242408cbf5014d316898520942da1b31b632c1e51975640e349923a0b64010556e272e0310301610194c8f193eaeaa380fd56a14cc8fe99fd85a2affdd44b5d79a04369409b6a84ce2c5fe1636b6fc766884824aed08de3c50ad4fa7785dc6c1a3b88806ae9ac23274fdf3a0a0ad1cdecd6fc0620313cdeace2b2fb7ddc8beef8df653264b1418e66c60f35c4dfc77ad31cf4e0fa1ccbc51bdd898390e10b375cfef9878c4c765567f018d325f8db3b64d2196576e2e58764666a86448a921d0750ff9f6cab819c9269ad791ed769123829c8efd36fb8f24359090e276bbe2a4de573429582d3261b764d288c9eebc28418a1a41a36d3c97d856527e66d3d676b4a23a7d6bb27f4038a99bf6e4447f8bd1bee6d97d976a05c30779f9aff35ed6596f6b542cb85a2ed5eba15d866ce21f96359ac01983aac7c57914c12e864a2274f61faef11d71dbe58e311c1b51119166f48281cf9ffd27e8c1505426c774fd9ead06e152abd4acdc074991c688b038a9c462e4ef1903da53d462e5f229e4327462592fadc652a72db303c7f03bf6431e2a5390d147f775164dd639484393461f0493336254a177ba13138972750a96503e5aee2bab42574196c292b68f9a37b8426d3623acde4a6845f34761505995ec3d49982d95291798b69abc3834529e333a221c288a9a92245e57af60c8b1bb66aa6ab437493ae7fdd1660d04525084c7966bffba6a97e0e0701bf4c8e7fac86d1f5adffe759e9cfff4868c9c8b43991b8961fcc87aa0dea38a63d583b7b173ee2c1dab2c0d61bbf0936dad30287e97a5c6fe2edd29a2e1940bf5cd0ab254c64d4961790cf4722c943d93b23c814dc48de03b2f358bb4690bd84df298bcc6359d78ee417648277125d997bac9de75c51c96c0a92ed8f02f1d4d8f513991ee0e6c27561ea83a7768fd7c2139c8fb8b6be82647c1057cc870e5509fa02ef8d3b2add760089d131231b68631fad6f11024cdbd105276b1fd60183e7fc00c5df2e14f30c3a97ad5321eeb19623ad05032e08fd513b4f256e7ec9c94b68dd07f1adec50728e1231ed1dbd7b3f52341db25fd43c5afcb1d13aab36cc2900b794ea07c3545aae499ad4519e55409308c23bb1b914a61d76655725484a53ac9b9cebe61ead9e2255775c9977cae860f32833f5ae1e5bff3676dd2bb4c078586c1a2c5407c1296958a089ec3303afd063469acb5a5c2104ca7974f34a249f6c380eabab697b69c3ddf1b0c3764d10d45ad3f6e0a796f5f3b989c65d1c44483d8e5acbc09c704b21744017b58088fa60dbdbcecc2d8ca58eceaebbeca7237958dbb3f980165d5540ae4f92e0575a5ba6034c2a0f5bab537d766ab4f7f8b39568bd35015cd38415fbc838e77455901d1984e56ff82edea4d3189bd0068dec55f4df70126504fff7cc5c452c877032bfd31bc3807745337c81d2789e5651337c673fd826593e19101d61bf4ac8547d2343b74ba9a8d8aaee34d6765c31e9dc19e53c3c628efcdec81c63fec86eb32ac60017ee273371b7a6cf114bc93c42d66b6a0b476435f3add4feb0f040e1db76a4be3b091a31a4343ddbb2506cdefdbc9f6b8fddf26e0c64669709d90474783148ff2ad674da8365ce67e3d41cd982f7387417d2f54f1b3c726066db2d76e0a29afc206604f1a060751312dc476eb76fbf00c60589243de2ab1fdc55755d52ce0018dd02b4236dfa5e5292daa5d154b841fecb663dad77d8390563c4e7637cf55a4382a2c66874674d31f76b5527bdbd8053a522edc1615b8ae498895062c1eb233a08cead23ac87fe7adb019ca329fb50b1aefc7c14ad2019f12dbbb0794f5e1eca092e96a31737567298a1a7bc3f9c08cafb0fa3a7d0dd72323779acf1290b2dcb5b65985deaa5ddef34866c1b7cc39d931a70ff1bbcdd5e6a60aa2625ff0ae7104e2dd316fad20a5fad47d49a04abe33447ac20b412eab462c2b9aa7b281b26c83971e1c99b70c7d3acf4d49995c2466ce928ac037faecd47bfdd927227db41de5c203c316e92ae4702a6d84fa3fe748128cbfbef614ab865a7c31aba741123c48d76681b97eaa3bb314579ce9dd3855e3a5a27efea59ba7da3d9ed79e26a353d52f2eceb67089795346aab042761bc48219a71f480624d55a475c7a2253c1839e75a3b8ae53b135f735749e20afb32a3999a234f09449a11b269a722ac29a4733b9871f090d8fc43d5f4849b3198f58c0f72c10715a528c58136f1ba9b13b14a463fcf8a631874166dd80968bd3b04fb8724522cf7c42f124b7eb2859557647d73a859f2bab9f407cdfeac437d385eb3c4f269fb1850652c2d0c794ade38bd25b2087fb5d977a2ac97739e79b11692aaef3dd82498b0207aac7ac95149243306523302853753facf822738792a60df43b49ffec71fc89f77dd0683d598bffcee9446c7814c179cc49c42234e6e8208df3debce8b474eb08c67a3e0f314b47ede100316da7ce49c1023d4be4fb554dc868ffd4c97f1f274075ea15aeab4c3015be3654271d49f9028f8f0e14958d50cd2b7c957491f64bcfc335582df297d6267fabab048a4f539be3c20544f9018721fc73ed4f3e34136e25ed64c4200fed47fdc57b0a9e42c27245e36295a97756ad550177cc98877bf459256d3899eeafdc83d0f34fd8030c246aa01624aa7a62a9a4807a24dbed6910cffd652145fbae888e4908f5fbd6013c0e31a34c652f090101394c61101ada9650813e8e9639e65f9f27fd03ae335049072ef871bcaae9de84a4050840c925068690e6b5f90a47f25e955878c89e4d4428f57385a7305de9176283d795a47564a03e873c81ad16553b5a238a515fb0aca3e6b445a113cc87371fc112f14f5c905dcf075a07c1f4dfbda9a47618cdaba26553584035e7f5dd87c2cf652bad2b761c4df1c1a82e7a541a476789dc8171faa2a68599dbe22cf212c1066ad2a8a8146c3f2d6e3b1a131cddeda48a629f849445dc39af65de75f94a269fac97ed242d2d2d367141e09c51dafb8228637c03af693999205f182a156a6607f45f373c9feafbdd7d4bdd01e50c262146286277b4a68e7259693ed03556f257fc7900bd7388903b2dfa188c197a7d101d13a416f965041fb071f9f99e2755292fcbd05f563bd3d7209a48639ffcb8ded0dc52716b5c75eb9fb86fe3051b7f89ea30e0afcd6c1e82aa338697d61940ed36db14e981f030817e15c2dace350cc901b43ed4bb4bbaf27a3c6ee50540a2789fcf4561e009f42f4957df5d71ff289921f1fae7ea8011386344282c33f1290f3fd20faf179eac73bcaa65e15c21fcd96cf632e84208fde81775e0a1535c465e5039a7fb15628647099969663ee4d1ee12cb6cb5cb564364ae60bc104da6abafa34f8c9a4541c64b3972335dc4cc82ab7b6cfa00bc3788d7cb0b143961bd0ae938d1dfcc30a06feeb2de3587905d8e4cc14ce3b1fa9497f0ed18e0394b87b0d9395dc1c328e041f63b5a5943cfe0169215e86b6b15a0550ce710e940f48184ca736808bdba2f64232b90222f600826e15cfbd94374de313098aaf40df81571d96df68e9708de50589bb81852375763d2bc3381a1b0796db5c8640a9f884f046aa21df54d2959ff5fa4c12ea338926650f370ef97b5fed85bebb2b69f547d0bb779aec1f2eef0bed6bdda28942b9421d3bcde7a0b13f974d1bf099bdfa014b5afc6771d142d3e157517fed07730c644d4c4f2b94d98a939fdd634890b9026a83ad66f3dc965724d4f97bfdcd20da6291b86fab95826562873eb5699327c8df04becb70467cd33c6636d475f1407be34a3bc49889ae1199535250856264bf78e2404e1f2ac8015a9ceb72abc364e35227bf5389a2d8403277b6232b63651d275d6922491e098977e6dc1cb966477d81c64d1e0b8ac090324b63fd800625dcce6e35bd66bb97db662bf52e031ff8c76e8313ec034d8fd51713ef84b37f29f3fef782e57931cbac65a677b9840ae047cc17f22a21a3343b1784b8cf53ab828346a132a521fa978e1308134c38b703d11a5170f19ec929ed3be25cf22bd2f8a896ea1569782c5d382b1a2049dee976cbf8b94fcb48314f2930e9217b37dd479c5ee86bba22b6814aaf31325396e32f14e1389defb8915c64b86116eb231171e74381a00e43a03c11d084e026f6b2acb9e5d9686cd10c542b6926c2bd77c709546c2d3d08ee088179836037c873406ba9db4e58cf4f5fa205b8645ed5554cf96535afb55b3f4aa0d2a9ca270d585aa49baa27ebd08d1c441a2c7a7e948f994f0b1cf573246f2bf30e08c2048ff8be2996a0e3c6d21a3f633653297f86d97794656d145bb7fd51c72efde3b38e2539c54d807a4658f5b3c55c94ff727f64d3687a24168c9f0c8337f1649822c9d85ba79c277c939706ab26b04c10b5ded21512c851db85384500c363b76850435f30729afb430f2c91c8283c282a4aeb146f53342e234d886ee4616321f2b782da43e325320f88dc60af95afdd22f90034a041e2cb961883381b9dfc43f57f85e3564d303a97fb0efafc760171943282923d2077e0eb708cb5b858c07687f731b6f148ccc77050537a6cfea5b39c48b7ed5fa6a25ac4bd6b2252e22ad125ccc589efa46d05d7dd2da7373302783a679be2ec942b02d489e7cd7fc2ae7014189599857f82ebd422e939dfcad75a04ca23e666abf09b70fcb728354d38486288983e220d0dfeab3433d5c1f35310c9a25178bc5c12926f503704fef3f54d1c51d9587c7f5f831faf364fa56aed1d2df3907f7f5dc7a9675cca4b67a3ba1ef76d2d2a4bfd8ee9acd7de55bced6d75a3542e994d6078b77d50e508699afae55648e863cce6e23f0ca33c43e73d4dba8b0e3e12a2ce390f8375d02b134cd3419af5830cb90d829f982ea8ddefd07eabb1e62f691190efe3e7a849dd059bd1f5a8d9a3059ee78aaaddce53974022ca3b6c4c160fbd5cc81b4bc3823b38515f688e7ac77957eb74f86e0ac5d6ede4a5c9c82e860ff0e72cc09b9f4c4a3dcb27c87524080504ab97a146b8a04b04aad1b23be72c4454f86cd804560020d8a84e4a4fec6611394b44fbbe2e58440c5acb0a749b23da2890efb51f13decec223ea4ac01b9f439b81891e65c696e6a92f7489ef9bf648ef858d1153fa00b4b733593b71eaf745559e6b1d3c74a6240989197f7e65e5ccd8e5f24ee50cdc0924fddc10f396ea12e81e78da1549146d2b02539e793f92808dae9a9bb77b9eaadfa95422d38b896c70fbeabaa5660928ba06070643ecddb9d6d375b3d924d71f69fb8acdfa4bb56befc3a7069ecaea82b80479d4d3c38e725e6d221bd923d05011ac35e825afb10aeb13b7607bdf3e98db054887198ff99b9e53f207590c98e8bbb64258256d54a883a9ab286de4cd1ba7b139733964c54fb50e3e80cdab54b2abb6e76bd7911ef14bae9db13ac343a91e196f85d8866ae7be963dfcc4f878c0964819923e81c0c1ef82ed7ad68884b1c3680e4dbe683e9c4cfa0888a4ce0109bdd013db7abcaf96ed2c45436c4b37f939702de148629b7d8c26acf8afd1b1be2b1cb6250206faeea9d72e517f98bdb724baad9db18d1f96287855d7d5a387417c6372957e3006e735b118a3afea6d059623065dd11652c4cc17725274334ba9759a8b2e108f9f7a1eec84b9161505ec9d7f40eff5fbdf41e494a01af290238f16ce75463f42ed6ae91bc3310a166b1dab146ec6424e6b17580b5afe2a7395abb3f1e8632894d7d9820ac15116637136eaec50fc6a41a00af1e630acaf7089f1794e18745189565fc4982ee96bc923f32eceee3cbe9dcf04226627cd581e1ff9a47639bf37f2aa818a8764c0c43419fbf9068fb4345dccbb03dd069ec582c824e6a7051dcef40031d9d5420bc191df517d25141bb45903678591d69690c51ac62edf631f1cc1b5ae6b9d82aa2916640b78a1f39d52842e6ac50c8dbcea51cf2525439f6eaf3f1e302087de787f3d25f03c136e39933eb19a241278f58e8b30ddd70b925ee1fa433dc2a2271f12c0e03b17446a4bc711c24399138f4cbb26e3fed4025e8bc5e67924fc9c635685734f61927b47cdc7109d08021c7bbba889b9bc549b664723d5a7ffb2b1b449779cb1572d519a146b1082c99b0f0dd64ca2b734ea84b55ac5820705d866838255583f45a28d5d68e237864f85fe997a3a9805dcb9fd46ee18642ac1994ced73289e7b4acb37df42a8d31f221a5d540f04519d0eedc1d6772b78f64d323a5c248c7035ac51d620703270d92754e9a2d11b9f3eaae8b00c298cb1b8745dde8a5c8a4e68c65d78c371329be59872d6e644dec4c71e2bc26448a9f84ad9f9024845927deb4b3b64c136b4f5a12a34ce10643f13137dd85c8221fa6930c0a18c83579ffeb3ac7317113027b37fa81103f8464aaa2e7ed263f5070f603ce4db12ef8c4f0c478e8db628a73f661efe8532ac40b03f397b69c48f3bd7618cc62f2b20ce861ab1acd0572fcf1f58f21015b108d03197d118522e345069e62fcb6a1c59373232b909cbd6e02288dbb500715409bd6754e403f2ebfca706390fe68906c32e3074ba0687ea80465f022954370f5c89d9cd619a5f3690a05e77f4062e5128693403a89e6855ebceb3100a48259266ff4c03d8154ad844ace066732b882b53eb1caf9295792c2be08df9ac02695d6b798e35c0c3c62b9abb89a77043e5aff2112d698501b5f19b343634a4aa643479c33a97920a26c0679d90c6b6046adaeed2cd55f68d0cdcd9935bf2b0c1c9645a30810ecec3305ea9e6478c97e7d1252ed94ced242de453da6094ab0c9a2541431cadfd024facdc5d126864e8880d0f21c94388883425b7cbf62c2af312a7fc5ffcc59d3bd4d96f7af7ee12ceb9a095f5336a9a46c36054d6e9d40a571bfd68eefe18a63ad4a9b3ed4a217a13dcb57565786aaea53974cd0aebadb6c3e74cc27fd6c649c68ae2ba6a5a2b7efa65fbf3803f3e897ef223c85aa7667ab5c512cbff0bbeb1e78335188d7671e0eff27664fb22665badbddb065eabb4b9178d4c280460a83d5d51203c32d10625f7bab1be0494e35830405e9d2b89b91c718c99cce9878098c7b3c2081cab7f03b00b751bc5aa94e15e347cd7313248bb08d80484e5083cee3e8c02623991982511844b58e71bc992fe012b53b287c4a34a51161689409ffe5f8c13c0a2e2424d6966769037444f1ce46819669d67de25d5f86dba5cac504ca2097e315c83cf9b43ef0071582baf527df9bfd64ace9535ad46f1a59631d92c01f3e72771c3f2dca34c28eae5808a2e5d183f39cbfd69b34451f05ca8061cdde74a219c7b323a39666651c9033a3be2d8b9085fbad6af51f995e8e7ba54b8669da82ed3f4d1eb8730c72c085791d95896ac457488f23ea1ce7c0bacdd1ce9c6941fecf13d39a6252eba683b4134cb977a7e3af89d890635038db6b0d30f1ee9dcca7ae0044004c34a730829896ba8737a10cd8224e5cd5c8756765e201facc32486a58ebe48e842974f576c1f91e96d7f4ea7db7b0de82ed55464174ab346407ebd8c7dbf76898d34e964a0bf7fd2c383ecb792c110073548da229a05d8213bbdf8495b66ab5aa3a4ad6f5ecd5a219ae47e934a1cd2f48caf5710f1bdecc6c785b8d7a23341698a433c251bf3108478705e0e7539e2258cebdcfbca8782395bf4660631c145002dbfd570dab98396e06f8bec992c0ca05d9cbe86fde348f7bacc8971937cbb29a878099e495c25661cda4c513e6aac17a65a670613ee351f52db213b28bf04ee7ced7f9e3d8d0938bdfeec8544b0e5ba915f54f28a634fb7bfa63f884d764e6bf6085d0364e6f478488f686fbf0bff503b85eb8a1d63167d350f92c641bce3ab40f158bae1f93ed6440a1af2112efc2bc2bd0a9389189a6c97b8bd6cf6bd99cef0066ac9c1ec074a7a90a559035966160d2287adfb7cf4d1999871e9fc7a60fbd5a421440844414a7ce76cf58dd197c6b3f3ca0b80358e04a260dd8db6b6dd589addd21f89bb0766a5a5810552179809d0a8a8672aac794c6e11afb11a87dcdf07af5e7d039b674961f64b39dc541617998f3fa7e7e2d96eba6b77073ab6049b185a8c121827b2eae317d86f9b26ef38b0f222b5e79de6f6240d8fd89a340dec028bd942e6a635b6cfee21f5a94c72c780557917f1d8763c35b2b58286b19af265e40f325007864ba55bbbdb2d616b6d420269575a2e17de46b1c58c34c7f6c21440c31ab268227a61d7a9248b4437f4e3f0fdf5ee28d20ae3489dcaa7510fb32035f7505a20b6d8786ab22929b4caff1c10332abb12df311ea7f3149dc5b4b8b8d6eb77878ae5eb427edf59661358a6ddd0e95c6c037de401913b156b7e5a7544e16717c7789b03020fb2a0a5472fd6256ffd73711186d8a8658347f0158a2a6a78455400073dcf63438be6aea0d77f746cd7ec2fc679c25517e4d0aff168155d90630aec4451ec533a746cd67454d1bb6c3508de578106cece1abaad360657c17c4979976f29cb16703e955750ce96c9cd33b21eec7fec46ef24668e63fa85fb0d68202dda413ad0713c1475782bf0e63add5d380665d73a4b466fdd3226bfe591b1016ec92f39ec0a76e9e85da3be88b9457ca93c36773efcda7fe5ee596fff2bedd3892f3a2a394a3622b6886d6cc6de6d2c21b5cfcf00c06b449d77c5826eefc66d2006636a8120b4e16cb33ab255ca6b0417626e63480f99618ee1cdbcee363813f637469e0127e8e8322ba78f1d45173d62bc3968e30e053571e7029fd4e6a77d685c29cc3667e36b1564124cb438e241c6f4d2f0976368de36bdfd71e9a97084c423fc76ce37a652d76108025ff09d69396449bd748c4b0e569518d118836a07f9b3f91bd341f9de397a0f61b9b1ea7ffe4bea7330a74ecc5bee006fd0034ced57067038c9d07d7e85168590720175bbf5b65014c5f759c9afe750353fd3a22193f77ba2d9a0412d79ef8f16ff68b7ece6092a1c10c01dcf938a4ca49a228e1d0e3c8a2988cdeb508214e11ac5345962215fa3f475d8fe29b0e6164e1abbb46787f43e2203cb9d527ebddcdbff23d7cbd67e9bd754d76e48b1045894072016c5389c531932308755f04110f96fd9089a03eb37bd0aab574d9a764006df064bbfac9dbbcba89df818cf26b07e97b8156edf33b9664b7e89802a274e838205ef23e6cb5873f7567a9faa41cb3621ef577f1320803c8c00cb8925e581d32bb4ccbb366bd907d2991516b187e43f608216b58da708ef24d253dd87533f4882ff2dc2f41348f427919d2e017699513e4f1ec5fc8907842ae975dc8411aa6ef6a339a3514c5beeaf851923ffd21a973ec091656588d995806947ac8dfe5f79a83a60be9ee9b6a50918c1373ca187e2b6fe0ff631eab2da91090c2eb8c00e4e2c9ddcb4e966c4a4094a77419d8987efbaef172e775ba9a1ed07125154132827886c310ee5d5b272b41e8185f0df3b90c7715ec29c912e30084f75e708c6c4e5b5637a0b7d037501896c293c7e4cb7756acff2f0e4adbb2911112c4f4cf4123475bcc3c5a9fb599d4cff4bf65a6ea08fc2d9efbe8dd3a68c1829891e7cba5d9b79392b44fea61c99a39eca3a6301fd7b5e84962327967716dca8630e8216c9f10dd4867d5a0e92b0ce4d09d8e9ef168c0521255e69b8ba6fe5c355ab79ba42a4b417e1933bb9f9c1f4425bbd3c85bb1282012e12032a8e9a4f6f436a94e21dba0814d0a8bb1ed201a3d04504c71c627a28026a488c00d8d6cf2a3708462963dc11bf9e83eb4e4911e3587d3b96d4651219019eaae71e08bebb53012fc24ace34d40e1d3f71979d4961c1201ac8bd1847038b74b7dd582cb36f0fc5e88cc0e16160b84f4294c7655771822310b3f6555d209802b39f5b2f167bf788fa8ccafc5004a2dfe39b9716cbbf6800df695515a1742f57e19e275b40ea3961f7597c5300105c55487ad055eab54e97fc6041f64a4391b4322ea6d55fa854281a8f0d7bfc811bcc687d75956c80c6c3d6dfb92ee8a2ded8789761d1a1c0292893eb5e06cd8771d7b267b871ddcf9990daf2b7eae919cfa73836a5f1963d140584d49373750b49fc859c98663ffffa2dd14a07a587a69be3f67ba1aca50990940386ed4de84b7df8bf4f15ecfa4818aa45726fca73fcd71ac6eeef6d30d7bdd95978124a4f585282f7a395f59e8500a5e17898084c229249c8586ecb311d2f7a9786617f4d788021251e83787831d9bfba1adf58feffaf0f565be57955c7921d8b0cbb8b95da32f4262761c2f1a90188bd6f28842824c9e1f11449cfd93c6ad8f5e1aaa4db83d7e91cc09377eaba320c6ec8ce627eddaa647240321af88d2fac6e85332b8443ba57ec5e74d612632379e5687bf20baa45179bf94f248dd4dde642eda26b5909626ccce8213daf7bb911c1051aef609e1fa25c170a2ff43c65ecd4b99c786f8b1eda4074663e245ac23d3625127d129cd7bb5762ad74545c55fea8886f32d1930f3f3f719088ab509765f1159577a5dd6b54d778459fabc6fdbe94811dfb7de90fbc7fbb6a8e9772d0aaea1edfb1d13bcb62be7146ab628dd469b46bc2ace5d3eea5c6436c47d01cfb243001accfde72669a5adf88c7230af97e4f7462ec94f842ea0cf1f1dd8ed1329202f8daee2c0cea898b39c71bd76d83931d9527d2453b0d1db908301fa6aed234ceac012b7c19cbc9d3350f43826a50f9b65b9c52a3199592cf7a6d6b330578829778c0de2839e58ce90e43d465a5fa77294662e0052319be4009889eb26b0bcced3fead1ec02ec5fb7567529bd4e565c641e93b1a56884fde06e7239753cd7ab7d3a77632609510aaa39d4bd53211e92f9d264afd5f8cc085b5f44eec3186ed91f03cf10251bd4004b718d9343fa868f2506727da1da042c31b74e616b2d072112af2c0fd8e1570c3ddcd8e281cb548ea294dfcdde20ff1da8a7a4aca3d8718248785ebe46a8a7820f729575e14572dadc6378908baf0cdcb2a34cccfc173b7ff461b827180a6505a10ed8d1e201cf28f44b65b17202d82179a012286e682db0fd9ad6977dcffceae02a4581ba41c51f5c6737db736e42964bf2360adb0175787e9039172c06758433c5b48d06dac3b40f4ed4e46270658ed3797f919886475d4fbbb99a7f3fb08aa4f8f8b3d09070c07fd15af3a982951621eb3b77ec3c6ca1f57204038062da24adbe45e872d6da51c3c5ad7229d666225b4873ec9b2e7ef1f25923247e97fb060fa832bf372f5784487cdd3f9d1c6a3231f93d03ec93c98909f53b224cc585a15672a6455418237dd880c852b561450db4abe3622e0355fa86bcaa622e34d05d0aecf364f13995da35852f883983d6cfd9f71948a9faeb23c9d45f742aa216faf374c2c52abdad3b694c1853bc284326942a42833a1f61d51cd78ea03b5d5ce458b016b184d14484a5528ef0509a7da7b535621e6bc479a75884ab02c6d357fdc8aa8e803ddaa8e92807009bc7c7fe0601bf4be85810cd2fab5dd4abd4acf75deb5ba76de7bb711843884f43f917c2a434689002bb304c31b21e2703932dde4539aa41a0ccbfa80f7eb545b857f45f8b7ae0b760967f4d6e69f73e9d503a187ce823250fe7a501745910f5f281ca6fbbf049fedeef0aa5407057229c1178da908670f9980af7951e034e0acc0bd1d5e440830a72f98fe8a33541f5f0cef6e942562f9a6111717fea526966ce2a9e59b0aaac6ee02170d666893a26d40eba4b9f4e31de7801f981187512dd0509821a5ac2bbbaa34aab9a6ed28d04efa43341d653705a9ff5de5f2742f8f133b52c55c715b235d9eeac0e0246e7d7e93494d7a22840e30ba482ea4817b2d819f5e89c362a5cfae7b011eac250f5dafe4fc885f4f5dc6d2ceb3f1af1ac80310fb598ff3046d8b9fed117ccec48d928e04965677a5dc1fec7cd536e276e20e7e1dd75527bc6120be9ca0a0e39e41d7e3bf863f55cc0ee131233bfb8186baed88b48ecca9daca0656d614e50da8b389134e01232840c5f17312113b3d50cb7b4e330381832c8c2aede54721e8d7cbbdbf433e7e99fa07eb0bc099c00dab023d78dff3cebd6f5f7548af756cc0b3dc6ea9dcbf65429be00ca0524f034bf82415197a7f13d3aeea34453af90826695f32677af7df08103aaafbd2465a053ed9e3be9a2e8cef43d9a08a0ac51e638ae4651ff808d27749b2dea089e1188ec1e99b1bb5876dd210ac4f2d3fe0f983bc46304494ddd8f08038902b1bb77f238941923a685431409e83b62a581fd596fa603289ce7f443df0c348bc3d2229e355a5b6076d68d6b820f94041ccaa2919dae79040bd179b9fba1072b984e24c67b8405a0ec97fa3e3f0edcf77503bd92d32ccf84eeea893f703227fb4491e7f03abb50ada410d0293dce8e4e6a1df73cb2e504c1f3062e0939583006245716f78212f1c7be676426a26adece539906cb4c1046fc6de0ca7681ce17967d9b44622ebb846038ff1f2d46cf895cbbe6a54e37ff9abb7ab766fa3d9ef2a448204440e38722e2702efc71125a4f7bfa9a34985b323cead7eef89f7c6bbf97f07d1b67df7411600c04b092f327f91bdfe91432aa453d0aff3a0022a3eaa8557aac2a516629225ee6082bf448562f5c03f66ad508607c9c4cbac55ea0584d647bea0034be70adcf1adf1a219fdf449eba003d1bb410a5da88414cfa12bcbe99074742fe4e2b687ac230295d590a56fd7dc1ba043c02de1db9f04a956c605efd85933c5ae39c7eec1dcd0668e2762d6aea6f4f3f6b5a6b4c83303113e3fb745ee22ef262f5a122400534126ec3f763058a483d397e94dc8652857eae5cbcae8f39386090de0b4691633404efe7e07459376ba57c555d41a1fc04049ced18a529ccb20d0ce18f9c432f18f4c492f78716b2a0cb19b2d37471cfa9ef2373e844e887fe89a83007cb0afbabba55e7b3216d7715eb25cfe2a58a6b2294abec4596a3f008650bf0fb95a0ed42b951d833ce4c63ce27618d8b8513c5de35c2e0a175ca59fc290814c5e89064040c3a0964b414841881f210e7ea3ffe077623212a64dc64c4e095c89861b95dca8bf3bbd3bb37fa0287d74c1b0c1e7ae8b9ed6276b8b893abcd0664a45c10f42b478e20048d7b771056e5f2e66e75f574dfbe0129d5b0b607c4bb17c315a41cf8e4559d373089af210ef237d72faa5947d5f7475cab8b0fac099adff98086ddfff5c8ca2a8d0de14788f57b850db13600af40d31baca9e88353c1167187e88871f6e72f44a141637a18a2e698bf2cbba509a23be7c8a66ad23577828df1e8ff3451814e24addb8d5ac2d66fed205075376875f3f3b375596e18c517a03f2e3b92740272517cb373fc827dcaedfba744d5b691f12f0e684cc5883a913699ce0ba24dffd8265d62b143861240eece0d25957f554b970e82d48734fb60e3864126a4b1e93b1ade9a68718bd7f520c8f947dafef04c2dd5d9fc052c2cd2a800c1d82f367a69262ce9e7df7751f1306422bf86a6114e6c83cfd0345127d82218e0e64ed5e8c017af97ea428bba5a2644589747bc4bab5cf2fbf9e3f54efa9c6d1edb4b84e37762beaeff5ecbf08dcabb6d8a6f0095dd83804c79f4e84e38e88d160a37794ab9ab41faccf0ee3eb1d7868c4afbacf92e54b9438520ff04fc11d31b723829db42e8a947c0ffc59bd5825e376caeb4d88d0fdff3e1dcf2086a6dc78afc5530a126de6f2c43a57263d65de96d4ee44a3ddd8a6a35417c0f722c4b3686974a1d74bedffd261817af6cef78b959ced459018d7f9bec70d2853b500ec5d65818e8469fd462a4efaf861af2eb7f8264f936478704a19b77bee42b66f6cbbd9d5e7cc0d1657f176a9726874aa9332a0946d7a6fea3d9c46b5562309818a6737a6ca3bc0d2087c7e75f0dfa8c9426e38bad0838a880ad6438428b28e37f3a66a66489ae8e52741140c1255f6a03fd2b13f07c8ab72bd8791e134b332aa86473e3e2fc5969b57c71315203fc73f047aa0f1e42f2052641de4bd2cb3c09e2486552c9482401742f6f499beaa0a56a4dd22cc67db507ef76f83b910293c82f0c2e7a744df368078d1b83fade6de752124ef03d61b647073513cf4ddca154396b2b191d5ef196da4775c6433a31582fb2025381d16b99a3123efd06696a44ad21664c468e8c3eaa09c5d9c6cff9af62ea811d094bbac0d1269a0c10a763dfa79d6d1e2393fddc0c0166ab182308fc1c7763310b164730970786b3cc175a668f47c161286f2c3e9dd124925340546893d7768f479582c1d517e35a6bfbaf1147bcf3e76b518fa4e81628563b553637b97ae122d5d1ffa0f755c1ebc34566914981276161c1b5ba0d28582c8962d4b95f5f94ad23c588579839293c3a8de062796c94ffe99ea158930618daa2977536e8d7d92dc1c437941278b7f19070001963484840969942f50701cd55f4e38f6d33595a4cf5c411c21b7c116323307682fbd274085d6606dcb7c46bbc6969ec1364661e4122c4a7379906ebc858681875483b16b2cb5f3eb2ed8dd70dd3aaf58bde32aaf184738c25f4b6dce625d2d697943c625bbeb5c7bd4fa4902707fd1397012e61d5a81d32009c823e780fb8fb36cf13f7c0edeebdb3c132fa872d97ab239a3025c0b2cb73c96c9d466de0c77438bd672bf53a06955895ed37bcd53914464f436f98687e33d28929e3a7f2c86821b5e60817516d1efd76118c870e65baa6bb91aa9c63f1384b9bb51b899e63709b0b64a6f6bc7a530755813c12ecb1ce6fe10502b04420ef2b0caaa2ae93cb679ea5209419d33c048c9daa298d85d45ceff825a2f26821e96b72201d9d1dc6d8a113ebc813a3a3773b5da43b91fe2d03e75c026fe2cf42b3b71f8e0e9bd41111ff4188e68e590dd1d56ae375d6afe51ff5608a4384744134ea2034e7f5fe6e3d2802b86b731b6afa078cdfdd6a2d426a66da203d18284ff870794eb3bb3593625220784950a02de35f2199176fbee414fe56ae1edf8a0189db7bc869e5abf6bf767ef1f98dc679ef92845921b5638e9ab25c24134ccfa59560039def34eee89e553c1dc315ab5712c8fcdec0fd6ab4aef669b37449f5864f5481fe485a54ef28c3d03ee674985d1e30f187f36f81b289c5e404f740a3d400e88ffc3712057cfccf3a88891d70a61f2f3ad608c948683bf3fb7d2331808a6566bdb1d51cbc19d9c9f160c944258cab5cb8907edd44b55d1305f22f44202cb0c937164440a204976756a81a226b995b4e50ef31ce529517ed5cd717edc2c1b7b002a69a7b5d5f994542c6f7675aa2bbeae01ef6c8443e79cc90e0e0a441ce62a3c6280e22671648c72981e43675e6d3f0d6028bdc622d6b81838df9b7d620f02d4cbae77c0c4dae1ba5499f3b651205e16b74381d7eff1f6e52008db267b1a083ab9cc33aef159ac3f4cf17e526f5fe799c60e823e01839b385f913c08cc5550d03b1b0864fcb00bea09f3b7a7787500508f6d8fc3c03a5fa9c90d1a7f19ee3ebefb0819186ac99da2cb2897e78b8f4314928265203be4d4e0511887af1779b3384cbebd9ee4e12d2b48743051fe4378d526637851d5fc01a32876dc4bf58340801e7f5e1513d069552a8b80af06585e84fe96a37c66e5133a92c1522c2f5c5f1edc364cee855e94b4d941142400d3ca6b34516df21e8c030b2bb33ecc52c0a5696f2676cda56d2e64e88b14616a89e87658feec5cfcf9832a871833a8dc1c2e8f48cce6943d639f3c6e06411a19e660bb03319dfa0429853b1a6b03bf159f34b4afb575925837a198e1018f65b7723f73335291a20380b92f133fc92f6aa430365eed1fc7c526a31e814894b004eeaee5e27f05fd2f75cce028c1c1484c40902f3a00fbc3add1e6e8dbd196ed6ca1600d61587b3570d67b7865c4ff2f3d9e33c66b6f6d41e9f0beb0a97c581d7751f0fa8862be28fb1553f2ba53f71cf2b5b67a5fd1d4a0e37227d8c774c1dc64818e9403914e50b42a4e305f133a90537897c5bdd579562a342cbfeadf7bac7b41de45eca9ac6987e0cf11ec3404d132c41d8025efd934a6618316c20ef7ee13c36f222e9de4f79397e23a6898190f76d9566441cfb5d73b26b3a044d77639a59cc00682353256723caa13aa9dc42b0d02e79a62e1b59a44581db956ea0a047dbe82c54880f71ac9610ab25eac0a1d6515d2bff626541bb9700d258fcc94cc7f02b85ad00f73ab1238b85c52a962435a5835a53fc141b8582f513cc44c8fbecc35d8112dcaf11284653962149f2dbd3b51e1f16907ed99cf630e05ca57f515ef0a1d905a252099e3340dc28de3c64488f5ef28597645dafa0fca8422a1a140162a9b6c179252925160635631e6147dfb44b301077fc5f530abe909e9425409b95d6db2956654bbc4c8f13d29165f2b5466c1b25672d67fe75002d23cc67253ef3bf9d726fb676cebf807d3060b9cfc585cfa1910c6c5403456d660eb0cb37c6e34608cecec71fd060c730235ef69c8d3ca76443d99083b83aa8bab1be01a8b1226932d0fd4631ce87257fb85e16ee905eff2bdc003919265ab47292a1748b36c2ca4d033d4f880063bef6ab4ee2b4bf04d0daf7f9f2ced6ec647cd976555a42752711fcb918eb114db4440a957273724457cf84f7418d494b81ae9ca2fa3c9ee2917cd72897b1f0f22140631432f2edd734b03f74177ef826357cf7dbc953661cb023a46b790a545fa7f4405e23c694803d502988aa8cdb73551e66efdd3984ee8b99967f5a32335cb45fda7ec555fe9f3ddb29fec28779a97395949d879d861f6848955fd6ca88158ef4a4d0cdada43e9f36ec682bba77382b8a0bf45a3cc5b4751d6ba7ed33d2c5133f9c6b3592731b0976f236f5315ea533ea7d0829ec7fcfdb5aa5b2716128ed7e39a9750f88bbfaeb1f4853be25ca6beef91d89004987f786f027942b281899e007e1ab74ba844269d47d1cd45b1eef4f8dd1febe58975ceb781af24a9660cc453ece62a8093925345bdef5f0534604c872b294c9d3e9690d683d56035d75ce972f6ce0eec0f9ec9c295a3ffde89395c508ccd662528a40032445ed2bc2fa9e494824a3ee329043a953892159b8a4f70c2d7f0060bb5403a4aa8ee18f34028a2e750db0919c6be766e1e9c654fe74af0516b244986b1f98e2e26883a7ef573cdddaabbcf3ce3b13911d3e8035f5d861370051bd3202adc698675215222d879ff4ec7018cd965e423ed653eaf831ef5953e6a365f6691c76bf837bf60106f0b2c77a44ec5c5ad10a7a57ecd3353f525c3d7911042c59232b3c6241d8205a788ae88190573d95d030bc4ec65cc5aec4750201d261b58527245e851eee3abf81c6b61b423af448dbb087e5cac579d0d54329364c75c07fd27764f523a1b6095a128d9a1dea44719459e55492db1eec43c42a21b971aa11c8c78ce61e6d8ef7685209ddebf2863a45ff71eb5d3038c978e632c366c3dd4368bfbecbd965da882267d0dab87aa6124e833c2e452ccf0712446d86293b2522c7af2f94f0832b2f9bef6be157928f2467edf5ea130689ca71ffa6eae8c87f7d9c8803ea1d484809f7f7e667a5fde9070262bd89082a9fef798b747f091e427369838cb16578cb4baf7e25d2b5db7a1d1ff40ee0eda304f012b3fc8b1207d568e15a17c0e43388c867cb0845db9558c920a85aec8f353a606cf67e966d076b2aa8b24ca1cfa0aa5f32c2e806d5df0ffff12bf891f9a6ca713cd9568e1cd5fd836e10e05a216a10818ffe5d90b4a055c67d195d087628497f3086354887b91cd1772089ab88d87461dcf9bdedf51704d0314b4e4fd69d73b82eb1580ab6cf68744987878e90d44259b1c0e072bb926e699eaff7f9c7c9fc66c9029c33337ceea44d1081d54efc9e6dbef0777cfc60fe03809f27c9ae2762948c594ff0af794d378629fa6a182e229f15f18e9dd7f890eacfc6ac9cc4ead6a0656bd6f4319fc229a45052b2dc64af43c4bb1785aa42b1a302a96483264dafa25df53eba411b54fcd79630f06eb84c95838366c2979ff2dae6696dd746c16f23ce51807c36f35c64a385deb1972b419717f325755556820085b81c842b7c173dc93830c0fcd5b92b02b88d12f8ffe5a347fdd935995d09465c5471dc953da8abeeb25c42d21b040ce61a278fa3150cfa1b7183bde3ea4907c269c32bc06ff661c07510d57a0728356dc8eb027c15430be30a875a059b734cde90cb50bc9413878296ec3d600afd5107a887ba123a738959bfa74a603ced0f002d62c89d22fddc18b5b78e0318406ba2ffbe95dc52ba7936d0725ebdf3f27eacf597743ce8ae934927ad372e7d03aa7c05bf79cb6f2d46912bb0888ac7abc1f9f8c4ffcce0c9f74b37ad328438e5bf3bd208aa261a1ce746fdcb91d83b2af7d040bdcb8f30bebc4aa900f2e7cbf49daffa6f2cb284a3435e07715ec376bfafff214cead8388fd866b5c7c8e8a9e6a512092fc7a8cda20e4acc808d13bb66bed67a5ab5260898220a2447160c5e1965fba2afe471764f2e6a0fb1e0dd2ed6f2bd839246c99eedbbb5d9c27074263662076734ab80880a999e4b11fded8c29b272e51d292cb106b96bb1d82a9feee85ad147a5ff20b2b63ffb88f69602687d7c9a7cd2ae5abdaddeb494caf3ed7dc44bb65c6ebee5af83ee31e2ebd4b92d673a9e1f26cba2e7c1e5c6ef056011c4c8d6f8a96aabfc9c4972fb621f7003d0b44a206f9324111305b65f8ffbf8cafc80a4157d2607066b8873cbc91d3bc1ebee9f4d5ef3bb02ad45f4010b6f8a2b51c81f1b5096695bd9e06d9f69559131dc22e0bf0f45197b331953f2310db0092f60ea8676f1352c86d9f1e357465465b2d963274d1e4cd3de1ef2d14d9f8b6a231ab15ea040e5fee72f93da39a5151a7ef310ffa5ca85ca977b79bf3e1527bff445a45d85954926a032719dd1de1bceb6605b45ed3fc36d7f2f6590e783e20c8d70d4f8ea9bc7e3fbcc8d37959fcc8ec6845c2a288dadbb290ea44b0249304ed90908f822c32af0e5b37daea79dcfe209ac98b14a17de0021490640243ccc6ecd5644eb3cc760196c50db37a79ce60dbd18efee709ebf98cc12deeed9aa400db7240705f4a66d8d501cecd7f4ada3d3735a87223ef49e9e085feacb9048ad7ab93a9925d2859ddc37cfece5a1804e9c8a8edffc1c796565f03a5098548e821c1d15abfc255ad7f64b8c96ab89f9703be830e1d637bd9ff99d8d4d19ea85fc7964d0929977f8fe3fd16cbc70c748f8e6e9853ac7a270a8639a3df8f123fe814db91f895c668e6328a1bfff1d058d85d5518b94cb5fec15da7a20d7e5f374ce0f3955830ae96d7816641bacc588fe99e6b23aa872c9f8ac54a4e413d2ef8db2a8fa279deaa0640e4ba062637db818329a0fb2abab672bac8ac0ead73ebe8b31e21e151024e0649bf967f6ead276630cd32f4c007a8ca0991d217a246073326d57e3da38bb5bc1eb8b2665372147838ab77379391ff568a4eda5a260b74c0432ae42b825710b016dec89917565b9bfda46a52d46cce5cadb2a72f7fdfea9575d2158c20b65d6c126f11ceb833276e346441877cb23e2d2650f3067c8f7efad3747126e1f8584f9a1d414e97de4c764ca01e8e2972f1126882de589a7186b2a27476cb3fb0fbe81b6205b23869ee99f5b201a79e697cdd8690f2f8e29cb1f420cb6c1f1ca5d43d3259c25b4d97dd9e0d5f895e753aa23251d237ae709faa888b04d6d8652921f74112f0d34b4a8d533f7e17e26bec1d055d01741e7411268e610da5ef2e22c6673478daffe1fac2065ff6d2c3075d997303f3d466a7a9f85c0c1a5211c20895fe04c6d6764a53bae989a6f8d67a793a9923b179118af4e08ff13485825df2df68c2ba6cfa27cb036b172e464399917cd1d5c5dbf0c6e13c6ba40c7dcca6fac1164c0152f83b43834c07e993120ca77e080fc266fd4493ed515df2747db30383bac844a23cd8842879d4bf0c39f28c30f8ef670142e57778b63494f13ee5f7a384c86478822c7e8f36c29306caa16535f3d50ca999cf988ba84ee71e22a6098dc26fb5ac454efc02620c9fc21ce81ca49240678c7ebca2d20d1b9996680c2ab358ec2b7165a9453567200a0fc68e583de5089ce8362006f602f73e5d3f79628c7449132cb0f3d25949a99572959edb98486ca2c7625e04b84ae4fdcaeeeef2332b7b95e30b3d5f6fe4817139db9336d15e5883570250e9a8c9280d2b85d14b025a17998d7aee61d4896de6168598a8932e2c7e91301ba817b23dcd1a2dc07ec4a08efacb6b92bd372eb402fdf309e9b60dbcb61daba97914184b903d53802ce84b45fb7922e9caed56f5dc8030b91be54da14fe7e45383dc1ee5e219d4384e5c97c09568e299ed7876971d48a6b85592490a897320f2021d155ba8a8e50a6c8f0cc90c0e93b385572850a68c1deaa79c981ffec65250c7e21333a280f3e9a90b9c0c9bd369fbea28e900e0787557b63b0225dc8ddd71e59652e6427dcf5863a78b86b343192538e35a137cc2e778236e17710090e8e208951bce56dee709cd548472bad4316a30b71147761c8d64f473a15bb8b8cf95f3f00b2a85af99d53a3872e2ebbdb616a89389ecc6da5146d4fa60e7f9889bd86e6de8abf93e48dcf216f24cb9844ff81cc8f71c356b96d2ee68bd5b1b3f10f7f816e73504f37ff4643b0bb182c878c94d799ed8756a767f5200e6cb7083d94d48382fe649c692a36e9da959e1358362e57b6722b6a55d94da7507031647120eaec9838d5d795c894da8e739a07ebb5d02b1736ab3c9f33c48af6927587ce62c7e694a5423e68008950c3633de4718d25fe6d159cd6dce934504f4a3fe1e4675cdf8039da4a2c910173623786558b836454d7f6d847a83dbe0386ba85c73c4c04176fd5cd59b9760098fa35f05a11aa897edbebf63d2c0cd1828a56f61c5596da92b7aa20b5a692844893cf5797354edbef262b7d517ff800324c9a15b299c49f0749a29b3f0917062a79fbd581155be71ceac9e0e8cb2fc297312b9c9b3adfee8908ab2af004b9c1ec461ebb75471afe120639264f665a8d7c9ddea0fa057d5bd3cdc42468f7fdc2295fa994094d68abfb0bc8ee867a59f5c664ebfbea416b2e1a508788e01ebed4844d62d966d047051c38ef6f3bd871a5df89e27f4cad411a644758a17cf923d1166103a930f90cca86c30d6673ee17d9d3d185acdcd040b2e908af4115413a320ca38a2934555ea7861a2f6a3349d980a868fdf0f7d7246c7a36ea315d7ee00a5ca88180b3bb50bd629537211af8850d3855e740c1d1e99729a8a0d4df98486b48efb69435a90e678bf783b862605f3b402d1bf7dbfa9ecfb84b7b0abd072a089f249a11ea031b40e092fe7d19248583f1a2adccb9f78185d5bf96f6bc5623861be89c79341effe9d0e91faa8865723a05646923b99b5e9666ed9612d1f413d7a9ac91ffb90a147a1aac7134552ef22d8df37749fbdb7196349ab753e329217eec24c56fa05b1395bd92a992a87d3e6f7b64f835985b8e6f7debfdc3dab4145c922818f1e53159331f3abdb9b6ba04af55f6bfe2108ee5e1fffb47be057a146a884d94b6d70e176bd3253f3c1209170148406da322582757593d0fdffcf559abd88aee00eb9d18d12ccec7cc03c2352510730fe50c8188f2390790e6737a69d56afdfc7814a3e9e26e737c531e7052fa6b66686d05c00e1ac9591f647ee74b5e47addd1ba987176ec2894a87c96491747a17c009807472654078a571c08300943f3819fc597a73d552c34f8d6c07ac441070d123d9fb8f7bb94dfdac7580df540285e60482827de52f6df965ee3028da11e956aa4072f8fdfb2d6ee4cd3dd751d2d8a8f79bba510f800525a30434d9e731633d15dee815d23b742438b357e3049e4b45d4e717c6666bbfb1adc16540222a06178a49804272ccfbec1e2cf5858c14f7382b8d80eb329f3bf888b0e6817cb6880247a9e59c7170b6e7015ffd28a46aa5eea3b8210380871635ce1658787ec525540e7676aaa52b3543de919345c65a8ab3152a0a087e13eafbcc7d8301f8f4dd5ac7606688d706ea04cbd38d8c22de28e75e8aafc842a3fe23c6ef636cde83a4e0e11fa8d671a985bae0d6100d6589425a715c8e65de9708eb78643b4494303a9914844f12e96f04f78e07e2d862759db242833b97223a8937f4f6e5a733d253d166b8e52d9de3dd663b36efa5db99da991d7588e69b3b58a244ad6ca0f51e50a5466781013f57739944b9d6826d4b7ba6b145f02e9a382719f098ad262d42dc7b8d74475b10353d39eb5b37ffe8c436b0a47ae7487cf85e85df4b443c538328a747e34c9a50b01322eed0b9e86e3587905e461bab4939333d85a34bdc314cf2f812d628ab9b2823ed99b09504af37afe430820238c217b22dc530042d727ebcab3b9c812db32b97be210cec78b68abe7b653b9cda0d8531ac681f8575cdf8dff10b44097f351db835de0b6da17fc43379f2dd6505dba3b28a4bfcf5cd0d67067b6f71bdcdcea0aa969914575190a12eed7971e425b57d329b804c51ccc01984b0204376d018f482fa23af49e027f3969cb8fd819fe407726854a78c822137ffd9004c70fb12d9b301224b486da07ee314ff460dd92291983e000ddaf2d8286c4dc269a9bf3bb0692a675b14e48c991d21667be49fdbea3329f68545043dcfb010e34b10012d87a6345efd695aa394a9c811627b58f3e10f9595d5b6d51984541eb174634af7ac3f9e4a80c5a86608425b4e2fd60962e569271f288251da75936bd24a71604a5f0ca1628d929a3e97234cecf8ba6adaffd6636e8a060dbbe827ad051aef2249f32ca97b1e0e939a2cc8d6290be2b91e8ad5630f76fd10e8391ee27ffd9a5564f1e562993e94dc8fb0ffeff2682c156a447f63a293d60534fa058dc58e401fc67e7609023b773949f029d11782fd3bc29b73d5fe32d1a76551fdaa82bd617ee6414588ac51b6bf5079154ad2b38c1ab016e0e954bbd959fad5bb85c87f014ac2311fef680e13d03bf09dc32a8cd98b49e916cc24ebd496a027a83cf686bd41b11149edc1a71a85994507b7ed3f06a68b5035ac954841da318953ab475b65af03ceb03f0215ef6e0846cc0efa6b2f138c2d0276a75cd5fd28027f0d91b7660c129112993cb00eff594a9630bf424e3646ab06e50f4065f9179545be5910a6209fcff18cfdb7492b6b5fa51321763f4d1f795ede0493526b135f07e5703f329159ff792e1b3502628b9e5c19af42449dc5211d575733cbc9df1600b8c634f39396b75ee5cbf0b634ee7cbbe767adcf4e8295e01fa55c1401840c26b1c614af37a7612bc00fe9a39cde771b638dc949a72e989b96703a580e07479ffacf8577b551b601062382edc9e3be254fcbd699a4e4655b7ab2a680c33705f148654f84f69bd8f7b5419ae8e9deaafdce2a52e46bfa8dca7d2e48727cada84f8161a1a957447cf421a5eb7e8b403287528302688cfca53eba7aa633ad2b67ecf1879121dd36eed1ecf3316514ec19dbe4bae6f82a91c42745a059701b01403c4399621a3f1839a27d156b1e957f30f39973e10b75ba323ab0df500a404ae77b2aff431ec7b1e9cd3546a77c94242d9e00204790b319c6835c9fd711358b101bafd788263d1c13a61384a5ebb33727e9a108e57285f78f8c52aa90137eb712567f4e98baddb85a1029d1d3eca007ff015dd4e70007bb36caf041d05e24f6a70db2e109543ba9c1e995d22c704fb0265d5ce9ac5ace51a50c29e499d815e89b14b94e656fb57e4c43d44ca1cabd81bc970ca3c828534a7d648d0ee7e5f5c55d2a5909c73600bdb4c15e8390ff327d00f6ef47dfe8b88a4346dbc042b330727a2fc48306fb8528137d6de2fa55bd51ab67dd3f75c4a6fca740739f199ee51687a23dc537e6ed071bbd8622ecd149d5443ed8c66dffd5cf345dd1fc5bc3588e5171bcecabbbd3b489a9bd4b8d2b1bf304844a445dfe497c4a2b6430811c778265d0034271e2fd6ce99d56a76b378656c7f72b61fe9ed2ac67257ccc5954b130d42cf36cb8243f3a88b76bc3b010f2b5eb56080d2978f9000377b3ed22459c5087f913f4883043177ead5475c0b464010f521722a166da34140e146c25000dc954893a5e1169645ead1aad5f588369759e0fdb37f2773f35213de9b7aaf4e9ffd64ba7923dc66cc92b85b388837cc9e9c278eb0be38874ed8ce5bd2c26d295944a8997beb2519ad4a67b3d9d012ab1b8f544524fb74ad84061c2467ebf0dfab801297c88119e917e0260195eafe4cc76d877a6f63c60ebaf33aa185ae2ca015ffa2799e4cb342d5eea4974e7d0bf4039fc110cedf8a5369315cfec1d778129c8d34df31d931b95d4133994782772e79d9657a1c9b0baae31681f06f83bbe8b3c95a5a64f3f3b7b9d2820319f34a50d07c6c495f09566099d7cd285f1d4d056274dd05df85b86d1bf70426efceb85ad364a15f1c8bc197cb9db5328133d709e4f0cffd09044fb93add193480b1a526a62c7dd22e9062eb7214e327c93fd38729da245a7ca9947c4de6d7649205a0935630160e5dc2fb795c7bf9f4e7d1cc6068bbe30e99ae581852fc08d0386d0e0fc9d71573c26cbcb5e75bacef0b22418515072005d2714f121fe30e40f5d013e4de40863920c5d48ef5a83f6e98a91bcecb3869e29fef187a2d2e75c74d2346c9db6f24ae8fa9f7e29a7eac3112238cf2a4bfc69d28f96d30a7441a1e816b6844e26c80f48c411d17cfdd5c7f73f0d70c61777468ea725dbd532959992f9000e55974062e75dc56834a902aa78ca19e63c1eaca9c390debb19daf8d9a1e5f19735e85e6dc6cdb14a7082f32d22483a0940179e91e1f4dc94b7035706166cacb35aa37433d38dabd1429c81116324f484723b7d1535a3dab600aa89c5983b894a6dc20a51cc3d014e23147014ad41e771327832a7bd90f982989cd7efbf114ef430a58bfb17625508b076e290ea3c5860de27a2f368eabe397e56f0fb69881e0c2bbe3ccf3d5a38bf66c27936e25aa7e14a4a6ad47d7cf39a31c3e9b5fb00669b5c7972b4af1e92058b1b5a5ca7a5d804d02dd2a4a553e29c54a5afc1be4511ba9001e2b858a83da89551dfab9c625368820a8e5e8ba2b9c581f8b3cec3611e132f43c1aea5cea8adefc42b4ba1297f700231cac1fa8d2898c37bc09181cd94847cce49f66fc8b3baa019632aa41f0a878ca08f60c8e808d992f8818b74e6ef0e69e0c84620ae1fdcc0c1e01fe4926937689e5aa788eeb52acc2a94d3f214ac6e51d09a0634a5f06114a764b87e1ff2f39f756d89a8fc6a4d19b087e3cca612184bf6b4a0dd7d0ab1c8b69b0454f4fb5ec8966d6c832c8979d7a4fe467c8f1f5f54d41cda3f51e0776d61b6e68791714ed6d5f3c06a4d7d9a65f56d653752a0762e5762a8e4d315a1c4d55a9dd8fb77bab995335400630c4b805179648502e3b650d51b6b7fbb7f5cd6521fe0dd68655b1e7f7cb4d2a9c5f1985f732884cfe377a0f2464be18ac8bc5b3bfb58d651a9b7ca7cb5caf6acec49f80629e6e4b158bec3920f1c31f6814063387611dcf4cb1aebc9f72324338ca8ef8a6645e10759d701a1d0bfb7d5a7031de226aef52b9b38f828942a73c92111d5fb22c9e14553f27c5a6e6add7fd91a32d3be5b0cbc56edec7bd009347a4b6c129d074a0293b26535b302c5942795bbb3a9f1b9bf1639e257a17cf4fbf76a40df9a5257856a0b1672889cee65ead0ec43cf296bc4e66e3cffa59f7cac420237540c75f1c7aae94e715fd5a21952d434e14868327acfe9157b75a8b86ea1e293e5f8eeec4d086cc9dc5839a0ff26ea5aab88132641e3d9d8f23969976befe8272220eb18a8b2f41cdea3f4cfadc2889e205014a172e5cc0fe5b9aee994974fc6f9a87379bdcbee1b2f4e8e0d0b86eadd4f07fadedd87f6852e737cb18f436687aaeb967a243532cdcd63e953753c22ec2b7b2240a8554f80bec034f33af147b8092d68f78bd5650013b998160ac89c8bf1c968acb54bf272772f218931a062ccef73498ab0dc7a7bdc235d7d2bb4cc61a3aa0a915bcc4c66d9a9bb5826e8790346f444dff936fd8ff43c56b296e70c90f2c07830e366e9ac290d959f5f88f111db0014357e8319b6aeebee3bdd798ace65c3fa541236ad122bf5b2e4ecdacf2231cc6a67a790a25f4cb9e570a962c38695b16611de7c57f8d52960372680470ebc6f9d6c1a5de258f00ca2c8d3213fe73b1266710f8eadea4f0eea0e0cc7903cf072a1c29f0cc2539b0620aaf989802f78333acc25ce222657a007f969356ac7586d0e36d87a286e804d57b8f9e2c14f4660469cb315d570b36963ca2977c16f99b7da999a2e5dc2773c7d25f269b52599033810fbbb61049741f3e3558df4ecec363eaccbeeda436091a81f179f54b9799d5a1b4181639a6350dc2e892625a35766afe72bf77db3e3333da6eba56254cd0ae468a6c012e8af1c57804ef198af52313a49e475f6cd3f19f0278906ffe8014d72d5964b53da04548caeb27bf93c268e989c8189ebc97288bb9b7e118569e1cfb611a5edb226153496221a9ff54ebc6ddb7e03c452cfed1bacbac7bd1b1ca4c2977ecc9b80ba9867f0525b06de04a7363d71e588c185cff4dd557c6fbb402c339e9d10b127896e52fa4d036156e5c9fc58fad67f2954d1329980c9348a278641e94939af130e8a33a6c8c033e956249006dd3a5a2d21b2e2703a6a5ec152ba5b2d938d9e605abfac0a7127abf8f98aa137d9364134c1d01ab8f54f8276e1b66092edd4d777d9cdb77e0714f9c836cd7710312b32f5c23c3cef210bf9e77366b16bb8ee53983c6047980c36f8c8967fca99994fafb44669faab363a7abbb947646876585d053cc89be691ffb4f43a2d4102955a9ba12f92a59049348b7793889a570e4a4dfe0005aa159e939bbb1251e8ebc833d7f4423eef37b5e0e13698bb9d98c42fc0c4496527e5d1b3a4549f77b2bd02d3348032d844f2bbdf301a719bd8120994cca0f42856450025912699c30dede8c4486d13a0dd2b99a81cdd89514d2a35cc1fbba03598e14d4830b510f8c5f01ade532d6142ccd63fe9a5c6749d083c1e3e08d657a84710c390bce8e2afd7a7196255a5cf3e2fed6c49b90eee93f2f1a294bbc8ee58f04c597ac53b689073ad69fc230800538eeb6084944b780fd00a178ce2d998f986976e8f5f2f19a6aea81bfb13308b86f31edf9a6a0a71201478fbf91b902d3f970ed4fa7227ecf0e74d6badab49ad73560c4fd3d322d64fa84a3408727334b0769db168de657352b4f5c6d99fe6a6da72e97b3587a1ba74912cd8dbedd7618aeb10de141801f80856e16f84dfcd8c7390087f529eab27d04d715df88ca0d0ef27801a4348a0aa0fb4ad9de2ae70b2bac2fda73a4674f64bfc592960d789df80fad583e99ab7780e7dfdaac4eb6f5cf92b68f8d974a7ef8610e6c6a87c0541a55bf9e471c61484eff0d51d5a9fb2823e4c760f5ad1afae0094bb030155e16e76c1e60cf71ce51e016f922a67fe64a466cebc9912cc9c5d4c98e92ad1d83d85eeabdbde947731c8cb165cc6c387bea62b70e87c5e281f55ed2ba04aee2aaab6aff59716faed1b179ee7e966aa0e9f07324afd96f32ea80ea0be7f5f1b2132c9cc155aeeea489df05a02e08b56fb0d564b547516be44881eedba8ca8c9ae7efacc367fe720b656923add49ed641c8bd67551d57ab58cb47c7ab714da11df7295bf766de190288acd1156180fc6707d2885bcb51e014f0803a2185f1e74592fcdfb2a80af7346cc9a6a2f1639423317dbfeab814a6da2a83c53cfe99c46f091dfb28adfee6c7716fe472bec3343b79942a024540d14bbaa5be9323c8cdace0c2896a0d6d6acbb503595bf14605c8a451d22db19a9be89916176683226bd09625b1eae75ab55b6a0806a7ccae41794635e1057f1449280de719d36071969da0a6e992335b0d468cb0d83d0571b94f10665f080398a633e37e28e5e9f493f4d5571a3834df7fecc3b52f2324d7cfd975ef7c62989c73ac302cad15fb9f78fe3a41aaa05a3549548f1f8f106f523863ba7ad0fc6ecbe1b8700ba154aeeb168048de00bb40e67ddf5b2a40853f4723ea2b515a0744d3f6a3f744254a4be9ec7fd1405e7f7d725e2d996f44e4333af30619944e1b214730a582ba17193085882a9cb2c7b10ff169529847088d344abd796aeb21061569fda7f4312657329d7be1068f0aba245b263e4a816d49c635ee9ee454268a5bbbf5c4e6d4f8bc4aab71a4496bd105d79e9ca3226a52b3349463f1c97de354d39b0977440e3f50202b03aa491f27b2f790bd24fdeb4636b6a55f00724d7274ab2b4572316c18cb5caa18dc55d819de39d663ab92c3a3ab546a667b3eb07e42b9020c2afb84c121db8b05b6a7d7b250ed63381e5b9fdce1b791565c7b5fe0d5782867532b48f6bb8696042a15a72bfd13d3ef47510593f7f7269ed25d7f36a19545872c401ac16d5603772606607b2845d0617b49525851d265e3a53cc647dd125f34c0e33a13f895623d47dcde709f91c8d88bb87051a3024f68d9941faf83d60f3dcaeb2f8545c7043bc771109b5d826f6b3f564bded864df7bef3693eeb7d1613523939abc24ce2da205ff816e507b5a42266209a32846c3bdaf232f2dc5737c22b8d028f6c9306d7caf63d50c595c96cab120147d3cc96199303850eb73ed697f5e5ef5ac7579381d20e4af3adcce79b43267e48f3bc2cd1008f64fe372f17b2e091c1c9793f2a35f1a2f7845c897ca66f640f4271e8f7e2861ab1d801b38986065414a8a1430fd2d13cfd7bf8939cdf6210427c15f32bbeeba63387b3052032423645fc320a7476b0a82dd320fcb9efffb993e8d4e2a74532e6757aa0013c2b6ba9895ab2adc9f6fd82841f3f8762639b4bb0759899edd04e9644b4adfa98a71bf664579aa972ed88fbf94020668fdf8952c4013d721609a389f6cd339c9d34ba28773553d14c176d214773cacfa39da8ca2c3abbf693ab551a36cf1994c3d94f62c22a9a2ef78d8c07adf9e1539c730889720f6129214cb86ffb31036ff2fef5c959bc05063d36f5e450551967a338825f9357f139849defa6ee89756f02c2e5fefcc0db99affa27415c4404abd92253542cbcb5221e19ce97c520a65fa761ca0bec5372efae4b95d5ec754c12acc0e7fe87316bcbf2cbc09e691707a9665f72a70fc069677165cc124bb41c94708f4ac240247288306f9b8daa75aadf7304d48b616455d0ae3846c1ed684dec128b9ce4bf2621bd355bc793ae379da8059b4fe5081dc10f1c856a173f163c6bd3b316065669b32e0514e3441eb3b9a3fb9c65c32b267ed54cec79b1ea393a632c101af5b24a678fa2bcab68b2b7f2593b6d76452b06340e5f147c888a8781a9646f882d38764186726b00efd0b2b72a41a683b72fc6d8a0f9cdba53ca1deda5e99dfd045e264638c3e8203f501d7a36b5d7de681099ca999f34793e0b295e491b44113f45f99fdfde6755b67d8bb133dd43235ab9aab4054566d1a887781d7f3cb3393bfd03e7e3d6254c60b6290f038c452c8ae3f2269af30f7dd6e6c0125ec7e41f31364d8c4952ae95d5a3f2c3972823d58938a9724172a0bc405b173605f50fc468ac15f8013961628a5ad422eec1e1a65e40968ea53561ff5c6af8728c07075940b545d65417ef6f15bf657f0c008e409c5d0fa5aeac9fb63173a81419f319a6d986d51af49b1df15bf5d2d7ea3e19685c48a348bbe4930c56d8016aa1bb8481075f43bd94aa4df21550a6c69adff7975606cab074ab85cb34dd6d0af5b57ad87f5a9a215f26eade0155aa7e43ec709085dbb06b2916ae64559489a6cef57389adc845aab2b3336683177c0de196204850de50f47822b401d4eb857f981bd713e8eb66b89bb256c03ceaceaad6daba18b5ff1102c1aa440593ea2ab491058b0b895f2becd14bfb44507aef722bee5d913d7e88992c771e185748c54958e60c35acb7e02afb2ce33f5dae65f5403a4921902693dadbbcdfead58ea8d78ac28b75875e1cdb87c3657db64c7de3cf1676f5e826f9e67e2f9d380776028dcf00a03743aa418b9db83b5be413244d45652b9723e025a529416dea73aada0b646031c9825c921d8564572ae3e1e782f30ac0b031f603d2c0c179ce4a14bcb09b05ca35565ce53f88eabbd2304493c952f000004047d06778fe9aa47989c8f7022e31174cc6cbd26d3421cba6265965e30cf711d1affda01f08232507de0cd2d75af91566c2d4183c5dbd1c863ae3a05242ae97ce536ba296a4eb2a5e182487e531e7d3e09ee2b30bf3bcd0351f44e0396f0474078dffbca9cc66a102de79a03ed681c65d11a31842caf79292fad47385f3066a62ecf7d57528384f28286aa773bfb94b419de9d7c78926790d5f9f24ddc1ccaa08cc0d7eca8be85bc44f1cb22e923fd367c5f0d08105f440eb6ab6883ea1c13137c82bf5b9737ec2efc3a2c8f2890a45c937f1e8d8dc0449130cfd808fe6d9557311dc09249244e52efacf9d211197329863726e80653a5175937dc87071c9e1c157d130672727142f3fa3953b5abaa45530e81f0cdc35b81a859d4ac5dbb302fd19f27f3fe39bb41a914839d69e49e153687455caa79a0281c3957e84f7a22c744bed4441c09192b9423081525f3b5173288fef38d6e750ea6c36151ef9a5b2db83936512ff6d939508d163f9c7fe905b0bfd4dab4961e3e6cb066df2ff2f8c97796772f7cfb268f152b8ac86370c62695851a10cc1137f1f6e3c5cc2e8145e266ff1ec287aae4e1d9397bb34276dd70b8713a11eef56582711b194c28cacec0f8ef923f307dd24474ced68c2f3af7e552cc7022e6a150aeb7ca68f18322cf0aa8511356f2a22ddcd0cbad79ee76eec08fcefedec86ed0044ffee0d56e7e4c2842dbf778177c397e31694f99ba9fed9667460fec8e046f7b4c56463e1978f7b2a379409f7f44af01c44a0b07b123d5eddc2022e132442939b11b822644a258f66a0f4c462e7cc49f24f250170d66c6a43c746770d4729e0c024fee5635124caf90760f949e8b8808ef09c0be3f803e56107f634c8bf297e25844e5157082358b136801e7dc921be587d35125aba2a5e9ba5d4422f8bc21b6be2ccfff161c425134804d18107ee7a1ea684b20edb1729a53f0f2416a3102e26aa6d7880ef41a16c4ea11b5cdf8e19a616fcd0fcfbf595be7db71c10dfb10442bda46a5b5899c66d31b1e4f968e4737963fb29ed01f72857157c6ac18b975b3a0f370109fd0a8ee60e3167b20a0b45f1d7ffc7a00300ff53f4ceb99a50edc01cd7aef600b828cd391a18c15695f0c8ccaf13f4cb1062501ea2e86a92e9be8a39dd836b8e640dd684142f5d8b26f676350fe3931b174629e57e51f865afd5f945dc9a57b2aae7ea26a3d85a11903c1df3ada5be52ca10b49cc9a169411be1359fed029ee3aa848c9ae9aa6fde379bb20c3860cb81d520ce211dadeb58027749890b4ee3e11cf34d53058ca3206554bd695224669b1c0ef93084643cdfebd2b661c6df5560ef776faac88b7e545759c267603a4a5130e9dcdd8ce93b0e80c0725d1c1b0ef704be582cacfb5bc5566cf2cadca87ba8dedf6a14df565318219a1f7391ec80bdd05087aa322d16e4426c3bed65fae36aa43566c4c6f4f1fd576de6fc296bfd90b422cea8672befe4682553bc4ac83f436f2086ce4c717d44a8802c567b01134ffe7ad447890e31e7df4a1908ec09a4244af72d60f37ee8d6cb7cb958a867686af4360c1caa8b37e54e4ab55bd565c5e5b6c8f68f353335c4724fd804f5eae160035ba68e2aad9da94d1473b63a5634201c1371329d5e61f3e009dbbaae5f4e2d649bd198ab6235d9e516ff3855cf1a22e5a5481744610e9fe780471539c603356c67a3ff1af1e97d85c78a748ab951af5a74abbb1e63a7f2331bb86065db6c689dee229bfe2cd29aa2909144cc32814fce5d7b667c4b0970c18890f4b42e996b2e07601b1cb963455739e9c29618ddb94a61e714019ee485f8e29b0e3056030cb86173c9ad2c5e8a73fed2446889d4afc4df13a825a9c1c075a9822b1c822ae7715db6d7881cef9bd3c8cbdfeda1fe8683588218a4884e1aa0b93d4df46d4fa7518c6ebd6a6000600d0870ab610568cb274cba31ea827eafef75733d39c5bacdea199a7049e8d4116b05b768aa10e6f4abc833862e46a7418390502465f0aa3be7cb74584d44cfa86e8b204988b8043543d4b4915d6faa438b94ddf139a91d0076d1003457517fdd7506f5c875377d7f4cb3b3bec98daa763a73824ba2c7f7fe71792f6a4f0e82e43872dedeecd99cdbe60179de8e1e8e964bd9fe14cd8e6e9c6042cbbac8e919feba8d1b81212499e0ed95200bc446365cb3e525a8418e110d196ccfe5e475ee7fcad7dc9986b2326270ae4b3fb34abea4f3f13016cb54e0a2e39a9b47166b34f4ec4292faef03337f1de9bcc28434bc8475c6c5827fe1e8d90b1cc431cd11cbd87201daefd5392c0dea2dc0aee0bef8ab0d58225de5c016263ed9cd82402b9f215c9d1b03d5eeeb2eaad1d055075ddb93b5a0ecfabf9cd2bc0684dab9ca727157e85d2bdac2ad502bf8bc6ac7b15816b7027ed8321df846826029daff0651bc4bd644251322233b402f2502ddb9dc8b986d458cfa86b5b9c2863ba8503fd83cce90c8ebcadcb7d2b9d1c40efee1d0de4ce5578f0ca048e4d515cde7db70d20cb23107ddda99c822161cf4cd63fef07b662f8f6283fbf5b3970f3d6e15439baa635a83e8e211bfd741f98b2b3fc9472624986e683dac3f3235130bba2c24b37a5ccdf38d69c96eecb152a573ba48a158fa8f945106264d38b02310cbcdafc409be9c9c9eacb68bb3740cfe43d74b6006fc92ceec18b95b22162c43bde2209ca57ac648bea867de82ae93076c6fb5a3d424751f718c477d143f6987042cacee6b2f7334fdb9578973d758f7203a5020b4c27c2976767a9f2f3d8bd1b824e4f5227eec732d4801757b1cd3e7060122d7f15054e4a116a84985444db34ddbe4ebb165db9f8fde2b32c168248c9104d1d01308d11149b2287e2f567c68bef8084913854c00b355203f03070db127e1b6eef04f76cc6e1337a74fda939e39f56bdd289f119d51a2472fb7ef896955bd8e4dc4194c2113d2b48989596e349a0e5d179808c7265dd16ed25b5d99b20188fed76a0e5e70efd72d1c60bfbfd0da6398f613eef51a8542d7b3938332f5498936d913abc485b4c5297c804d3c84e7ac367655f39c872e8698f13ecfd3076e2d82638f6ad4f1b41331dd60d9734acafd37b973f6a9e84d2655ba7419bc427738f6c20710a2417fa992886f6318e45691433e2a27e91e440c0235cc66d1ba25bee30b1d0dca672d6b415b063dde3538b8b2927541d573cfed7e06d228476508296e5de1ccc3c32c0dace106efa605bfa135a86139dd9af6c3568fd7a20c1e609c7822ea6e0830f1e8756500833eb4f80431d2d813fd3e899accf1c6ac227186c500b906e37808b3b23174cf8febb52de577797153771c96d6cd71ff1c74dd2617908177257b6dd025ece21148b4be88afb03771230f2a48c2ecf506d57026a6641814a4aea3ac1ad4cbf11e8db0705d560093dde87979ab49165e18eb912fe62430e77b2aec878e03e14b450fc2ac62003f7b405eb612f617164ccf099587624358ac484d0686abee20bcf175386aada4ab0a8f85fc63d3183b6e1cd94b791abdae7c7a38efc8215efb75aa21f6d844165b211b1dac572949fe6e0465e1348e76714e783be2676eb16e328296d2a3254036583f03b1f3f23764fc9d63b1dceb9e4bc8fcbefff08eb1249d5d956bf0d1247859b2ef10451b9c01d27fdc6601d586f11bcf23e12387c6a4d7f08095d4ce416a4e1f75e2a6f57cdd9a2edf10f715f379a3293f838ff1edb7c76ee610bfb8cd28a51bdfee73de335159d5c7e2b4f42d4f3221337de1e16a195cf56f6e22fde565cd4476c2e2305eba88c4aeee59752149b583564cbb0d540cf60907ccbdf420d7b7fbd5ecb90d3fc845f78a1c3517bccb2709a97c4d380e4e3d330590191866a3f67b1f14d231906e331a8a2bf43ba5713c1675a596bdcd1a29dd9fdc44964a157696f491dfc38058c7c9c28c03b32de141f5c75c3f34ed4084604cdbd46c9ead2181ad86436583099c0508bea85ee7b95b1642d7854145d2e8c30ccdeceffcae4e7c1e2ad9a0bbae183200429cacb0212d8d40bb6fd580747899019815d7de9ca3822243fd98d5ea80a7baa7daa3db9e10c13e0a0f07eeccbe42ff40ef0bcfec590c63cc569953ffdce88635e08ceb02982fd2b48f8ce9b47074f1c9ab78f80a3f632da998e2ddabf673516fc3c3907eccd3fee3fa7f4f47e40b0564fc27d77f8be803bee2ce8886c6b3328373ee9cfbf138e308fe9a8d08c0ba560b774d6427d05fd147031a95b026ee9f0c77e5b6791c319465904cc76499fad6f9f65c3e5bddef89c95dbacca89f55571ba29fc6cce6e1c6f1d963890877732fb8e68c3e737c055e2b4d33396254e07a563b252a2d71f8325c542bbefd67f4461ae4d888e1bf9bfc2eaf5c9b12b21cbb65d1fd539daad0c6a8574d76940051771bc4aaa57b4f62c04a56b8227719a40c04faa231eb00ca967ce5de5ef3bc57e7a4c1b7b3f6fa90ed84a4658e660ae8fb70aa7bf322dbd823ba284b827376a7f96b0d56fd3afafbd14ecd21bd206518095281f6c8117e67bceb4227d15d6d30adb21421ad5128c07b1a0dc5970c0bcd8773928a8554f983841680bb5764818555ff38642b3d5a9ee725aa689401ec852493fb72e3121f697263a71349acd4b93e648d8b5529ce2bb33339c85022212fddc1ce4ea69bb71091e9cfe2c812d6dcf407ec8ae832cb98c60b2ac646e451ad8f5fc5f39364d8c8bf79d4509066643e7b94d859fd961416cd7b11147b57d6672c9c1e3506b10b1d00a80c7a329acc043342000f01333b9e83763ecea8955f0a577a047323856c8a55fd1bc4839abb09b6ddefe0598fb9f21ea153218ee20fc851759ee5283e34f776bd25b670982f092de76656594f914c0976ea1ff1493277bdad265f2bc0882c5344be7356564f273128fcf84aea0a77cd884887ab94c17eca35a8c1a1ce0c17635b1e4a0096b698a9879eb78fccfaee89ce93d742c695323d2418fa47ede7fbd92361558e1dfadd6a907bd6f86d07798e542a7599e2384d7541105a81c79a9c4f11a8f6504c57b2fa29d939e140b51960e7d6f9988f1413083186fd3271657bdbe5fbad24fa8b8e825df1eb3dccb0b7f528c276157be49563fee6e1ea6a40feaca0c9af91163db47c5878b766bbd4fcdeb8dcf8985b0a466d776227ee3133796677c9f819db19a9b71d6900e44be8505e06b60904717a4c26567ab91e44eea7975559533461fe9cb5abe3ccf102876cdaedc4ef136618a5c1db7c671bb25454564241f1ff068819422e013eda782325d1642f75647a9e234bcfb70556d1c8a9cc627b3ab32913f2d318edbe446874ee375600ec82931022dad6531fbe81e7afe38ff3d3566774d4dd8d66b02901d088bf1f0627b80b2744f89d76c8886d39cf513362c728c0f7846ba4f955614c061ec9978ff0aa80949837a7c43fc12da83839fadc0b06a7bd252bfa55f4a55f6baadd2db807d2a5d0cd8e22472896f6bf225b4b2e37baa3d4d7ae27037fd154245455b16f7f60996dc45dca37055b005fbf4b8f1817e8468252e5b656eedb3f771cdac87ac8864f290280d36ada384390adb961f0ac49124dbc1a9c652411fa0e8047aa52c801ee864970be20cfdc01c758da830d6b863c75d180ceb19992e3288db845248fa397e1489a203367dbc760803192851530407709be3bc85b6b80c9c9e61e1989ff3ce503f465104143f3194c6a292c98e3b8f8ebbeef6fce5220b2307dfa45b682abcd03176c6a00f4896e29eb46504754f3c058c4970701cc7fb472eec5b11a9c3801afaafccb0606d54936a03bdf0be293a864280369b0b652c33bf904b9e12e2471d966a0bc72675d42c35256392449501f2a7675a473d2eaf9e8ab938fa5fc79e5f45d5bf8080085988e8d8b03a1e32e983c9226a886dab5164ee1f3dff60e2cb7e4b7f3c871c892af20e410797c6ca8b6dd2716eb5801f6eb3b35f687df2d9b150b9e1455c15a7b3287c164af3022ef5c15b708c6074c733f1a7dc1772e790898599afc6bfc17503eb9ac99efcd6d6e9df70505cae2184df7053625fcf5cd8fa2fda3b2eb2db391f1b3640b929b20bc5e5d38043a9d161ed9c2303cddf2daf50c091c2232a93833525bee990b2fe8bd17dff001faab25a6dc49b69eafabc2886b6fdea3de271a2204400bae64e36f07191b40555c1f9e13348eda5f3abb37c5fb9e6bce5e7caa10930a5d68b2568f4a535ab387a7d84948d51014564cd6fa471c8e0a88215db749326935a42980af686d939a01093ca327ecb031a1c2f7db2ca480d258d82b4c202ef0057b24d6ab6832219939b2a201f9871be1805a50219f1a4d7b0c85176e6a3c9627c38e47633e92c62ef9310ad9477fdce603c171ab7bbea414a888afc610395a6f31d27c275bd9299046ac9e9ead1d2d3f1dc6a9ae7315ad3cd9668e7546d0ae7ae66fed9b7a335164883a77a08d293a08a47b689458294912e2b091383f4d61d112bdff629bc42b080012f4ab6e9392e49203b3539c33b21e30a7d8cafcb3f05da8a8d5fb04abe329a26169dc2fe86eaed7eee5c661bd2212c8a8aa9797b0af10dc71f6c249ed470de3cad722867066a74c5e2fe879a3b9cb5b1f88991e377a02bc3b57b4662af305ba460cbc68c81b517f5850ed2c9b5ac600126c8fa8d581e7abbb758702fd6ea8569195e2f82983b2aecb1aeb544fe9613f89c691e3c4aeb5c1b1234a46a86c38a6b72e9b2d8e3c14576d4178bb799a0ba9195f47ca6beb4b25aba12eec9d90f9d0fa8ba04c7efb1688eda7c43acad2e32100bcaa0739adfaf032f53faae4916a113ba177b9f647625adc53a5dca573f90e74da9dc50817953eb6cc19de3c4bd87a151b11ea786dbbeba372c45da3af8c7dfe773a57c2285183d972cbc9f6231fc309abde52c7c478376f6aee4bf3c8bf070c4d250e7ace432bb93098479e6e1c10584727e820f12d993ed9be743289ed4fd96d19ae1510009a30514b5f1fdb8a2181540bc10ac556cc5de621658a224a9ee6abece27559bc58cf7e430b18d5925bc8e136a522d7fc6e8b56efb8f82013cf5d338b5a011c5e54325ed02c004867b04d3bd33bcc74d34f2c2e5041aeb502fff7acc346cca8ba7ee2939c5c7ec8d837b2f464ce138193c16fc43b2734b4f729c450bbbd8fd8bcd7f5a6576878c5f5538a9adca45e7eb</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="http://www.yptup.top/posts/139b1e40.html"/>
    <id>http://www.yptup.top/posts/139b1e40.html</id>
    <published>2019-12-18T10:02:46.000Z</published>
    <updated>2020-02-25T04:35:24.767Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="原型对象prototype"><a href="#原型对象prototype" class="headerlink" title="原型对象prototype"></a>原型对象prototype</h2><ul><li>每一个函数对象都有一个prototype属性，但是普通对象是没有的</li><li>普通对象都是通过函数创建的<a id="more"></a><blockquote><p>在 ECMAScript 核心所定义的全部属性中，最耐人寻味的就要数 prototype 属性了。对于 ECMAScript 中的引用类型而言，prototype 是保存着它们所有实例方法的真正所在。换句话所说，诸如 toString()和 valuseOf()等方法实际上都保存在 prototype 名下，只不过是通过各自对象的实例访问罢了。—-《JavaScript 高级程序设计》</p></blockquote></li></ul><p>JS所有对象分为函数对象和普通对象。凡是通过new Function()创建得来的对象都是函数对象。函数对象拥有prototype属性和proto属性。</p><p><strong>prototype</strong></p><blockquote><p>JS设计之初为了实现简单继承，引入了prototype属性，也叫原型对象（显式原型）。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Animal.prototype) <span class="comment">//Object  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype) <span class="comment">// Object</span></span><br></pre></td></tr></table></figure></div><p>可以看出，从本质上讲，prototype是一个普通对象，是函数对象的构造函数创建的一个实例。相当于在Animal创建的时候，自动创建了一个它的实例，并且把这个实例赋值给了prototype。</p><p>但是存在一个特例Function， Function.prototype是原型对象，本质却是函数对象。作为一个函数对象，又没有prototype属性</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype) <span class="comment">// 特殊 Function  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype) <span class="comment">//undefined 函数对象却没有prototype属性</span></span><br></pre></td></tr></table></figure></div><p><strong>proto属性</strong><br>所有的对象obj(null和undefined除外)都具有proto属性（隐式原型），proto属性在本质上为一个指针，指向创造obj对象的函数对象的prototype属性。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age= age;</span><br><span class="line">        &#125;</span><br><span class="line">        Animal.prototype = &#123;</span><br><span class="line">            alertName()&#123;</span><br><span class="line">                alert(<span class="keyword">this</span>.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建实例</span></span><br><span class="line">        <span class="keyword">var</span> dog = <span class="keyword">new</span> Animal(<span class="string">"大黄"</span>);</span><br><span class="line">        dog .print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             alert(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">        dog.print();  <span class="comment">//大黄</span></span><br><span class="line">        dog.alertName();  <span class="comment">//大黄</span></span><br></pre></td></tr></table></figure></div><p>print()方法是dog实例本身具有的方法，所以dog.print()输出“大黄”；alertName()不属于dog实例的方法，属于构造函数的方法，dog.alertName()也会输出“大黄”，是因为dog实例继承了构造函数的方法。</p><p>实例dog的隐式原型指向它构造函数的显式原型，指向的意思是恒等于，即</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dog.__proto__ === Animal.prototype<span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="构造器constructor"><a href="#构造器constructor" class="headerlink" title="构造器constructor"></a>构造器constructor</h2><p>构造器constructor就是用来构造函数对象的，constructor 属性返回对创建此对象的函数对象的引用。通俗了讲就是指向当前对象的爸爸</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.constructor===<span class="built_in">Function</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a.prototype.constructor===a); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div><p>函数a是由Function创造出来,那么它的constructor指向的Function,a.prototype是由new a()方式创造出来,那么a.prototype.constructor理应指向a。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链是JS中实现继承的主要方法。其基本思想就是让一个引用类型继承另一个引用类型的属性和方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.animalType = <span class="string">"animal"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Animal.prototype.getAnimalType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.animalType ;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.Dogtype = <span class="string">"dog"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();  </span><br><span class="line"></span><br><span class="line">Dog.prototype.getDogType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Dogtype ;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dahuang = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">alert(dahuang.getAnimalType ());<span class="comment">// animal</span></span><br></pre></td></tr></table></figure></div><p>dahuang.getAnimalType ()打印结果为animal，dahuang自身没有getAnimalType ()方法，那么就会去它的proto(即它的构造函数的prototype)中寻找，发现Dog中也没有，于是顺着proto再往上找，在<code>Animal.prototype.getAnimalType</code>找到，返回结果 。</p><p><code>如果Animal中还是没有，就接着往上找，一直到Object.prototype原型对象终止</code></p><ul><li>总结得出<strong>原型链</strong>就是：<br>如果在对象上没有找到需要的属性或者方法引用，引擎就会在[[prototype]]关联的对象上进行查找。同理，如果在后者中也没有找到需要的引用就会继续查找它[[prototype]，以此类推。一直到<code>Object.prototype</code>原型对象终止，这就是原型链。<code>Object.prototype</code>是原型链的顶端。</li></ul><p><code>如果找到Object.prototype上还找不到，原路返回，告诉实例此方法或属性没有找到或者没有定义。如果说在中间的任意一个环节找到了，就停止向上查找直接返回结果</code></p><h2 id="原型对象和原型链的作用"><a href="#原型对象和原型链的作用" class="headerlink" title="原型对象和原型链的作用"></a>原型对象和原型链的作用</h2><p>如果构造函数中有很多属性和方法，那么构造函数所有的实例化对象都是公用这些属性和方法的，当有多个实例想用共用这些东西的时候，每个实例都拷贝一份，就造成极大的资源浪费，那是不是可以考虑存把这些需要共用的属性和方法放到一个共同的东西上。这个共同的东西就是原型对象（prototype）。</p><p><code>当然原型链实现继承也会存在一些问题，最主要的问题来自包含引用类型的原型。其次就是在创建子类型的实例时，不能向超类型的构造函数中传递参数。</code></p><h2 id="构造函数、实例对象、原型对象三者之间的关系"><a href="#构造函数、实例对象、原型对象三者之间的关系" class="headerlink" title="构造函数、实例对象、原型对象三者之间的关系"></a>构造函数、实例对象、原型对象三者之间的关系</h2><p><img src="/posts/139b1e40/yuanxing.webp" alt="构造函数、实例对象、原型三者的关系"></p><p>任何函数都具有一个 prototype 属性，该属性是一个对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></div><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure></div><p><code>__proto__</code> 是非标准属性。</p><p>实例对象可以直接访问原型对象成员。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure></div><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;原型对象prototype&quot;&gt;&lt;a href=&quot;#原型对象prototype&quot; class=&quot;headerlink&quot; title=&quot;原型对象prototype&quot;&gt;&lt;/a&gt;原型对象prototype&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;每一个函数对象都有一个prototype属性，但是普通对象是没有的&lt;/li&gt;&lt;li&gt;普通对象都是通过函数创建的&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的Event Loop</title>
    <link href="http://www.yptup.top/posts/889ebc65.html"/>
    <id>http://www.yptup.top/posts/889ebc65.html</id>
    <published>2019-11-29T14:14:28.000Z</published>
    <updated>2020-02-29T14:47:45.385Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="Event-Loop是什么"><a href="#Event-Loop是什么" class="headerlink" title="Event Loop是什么"></a>Event Loop是什么</h2><p><strong>event loop是一个执行模型，在不同的地方有不同的实现。浏览器和NodeJS基于不同的技术实现了各自的Event Loop。</strong></p><ul><li><p>浏览器的Event Loop是在html5的规范中明确定义。</p></li><li><p>NodeJS的Event Loop是基于libuv实现的。可以参考Node的官方文档以及libuv的官方文档。</p></li><li><p>libuv已经对Event Loop做出了实现，而HTML5规范中只是定义了浏览器中Event Loop的模型，具体的实现留给了浏览器厂商。</p></li></ul><h2 id="宏队列和微队列"><a href="#宏队列和微队列" class="headerlink" title="宏队列和微队列"></a>宏队列和微队列</h2><p>宏队列，<code>macrotask</code>，也叫<code>tasks</code>。 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate (Node独有)</li><li>requestAnimationFrame (浏览器独有)</li><li>I/O</li><li>UI rendering (浏览器独有)</li></ul><p>（注：这里只针对浏览器和NodeJS）</p><h2 id="浏览器的Event-Loop"><a href="#浏览器的Event-Loop" class="headerlink" title="浏览器的Event Loop"></a>浏览器的Event Loop</h2><p>我们先来看一张图，再看完这篇文章后，请返回来再仔细看一下这张图，相信你会有更深的理解。</p><p><img src="http://blog.yptup.top/imageEvent-Loop.png" alt="Event-Loop.png"></p><p>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p><ol><li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li><li>全局Script代码执行完毕后，调用栈Stack会清空；</li><li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li><li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。<strong>注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行；</strong></li><li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li><li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li><li>执行完毕后，调用栈Stack为空；</li><li>重复第3-7个步骤；</li><li>重复第3-7个步骤；</li><li>……</li></ol><p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong></p><p>这里归纳3个重点：</p><ol><li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li><li>微任务队列中所有的任务都会被依次取出来执行，知道microtask queue为空；</li><li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li></ol><p>好了，概念性的东西就这么多，来看几个示例代码，测试一下你是否掌握了:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>);</span><br></pre></td></tr></table></figure></div><p>这里结果会是什么呢？运用上面了解到的知识，先自己做一下试试看。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确答案</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></div><p>我们来分析一下整个流程：</p><blockquote><p><strong>执行全局Script代码</strong></p></blockquote><p><strong>Step 1</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [console]<br>Macrotask Queue: []<br>Microtask Queue: []</p><blockquote><p>打印结果：<br>1</p></blockquote><p><strong>Step 2</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback1，setTimeout属于macrotask，所以放到macrotask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [setTimeout]</p><p>Macrotask Queue: [callback1]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1</p></blockquote><p><strong>Step 3</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 注意，这里是同步执行的</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback2，promise属于microtask，所以放到microtask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [promise]</p><p>Macrotask Queue: [callback1]</p><p>Microtask Queue: [callback2]</p><blockquote><p>打印结果：<br>1<br>4</p></blockquote><p><strong>Step 5</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback3，setTimeout属于macrotask，所以放到macrotask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [setTimeout]</p><p>Macrotask Queue: [callback1, callback3]</p><p>Microtask Queue: [callback2]</p><blockquote><p>打印结果：<br>1<br>4</p></blockquote><p><strong>Step 6</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [console]</p><p>Macrotask Queue: [callback1, callback3]</p><p>Microtask Queue: [callback2]</p><blockquote><p>打印结果：<br>1<br>4<br>7</p></blockquote><ul><li>好啦，全局Script代码执行完了，进入下一个步骤，从microtask queue中依次取出任务执行，直到microtask queue队列为空。</li></ul><p><strong>Step 7</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(data) <span class="comment">// 这里data是Promise的决议值5</span></span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback2]</p><p>Macrotask Queue: [callback1, callback3]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5</p></blockquote><ul><li>这里microtask queue中只有一个任务，执行完后开始从宏任务队列macrotask queue中取位于队首的任务执行</li></ul><p><strong>Step 8</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback1]</p><p>Macrotask Queue: [callback3]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2</p></blockquote><p>但是，执行callback1的时候又遇到了另一个Promise，Promise异步执行完后在microtask queue中又注册了一个callback4回调函数</p><p><strong>Step 9</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这个回调函数叫做callback4，promise属于microtask，所以放到microtask queue中</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [promise]</p><p>Macrotask v: [callback3]</p><p>Microtask Queue: [callback4]</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2</p></blockquote><ul><li>取出一个宏任务macrotask执行完毕，然后再去微任务队列microtask queue中依次取出执行</li></ul><p><strong>Step 10</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback4]</p><p>Macrotask Queue: [callback3]</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2<br>3</p></blockquote><ul><li>微任务队列全部执行完，再去宏任务队列中取第一个任务执行</li></ul><p><strong>Step 11</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div><p>Stack Queue: [callback3]</p><p>Macrotask Queue: []</p><p>Microtask Queue: []</p><blockquote><p>打印结果：<br>1<br>4<br>7<br>5<br>2<br>3<br>6</p></blockquote><ul><li>以上，全部执行完后，Stack Queue为空，Macrotask Queue为空，Micro Queue为空</li></ul><p>Stack Queue: []</p><p>Macrotask Queue: []</p><p>Microtask Queue: []</p><blockquote><p>最终打印结果：<br>1<br>4<br>7<br>5<br>2<br>3<br>6</p></blockquote><p><strong>在执行微队列microtask queue中任务的时候，如果又产生了microtask，那么会继续添加到队列的末尾，也会在这个周期执行，直到microtask queue为空停止。</strong></p><p>注：当然如果你在microtask中不断的产生microtask，那么其他宏任务macrotask就无法执行了，但是这个操作也不是无限的</p><p>未完待续…</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;Event-Loop是什么&quot;&gt;&lt;a href=&quot;#Event-Loop是什么&quot; class=&quot;headerlink&quot; title=&quot;E
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS数组常用技巧</title>
    <link href="http://www.yptup.top/posts/133a37.html"/>
    <id>http://www.yptup.top/posts/133a37.html</id>
    <published>2019-11-23T13:23:55.000Z</published>
    <updated>2020-03-12T13:13:55.210Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p><canter>你必须知道的 JS 数组技巧</canter></p><p>在 Javascript 中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名 Javascript 工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！</p><a id="more"></a><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>怎么对 JS 的数组去重。在 ES6 的时代，有个非常快速且简单的方法，使用<code>new Set()</code>以及<code>Array.from()</code>或者<code>展开运算符(...)</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'watermelon'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'grape'</span>, <span class="string">'apple'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> uniqueFruits = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(fruits));</span><br><span class="line"><span class="built_in">console</span>.log(uniqueFruits); <span class="comment">// returns ['banana', 'apple', 'orange', 'watermelon', 'grape']</span></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> uniqueFruits2 = […<span class="keyword">new</span> <span class="built_in">Set</span>(fruits)];</span><br><span class="line"><span class="built_in">console</span>.log(uniqueFruits2); <span class="comment">// returns ['banana', 'apple', 'orange', 'watermelon', 'grape']</span></span><br></pre></td></tr></table></figure></div><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>日常开发中经常需要替换或者删除一些指定的数据，遇到这种场景时一定要联想到<code>Array.protoType.splice</code>这个方法。传参时稍微复杂点，第一个参数是开始的索引，第二个参数是需要删除的数量，剩下的就是需要添加的值（可以是一个或者多个）。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [</span><br><span class="line">  <span class="string">'banana'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'watermelon'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'grape'</span>,</span><br><span class="line">  <span class="string">'apple'</span></span><br><span class="line">]</span><br><span class="line">fruits.splice(<span class="number">0</span>, <span class="number">2</span>, <span class="string">'potato'</span>, <span class="string">'tomato'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fruits) <span class="comment">// returns ['potato', 'tomato', 'orange', 'watermelon', 'apple', 'orange', 'grape', 'apple']</span></span><br></pre></td></tr></table></figure></div><h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><p>有时我们需要清空一个数组，比如用户点击了清空购物车。可以一条一条地删除，但是很少有这么可爱的程序员，哈哈。其实一行代码就能搞定，那就是直接将之 length 设置成 0</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [</span><br><span class="line">  <span class="string">'banana'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'watermelon'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'grape'</span>,</span><br><span class="line">  <span class="string">'apple'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">fruits.length = <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(fruits) <span class="comment">// returns []</span></span><br></pre></td></tr></table></figure></div><h2 id="数组转换成对象"><a href="#数组转换成对象" class="headerlink" title="数组转换成对象"></a>数组转换成对象</h2><p>有时候需要将数组转换成对象的形式，使用<code>.map()</code>一类的迭代方法能达到目的，这里还有个更快的方法，前提是你正好希望对象的 key 就是数组的索引</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'watermelon'</span>];</span><br><span class="line"><span class="keyword">var</span> fruitsObj = &#123; …fruits &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fruitsObj); <span class="comment">// returns &#123;0: 'banana', 1: 'apple', 2: 'orange', 3: 'watermelon', 4: 'apple', 5: 'orange', 6: 'grape', 7: 'apple'&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="填充数组"><a href="#填充数组" class="headerlink" title="填充数组"></a>填充数组</h2><p>创建数组的时候，你有没有遇到过需要填充上默认值的场景，你肯定首先想到的就是循环这个数组。ES6 提供了更便捷的<code>fill</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="string">'1'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(newArray) <span class="comment">// returns ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']</span></span><br></pre></td></tr></table></figure></div><h2 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h2><p>你知道如何合并数组吗，答案就是<code>concat()</code>。哈哈，但是今天的主角是 ES6 的展开运算符<code>(...)</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>];</span><br><span class="line"><span class="keyword">var</span> meat = [<span class="string">'poultry'</span>, <span class="string">'beef'</span>, <span class="string">'fish'</span>];</span><br><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'potato'</span>, <span class="string">'tomato'</span>, <span class="string">'cucumber'</span>];</span><br><span class="line"><span class="keyword">var</span> food = […fruits, …meat, …vegetables];</span><br><span class="line"><span class="built_in">console</span>.log(food); <span class="comment">// ['apple', 'banana', 'orange', 'poultry', 'beef', 'fish', 'potato', 'tomato', 'cucumber']</span></span><br></pre></td></tr></table></figure></div><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p>方法很多，这里直接上最简洁的方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numOne = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> numTwo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> duplicatedValues = […<span class="keyword">new</span> <span class="built_in">Set</span>(numOne)].filter(<span class="function"><span class="params">item</span> =&gt;</span> numTwo.includes(item));</span><br><span class="line"><span class="built_in">console</span>.log(duplicatedValues); <span class="comment">// returns [2, 4, 6]</span></span><br></pre></td></tr></table></figure></div><h2 id="去除假值"><a href="#去除假值" class="headerlink" title="去除假值"></a>去除假值</h2><p>首先，我们熟悉下假值<code>(falsy values)</code>是什么？在 JS 中，假值有：<code>false、0、&#39;&#39;、null、NaN、undefined</code>。现在我们找到这些假值并将它们移除，这里使用的是<code>filter</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixedArr = [<span class="number">0</span>, <span class="string">'blue'</span>, <span class="string">''</span>, <span class="literal">NaN</span>, <span class="number">9</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="string">'white'</span>, <span class="literal">false</span>]</span><br><span class="line"><span class="keyword">var</span> trueArr = mixedArr.filter(<span class="built_in">Boolean</span>)</span><br><span class="line"><span class="built_in">console</span>.log(trueArr) <span class="comment">// returns ['blue', 9, true, 'white']</span></span><br></pre></td></tr></table></figure></div><h2 id="随机值"><a href="#随机值" class="headerlink" title="随机值"></a>随机值</h2><p>从数组中获取随机的一个值，核心知识是随机生成一个值 x,x &gt;= 0 并且 x &lt; 数组的 length</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [</span><br><span class="line">  <span class="string">'blue'</span>,</span><br><span class="line">  <span class="string">'white'</span>,</span><br><span class="line">  <span class="string">'green'</span>,</span><br><span class="line">  <span class="string">'navy'</span>,</span><br><span class="line">  <span class="string">'pink'</span>,</span><br><span class="line">  <span class="string">'purple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'yellow'</span>,</span><br><span class="line">  <span class="string">'black'</span>,</span><br><span class="line">  <span class="string">'brown'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> randomColor = colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length)]</span><br></pre></td></tr></table></figure></div><h2 id="倒序"><a href="#倒序" class="headerlink" title="倒序"></a>倒序</h2><p>怎么对数组进行倒序？只需要一行代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [</span><br><span class="line">  <span class="string">'blue'</span>,</span><br><span class="line">  <span class="string">'white'</span>,</span><br><span class="line">  <span class="string">'green'</span>,</span><br><span class="line">  <span class="string">'navy'</span>,</span><br><span class="line">  <span class="string">'pink'</span>,</span><br><span class="line">  <span class="string">'purple'</span>,</span><br><span class="line">  <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'yellow'</span>,</span><br><span class="line">  <span class="string">'black'</span>,</span><br><span class="line">  <span class="string">'brown'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> reversedColors = colors.reverse()</span><br><span class="line"><span class="comment">// 或者 colors.slice().reverse();</span></span><br><span class="line"><span class="comment">// 两者有啥区别？</span></span><br><span class="line"><span class="built_in">console</span>.log(reversedColors) <span class="comment">// returns ['brown', 'black', 'yellow', 'orange', 'purple', 'pink', 'navy', 'green', 'white', 'blue']</span></span><br></pre></td></tr></table></figure></div><h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>很多时候我们查找元素是否存在于某个数组中，经常使用<code>indexOf</code>方法，常常忽略<code>lastIndexOf</code>方法，后者会被使用的一个场景就是，某个数组中有重复的数据。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> lastIndex = nums.lastIndexOf(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(lastIndex) <span class="comment">// returns 9</span></span><br></pre></td></tr></table></figure></div><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><p>答案也是很多，条条大道通罗马，这里使用的是<code>reduce</code>，<code>reduce</code>方法是很值得学习的知识点，用处很多。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> sum = nums.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// returns 14</span></span><br></pre></td></tr></table></figure></div><p>本文主要列举了一些简洁的方法，实现方法很多，不在此一一列举<br>未完待续…</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;canter&gt;你必须知道的 JS 数组技巧&lt;/canter&gt;&lt;/p&gt;&lt;p&gt;在 Javascript 中，数组是一个重要且常见的知识点，我们经常将数据存储在数组中。作为一名 Javascript 工程师，数组必须要运用自如。这篇文章，向大家展示了在日常开发中，数组有哪些奇淫技巧值得关注和学习，让我们开始吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的异步</title>
    <link href="http://www.yptup.top/posts/5cd28b9d.html"/>
    <id>http://www.yptup.top/posts/5cd28b9d.html</id>
    <published>2019-10-25T04:13:38.000Z</published>
    <updated>2020-02-25T04:29:48.238Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="异步出现的前提"><a href="#异步出现的前提" class="headerlink" title="异步出现的前提"></a>异步出现的前提</h2><p>首先，因为JavaScript语言是单线程的<strong>(目标为浏览器端，出生即为单线程)</strong>,所以就需要异步，否则JavaScript脚本智能自上而下执行，如果在上部存在一些极其复杂的代码需要解析很长的时间的话，下面的代码就会遭到阻塞，也就是用户感受到的卡死.</p><h2 id="异步如何实现"><a href="#异步如何实现" class="headerlink" title="异步如何实现"></a>异步如何实现</h2><p>由于是单线程语言，所以JavaScript实现异步的方法是通过<strong>事件循环(event loop)</strong>来实现异步.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'I’m first one code!'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I’m setTimeout function code!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'I’m last one code! '</span>);</span><br></pre></td></tr></table></figure></div><p>这段代码的运行结果为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I’m first one code!</span><br><span class="line">I’m last one code!</span><br><span class="line">I’m setTimeout <span class="keyword">function</span> code!</span><br></pre></td></tr></table></figure></div><p>所以，代码并没有是自上而下执行，setTimeout函数是延迟了一段时间，等其他语句执行完了采取执行，这种情况就为异步。</p><h3 id="eventloop的机制"><a href="#eventloop的机制" class="headerlink" title="eventloop的机制"></a>eventloop的机制</h3><p>根据上一部分我们知道，JavaScript把事件分为两类:同步与异步</p><p>所以JavaScript的执行机制其实是:</p><ul><li>判断一个任务是同步任务还是异步任务，同步进入主线程，异步进入event table</li><li>异步任务在event table中注册函数，满足该函数触发条件后，推入事件队列</li><li>同步任务在主线程按顺序执行，当主线程空闲时，再去事件队列中查看是否有可执行的异步任务，如果有就进入主线程</li></ul><p><strong>这个循环即为 event loop</strong></p><h3 id="异步也有小区别"><a href="#异步也有小区别" class="headerlink" title="异步也有小区别"></a>异步也有小区别</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;).then( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br></pre></td></tr></table></figure></div><p>如果按照我们刚才的理解，这段代码的结果应该为 2,4,1,3</p><p>但是很不幸的是，他的结果为 2,4,3,1<br>这也引入了另外两个概念：<strong>宏任务与微任务</strong></p><p>所以任务应该分为这两类:</p><ul><li>宏任务(macro-task): 包括整段script代码,<code>setTimeout</code>,<code>setInterval</code></li><li>微任务(micro-task): <code>Promise，catch， finally，process.nextTick(Node端)</code></li></ul><p>所以js的执行机制其实是:<br>先执行一个宏任务，过程中如果遇到微任务先把他放到微任务的事件队列中,当宏任务执行完毕后，再去查看微任务的事件队列，将微任务一次执行完，执行完毕后再去进行下一个队列的宏任务,以此循环.</p><p>借用一张图演示</p><p><img src="/posts/5cd28b9d/event-loop.jpg" alt></p><h2 id="介绍主角Async"><a href="#介绍主角Async" class="headerlink" title="介绍主角Async"></a>介绍主角Async</h2><p><code>async</code>，一个在ES2017中提出的异步方案，有人说他是<code>Generator</code>函数的语法糖，只是把<code>Generator</code>函数的 * 替换为 <code>async</code>，把yield替换为await。我们先不讨论这句话说得对不对:speak_no_evil:,但它确实是基于了<code>Generator</code>的一种改进，它让异步变得更简单了。</p><h3 id="他做了什么"><a href="#他做了什么" class="headerlink" title="他做了什么?"></a>他做了什么?</h3><p>如果要简述的话，一旦你的函数前带上了async,你的函数返回值就必定是promise对象.(他就像真香定律一样是没有可以逃过的)就算你写的函数里返回的不是promise，他也会自动用Promise.resolve()包装起来让他成为一个promise对象。<br>所以，如果我们简单理解<code>async</code>关键字的话，他其实就是给函数加上一个标识，说明这个函数内部有异步操作。</p><h2 id="What-is-await-waiting-for"><a href="#What-is-await-waiting-for" class="headerlink" title="What is await waiting for?"></a>What is await waiting for?</h2><p>我们再次简单的介绍以下 await，await 其实等的是右侧表达式的结果.</p><blockquote><p>如果右侧是一个函数，则是这个函数的返回值。如果是一个值则就为此值.</p></blockquote><p>我们通过一个例子来”见识见识”它</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun1 is started!'</span>);</span><br><span class="line">    <span class="keyword">await</span> fun2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun1 ending!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun2 is running!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun1();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br></pre></td></tr></table></figure></div><p>我们知道，await是通过执行到此时让出线程，通过阻塞后面的代码来执行，但我们执行上面的代码发现结果为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun1 is started!</span><br><span class="line">fun2 is running!</span><br><span class="line">script start</span><br><span class="line">fun1 endding!</span><br></pre></td></tr></table></figure></div><p>注意，这里fun2先于”script start” 执行，所以 <code>await</code> 的那个表达式的执行顺序其实是从右到左，即为执行了fun2后读到了<code>await</code>关键字，然后阻塞后面的代码，这点非常重要，因为之前因为”一旦遇到<code>await</code>就立马退出线程，阻塞后面的代码”的观点，认为 <code>await</code>也会阻塞他后面的那个表达式，但其实不然。</p><blockquote><p>await 与 async 的关系就像鱼和水， await必须要有async才可以存在，而async却不一定需要有await。</p></blockquote><h2 id="await-的下一步操作"><a href="#await-的下一步操作" class="headerlink" title="await 的下一步操作"></a>await 的下一步操作</h2><p>一般来说 await等到的右侧表达式结果有两种情况：</p><p>Promise or Not Promise。</p><ul><li>如果不是promise，await会阻塞之后的代码，就先去执行async外面的同步代码，同步代码执行完后再回到async内部，把这个不是promise的结果作为await的结果。</li><li>如果是promise对象，await也会先阻塞async后面的代码，然后执行async外面的同步代码，等待这个promise对象到达fulfilled状态后，把 resolve 的参数作为 await的运算结果。其实就是执行了await Promise.resolve()，这里不做详细解释.</li></ul><h2 id="Async-与-Promise-和-Generator的一些比较"><a href="#Async-与-Promise-和-Generator的一些比较" class="headerlink" title="Async 与 Promise 和 Generator的一些比较"></a>Async 与 Promise 和 Generator的一些比较</h2><ul><li>首先Promise的提出是解决了之前令人头疼的回调地狱(callback hell)问题，但直观的看上去其实就像用了一个类库，通过Promise的api来完成了异步操作，操作本身的可调控性不是很高，但已经很实用了。</li><li>Generator函数的语义相较于Promise清晰了许多，但问题就是如果他要自动执行的话必须实用任务运行器来自动执行它。</li><li>Async相较于Generator函数实现起来相对简洁，更贴切语义。它在语言层面提供了Generator的自动执行器，代码量也大大减少。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 标准入门</a><br><a href="https://www.cnblogs.com/jiasm/p/9482443.html" target="_blank" rel="noopener">微任务、宏任务与Event-Loop</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;异步出现的前提&quot;&gt;&lt;a href=&quot;#异步出现的前提&quot; class=&quot;headerlink&quot; title=&quot;异步出现的前提&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《掌控习惯》读后感</title>
    <link href="http://www.yptup.top/posts/a0834705.html"/>
    <id>http://www.yptup.top/posts/a0834705.html</id>
    <published>2019-10-02T15:07:05.000Z</published>
    <updated>2020-03-02T15:37:27.194Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>很多人想养成早起阅读的好习惯，也有很多人想要戒烟戒酒，摒除一些坏的习惯，但我们往往会半途而废，导致我们丧失信心，没有了继续下去的勇气。最近读了一本书，叫《掌控习惯》，为什么大家的好习惯一直难以养成，为什么大家的坏习惯很难戒除，其实不是我们没有决心，只是我们用错了方法。</p><a id="more"></a><p><img src="http://blog.yptup.top/new-old.jpeg" alt></p><p>大家先想一想自己有哪些坏习惯，有人会说我沉迷网络游戏，有人会说，我喜欢抽烟，还有大部分大学生都普遍有一个坏习惯，那就是熬夜。我们先来分析一下，沉迷网络游戏这个坏习惯，网络游戏它是一个什么机制呢？它是一种让人上瘾的机制，你在击杀一个敌人，或者赢得一次比赛之后，当时你就会感到特别的喜悦也就是说你获得的快乐，获得的满足感，是有即刻性的。于是我们慢慢的喜欢上了这种感觉，一次又一次的重复，我们便沉迷上了网络游戏。其实我们沉迷的并不是网络游戏，而是沉迷在完成网络游戏之后即可获得的喜悦感。现在大家再来看看，抽烟和熬夜，是不是也有相同的性质呢？</p><p><img src="http://blog.yptup.top/game.jpeg" alt></p><p>我们都很想去养成一个很好的习惯，有人想要让自己习惯于健身，有人想要习惯于让自己早起，我们往往会发现这些习惯是很不容易养成的，每次健身之后，你不会很明显的看到自己身上多了一块儿腹肌，或者你的胳膊变得更粗壮了，健身便失去了即刻的满足感，在一次两次三次健身之后，我们都无法获得自己想要的结果，于是我们的内心就会告诉我们放弃吧，健身，没有很好的效果，意志力相对薄弱的人，会马上放弃，而一些意志力比较强一些的人，他们会坚持一段时间以后选择放弃，一个好习惯便被无情的终止了。</p><p><img src="http://blog.yptup.top/timg.jpg" alt></p><p>相信很多人看到这里已经对好习惯和坏习惯，有了大致的了解，也有很多人已经在为养成一个好习惯，找到了一个大致的方向，下面给大家介绍一个养成好习惯的方法：早起之后给自己画一个美美的妆;健身以后，奖励自己拿出手机，看一看朋友圈;阅读之后奖励自己一杯咖啡，这就叫喜好绑定法。在完成一个自己想要坚持的习惯以后，给自己一个小小的奖励，让自己获得即刻的满足感，我们对这个习惯的坚持便多了一份喜悦。</p><p><img src="http://blog.yptup.top/coffee.jpeg" alt></p><p>想象一下，你每天早上起床之后，可以给自己画美美的妆，是不是很开心呢?我们大家都希望开心，养成属于我们自己的好习惯，让我们的生活更加美丽。</p><p><img src="http://blog.yptup.top/sunshine.jpeg" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;很多人想养成早起阅读的好习惯，也有很多人想要戒烟戒酒，摒除一些坏的习惯，但我们往往会半途而废，导致我们丧失信心，没有了继续下去的勇气。最近读了一本书，叫《掌控习惯》，为什么大家的好习惯一直难以养成，为什么大家的坏习惯很难戒除，其实不是我们没有决心，只是我们用错了方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/categories/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="爱读书" scheme="http://www.yptup.top/tags/%E7%88%B1%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 transform 中的坑</title>
    <link href="http://www.yptup.top/posts/f4adc94f.html"/>
    <id>http://www.yptup.top/posts/f4adc94f.html</id>
    <published>2019-09-19T14:23:54.000Z</published>
    <updated>2020-03-12T13:13:14.793Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>transform 对普通元素的影响是个巨坑，自己亲身体验的总共有三点</p><blockquote><ol><li>提升元素的垂直地位，也就是 z-index 会变大</li><li>改变元素的定位属性，fixed 变成 absolute，absolute 变成 relative</li><li>使绝对定位(absolute)的子元素受父元素 overflow:hidden 的作用。（ps:绝对定位(absolute)的子元素宽度大于父元素，如果父容器的定位是 static，也就是默认时，overflow:hidden 无效）</li></ol></blockquote><p style="color:red">下面我们来看一下没有没有transform属性的状态</p><p><img src="/posts/f4adc94f/no-transform.png" alt="no-transform"></p><p>再来看一下给红色框增加 transform 属性后的状态</p><p><img src="/posts/f4adc94f/transform.png" alt="transform"></p><p>注:<br>CSS3 新增的一些属性虽然才艺高超，但是在非必要的情况下，还是尽量不要用它<br>CSS3 虽好，但是不要贪杯哦</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;transform 对普通元素的影响是个巨坑，自己亲身体验的总共有三点&lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;提升元素的垂直地位，也就是
      
    
    </summary>
    
    
      <category term="CSS" scheme="http://www.yptup.top/categories/CSS/"/>
    
    
      <category term="前端踩坑记" scheme="http://www.yptup.top/tags/%E5%89%8D%E7%AB%AF%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>页面性能优化</title>
    <link href="http://www.yptup.top/posts/d333b549.html"/>
    <id>http://www.yptup.top/posts/d333b549.html</id>
    <published>2019-08-21T12:19:27.000Z</published>
    <updated>2020-03-12T13:12:04.578Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p><canter>优化前端性能，提升用户体验，一直是从事前端工作人员必须考虑的问题，之前参考过很多资料，大多说的不是很详细，重点描述的也不是很到位，鄙人不才，愿集百家之所长，供大家参考(其实大概意思就是本文非本人原创，都是参考自别人的资料，由于资源来自四面八方，就不在这里一一列举了)</canter></p><a id="more"></a><h2 id="性能优化概述"><a href="#性能优化概述" class="headerlink" title="性能优化概述"></a>性能优化概述</h2><p><strong>从输入 URL 到页面加载完成，完整的链路</strong></p><p><img src="http://blog.yptup.top/gaishu.webp" alt></p><ol><li>DNS 解析</li><li>TCP 连接</li><li>HTTP 请求抛出</li><li>服务端处理请求，HTTP 响应返回</li><li>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</li></ol><h2 id="整个性能消化"><a href="#整个性能消化" class="headerlink" title="-整个性能消化"></a>-整个性能消化</h2><p><img src="http://blog.yptup.top/xingneng.webp" alt></p><h2 id="HTTP-层面优化"><a href="#HTTP-层面优化" class="headerlink" title="HTTP 层面优化"></a>HTTP 层面优化</h2><ul><li>DNS 解析:<br>DNS 实现域名到 IP 的映射。通过域名访问站点，每次请求都要做 DNS 解析。目前每次 DNS 解析，通常在 200ms 以下。一般采用 DNS Prefetch 一种 DNS 预解析技术，当你浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页中的连接时就无需进行 DNS 的解析，减少用户等待时间，提高用户体验。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"www.baidu.com"</span> /&gt;</span><br><span class="line"><span class="comment">// 只支持部分浏览器</span></span><br></pre></td></tr></table></figure></div><ul><li><p>TCP 连接：<br>采用 http2.0，可以复用 tcp 通道，采用二进制格式而非文本格式，使用报头压缩，HTTP/2 降低了开销，支持 cache push</p></li><li><p>浏览器并发<br>基于端口跟线程切换开销，浏览器不可能无限的并发请求。chrome 的并发为 6，超过限制数目的请求就会被阻塞；<br>对于某些静态资源，图片等等，我们可以对其 URL 分散处理 ，不同的资源域名(部署在 cdn 上)。</p></li><li><p>http 请求次数<br>减少 http 的请求次数，将多个请求合并成同一个，减少 http 的开销</p></li><li><p>webpack<br>充分利用 webpack 提供给我们的能力，利用 DllPlugin 与 commonPlugins 等插件对我们代码进行<br>优化，文件的分割与合并，公共代码的提取，长缓存等策略</p></li><li><p>HTTP 压缩<br>采用 Gzip 压缩：HTTP 压缩就是以缩小体积为目的，对 HTTP 内容进行重新编码的过程，原理是找出一些重复出现的字符串、临时替换它们，从而使整个文件变小，文件中代码的重复率越高，那么压缩的效率就越高，使用 Gzip 的收益也就越大</p></li></ul><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><p><img src="http://blog.yptup.top/img.webp" alt></p><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><ul><li>强缓存：<br>浏览器在请求某一资源时，会先获取该资源缓存的 header 信息，判断是否命中强缓存（cache-control 和 expires 信息），若命中直接从缓存中获取资源信息，包括缓存 header 信息；本次请求根本就不会与服务器进行通信</li></ul><ol><li><p>expires:这是 http1.0 时的规范；它的值为一个绝对时间的 GMT 格式的时间字符串，如 Mon, 10 Jun 2015 21:31:12 GMT，如果发送请求的时间在 expires 之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源</p></li><li><p>cache-control：max-age=number，这是 http1.1 时出现的 header 信息，主要是利用该字段的 max-age 值来进行判断，它是一个相对值；资源第一次的请求时间和 Cache-Control 设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；cache-control 除了该字段外，还有下面几个比较常用的设置值：no-cache ，no-store，public，private</p></li></ol><ul><li>协商缓存（对比缓存）</li></ul><ol><li>Last-Modified/If-Modified-Since:第一次请求，服务端在 Response Headers ：Last-Modified:Fri, 27 Oct 2017 06:35:57 GMT，也就是服务端最后修改该资源的时间。浏览器再次跟服务器请求这个资源时，会在 request 的 header 上加上 If-Modified-Since 的 header，这个 header 的值就是上一次请求时返回的 Last-Modified 的值，服务器进行比较，如果相同则返回 304，否则浏览器直接从服务器加载资源时，Last-Modified 的 Header 在重新加载的时候会被更新，下次请求时，If-Modified-Since 会启用上次返回的 Last-Modified 值</li><li>Etag/If-None-Match: 服务器会为每个资源生成一个唯一的标识字符串，只要文件内容不同，它们对应的 Etag 就是不同的；If-Modified-Since 能检查到的精度是 s 级的，某些服务器不能精确的得到文件的最后修改时间，我们编辑了文件，但文件的内容没有改变。因为服务器是根据文件的最后修改时间来判断的，导致重新请求所以才出现了 Etag，Etag 对服务器也有性能损耗</li></ol><blockquote><p>Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。</p></blockquote><ul><li>请求过程总结：<br><img src="http://blog.yptup.top/modified.webp" alt></li></ul><h2 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h2><ul><li><p>DOM 树:<br>解析 HTML 以创建的是 DOM 树（DOM tree ）：渲染引擎开始解析 HTML 文档，转换树中的标签到 DOM 节点，它被称为“内容树”。</p></li><li><p>CSSOM 树：<br>解析 CSS（包括外部 CSS 文件和样式元素）创建的是 CSSOM 树。CSSOM 的解析过程与 DOM 的解析过程是并行的。</p></li><li><p>渲染树：<br>CSSOM 与 DOM 结合，之后我们得到的就是渲染树（Render tree ）。</p></li><li><p>布局渲染树：<br>从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标，我们便得到了基于渲染树的布局渲染树（Layout of the render tree）。</p></li><li><p>绘制渲染树:<br>遍历渲染树，每个节点将使用 UI 后端层来绘制。整个过程叫做绘制渲染树（Painting the render tree）。</p></li></ul><center class="color-ccc">渲染流程图</center><p><img src="http://blog.yptup.top/Image.png" alt></p><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><ul><li>普通模式，JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执⾏完毕才能去做其它事情。一般将此类 js 放在在<code>body</code>标签的底部，减少对整个页面下载的影响</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>async 模式：JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行，async 模式没有执行顺序，先返回的优先执行，先到先得</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>defer 模式：JS 的加载是异步的，执行是被推迟的。等整个文档解析完成 DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">"index.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</p><ul><li>动态加载脚本：此文件当元素添加到页面之后立刻开始下载。无论在何处启动下载，文件的下载和运行都不会阻塞其他页面处理过程。甚至可以将这些代码放在<head>部分而不会对其余部分的页面代码造成影响</head></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.type = <span class="string">'text/javascript'</span></span><br><span class="line">script.src = <span class="string">'script1.js'</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script)</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;canter&gt;优化前端性能，提升用户体验，一直是从事前端工作人员必须考虑的问题，之前参考过很多资料，大多说的不是很详细，重点描述的也不是很到位，鄙人不才，愿集百家之所长，供大家参考(其实大概意思就是本文非本人原创，都是参考自别人的资料，由于资源来自四面八方，就不在这里一一列举了)&lt;/canter&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS运行机制</title>
    <link href="http://www.yptup.top/posts/6fdc6fb4.html"/>
    <id>http://www.yptup.top/posts/6fdc6fb4.html</id>
    <published>2019-08-20T08:18:14.000Z</published>
    <updated>2020-03-12T13:11:21.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="一、引子"><a href="#一、引子" class="headerlink" title="一、引子"></a>一、引子</h2><p>本文介绍JavaScript运行机制，这一部分比较抽象，我们先从一道面试题入手：</p><a id="more"></a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 请问数字打印顺序是什么？</span></span><br></pre></td></tr></table></figure></div><p>这一题看似很简单，但如果你不了解JavaScript运行机制，很容易就答错了。题目的答案是依次输出1 2 3，如果你有疑惑，下文有详细解释。</p><h2 id="二、理解JS的单线程的概念"><a href="#二、理解JS的单线程的概念" class="headerlink" title="二、理解JS的单线程的概念"></a>二、理解JS的单线程的概念</h2><p>JavaScript语言的一大特点就是单线程，也就是说，<strong>同一个时间只能做一件事</strong>。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><h2 id="三、理解任务队列-消息队列"><a href="#三、理解任务队列-消息队列" class="headerlink" title="三、理解任务队列(消息队列)"></a>三、理解任务队列(消息队列)</h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。JavaScript语言的设计者意识到这个问题，将所有任务分成两种，<span style="color:#f40">一种是同步任务（synchronous），另一种是异步任务（asynchronous）</span>。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。<span style="color:#f40">异步任务包括宏任务和微任务(后面会重点介绍)</span>，接下来我们通过两个例子说明同步任务和异步任务的区别：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line"><span class="comment">// 请问最后的输出结果是什么？</span></span><br></pre></td></tr></table></figure></div><p>如果你的回答是A,恭喜你答对了，因为这是同步任务，程序由上到下执行，遇到while()死循环，下面语句就没办法执行。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;&#125;</span><br><span class="line"><span class="comment">// 请问最后的输出结果是什么？</span></span><br></pre></td></tr></table></figure></div><p>如果你的答案是A，恭喜你现在对js运行机制已经有个粗浅的认识了！题目中的setTimeout()就是个异步任务。<strong>在所有同步任务执行完之前，任何的异步任务是不会执行的</strong>，关于这点下文还会详细说明。</p><h2 id="四、理解Event-Loop"><a href="#四、理解Event-Loop" class="headerlink" title="四、理解Event Loop"></a>四、理解Event Loop</h2><p><strong>异步执行的运行机制如下：</strong></p><ol><li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</li><li>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面的第三步。</li></ol><p><strong>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。</strong>这个过程会循环反复。以下这张图可以很好说明这点。<br><img src="/posts/6fdc6fb4/event-loop.png" alt="Event Loop"></p><h2 id="五、哪些语句会放入异步任务队列及放入时机"><a href="#五、哪些语句会放入异步任务队列及放入时机" class="headerlink" title="五、哪些语句会放入异步任务队列及放入时机"></a>五、哪些语句会放入异步任务队列及放入时机</h2><p><strong>一般来说，有以下四种会放入异步任务队列：</strong></p><ol><li>setTimeout和setlnterval</li><li>DOM事件</li><li>ES6中的Promise</li><li>Ajax异步请求</li></ol><p><strong>javascript 代码运行分两个阶段：</strong></p><ol><li>预解析—把所有的函数定义提前，所有的变量声明提前，变量的赋值不提前</li><li>执行—从上到下执行（按照js运行机制）</li></ol><p>至于放入异步任务队列的时机，我们通过 setTimeout的例子和Ajax例子来详细说明：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例题1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(i);  </span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请问最后的输出结果是什么？</span></span><br></pre></td></tr></table></figure></div><p>for循环一次碰到一个 setTimeout()，<span style="color:#f40">并不是马上把setTimeout()拿到异步队列中，而要等到一秒后，才将其放到任务队列里面</span>，一旦”执行栈”中的所有同步任务执行完毕（即for循环结束，此时i已经为5），系统就会读取已经存放”任务队列”的setTimeout()（有五个），于是答案是输出5个5。</p><p>上面也提到，<span style="color:#EFEFDA"><strong>在到达指定时间时，定时器就会将相应回调函数插入“任务队列”尾部。这就是“定时器（timer）”功能。</strong></span></p><ul><li>关于定时器的重要补充：<br>定时器包括setTimeout与 setInterval 两个方法。它们的第二个参数是指定其回调函数推迟/每隔多少毫秒数后执行。</li></ul><p>对于第二个参数有以下需要注意的地方：</p><p>当第二个参数缺省时，默认为 0；</p><p>当指定的值小于 4 毫秒，则增加到 4ms(4ms 是 HTML5 标准指定的，对于 2010 年及之前的浏览器则是 10ms);也就是说至少需要4毫秒，该setTimeout()拿到任务队列中。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例题2</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url：“xxxxx<span class="string">",</span></span><br><span class="line"><span class="string">success:function (result)&#123;</span></span><br><span class="line"><span class="string">console.log("</span>a<span class="string">")</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">setTimeout(function ()&#123;</span></span><br><span class="line"><span class="string">console.log("</span>b<span class="string">")</span></span><br><span class="line"><span class="string">&#125;,100)</span></span><br><span class="line"><span class="string">setTimeout(function ()&#123;</span></span><br><span class="line"><span class="string">console.log("</span>c<span class="string">")</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">console.log("</span>d<span class="string">");</span></span><br></pre></td></tr></table></figure></div><p><img src="/posts/6fdc6fb4/ajax.png" alt></p><p>ajax加载完成时才会放入异步队列，至于这段时间不确定，所有有两种情况：①大于100ms,最后的结果是 d c b a ;②小于100ms,最后的结果便是d c a b。</p><h2 id="六、微任务-Microtask-与宏任务-Macrotask"><a href="#六、微任务-Microtask-与宏任务-Macrotask" class="headerlink" title="六、微任务(Microtask)与宏任务(Macrotask)"></a>六、微任务(Microtask)与宏任务(Macrotask)</h2><p>我们上面提到异步任务分为宏任务和微任务，宏任务队列可以有多个，微任务队列只有一个。</p><ul><li>宏任务包括：script(全局任务), setTimeout, setInterval, setImmediate, I/O, UI rendering。</li><li>微任务包括: new Promise().then(回调), process.nextTick, Object.observe(已废弃), MutationObserver(html5新特性)</li></ul><p><strong>当执行栈中的所有同步任务执行完毕时，是先执行宏任务还是微任务呢？</strong></p><ul><li>由于执行代码入口都是全局任务 script，而全局任务属于宏任务，所以当栈为空，同步任务任务执行完毕时，会先执行微任务队列里的任务。</li><li>微任务队列里的任务全部执行完毕后，会读取宏任务队列中拍最前的任务。</li><li>执行宏任务的过程中，遇到微任务，依次加入微任务队列。</li><li>栈空后，再次读取微任务队列里的任务，依次类推。</li></ul><p><img src="/posts/6fdc6fb4/no-referrer.png" alt="no-referrer"></p><p>一句话概括上面的流程图：<span style="color:#f40">当某个宏任务队列的中的任务全部执行完以后,会查看是否有微任务队列。如果有，先执行微任务队列中的所有任务，如果没有，就查看是否有其他宏任务队列。</span></p><p>接下来我们看两道例子来介绍上面流程：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise1'</span>)  </span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise2'</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><p>最后输出结果是Promise1，setTimeout1，Promise2，setTimeout2</p><ul><li>一开始执行栈的同步任务执行完毕，会去查看是否有微任务队列，上题中存在(有且只有一个)，然后执行微任务队列中的所有任务输出Promise1，同时会生成一个宏任务 setTimeout2</li><li>然后去查看宏任务队列，宏任务 setTimeout1 在 setTimeout2 之前，先执行宏任务 setTimeout1，输出 setTimeout1</li><li>在执行宏任务setTimeout1时会生成微任务Promise2 ，放入微任务队列中，接着先去清空微任务队列中的所有任务，输出 Promise2</li><li>清空完微任务队列中的所有任务后，就又会去宏任务队列取一个，这回执行的是 setTimeout2</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'----------------- start -----------------'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">  resolve();  <span class="comment">// 修改promise实例对象的状态为成功的状态</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise实例成功回调执行'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'----------------- end -----------------'</span>);</span><br></pre></td></tr></table></figure></div><p><img src="/posts/6fdc6fb4/start-end.png" alt></p><h2 id="七、解析"><a href="#七、解析" class="headerlink" title="七、解析"></a>七、解析</h2><p>如果要输出0~4，上面例题应该如何修改？</p><ol><li><p>将var变为let</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>加个立即执行函数</p></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li>也可以通过这样加闭包</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="number">5</span>;i++)&#123;  </span><br><span class="line">  <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">      <span class="keyword">var</span> j = i;    </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">          <span class="built_in">console</span>.log(j);  </span><br><span class="line">      &#125;,<span class="number">1000</span>)  </span><br><span class="line">  &#125;    </span><br><span class="line">a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;一、引子&quot;&gt;&lt;a href=&quot;#一、引子&quot; class=&quot;headerlink&quot; title=&quot;一、引子&quot;&gt;&lt;/a&gt;一、引子&lt;/h2&gt;&lt;p&gt;本文介绍JavaScript运行机制，这一部分比较抽象，我们先从一道面试题入手：&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>太极24式-ES6</title>
    <link href="http://www.yptup.top/posts/c7506d5c.html"/>
    <id>http://www.yptup.top/posts/c7506d5c.html</id>
    <published>2019-08-15T13:42:57.000Z</published>
    <updated>2020-03-06T13:59:44.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>本文主要介绍 24 中 es6 方法，这些方法都挺实用的，本本请记好，时不时翻出来看看。</p><h2 id="1-如何隐藏所有指定的元素"><a href="#1-如何隐藏所有指定的元素" class="headerlink" title="1.如何隐藏所有指定的元素"></a>1.如何隐藏所有指定的元素</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hide = <span class="function">(<span class="params">el</span>) =&gt;</span> <span class="built_in">Array</span>.from(el).forEach(<span class="function"><span class="params">e</span> =&gt;</span> (e.style.display = <span class="string">'none'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例:隐藏页面上所有`&lt;img&gt;`元素?</span></span><br><span class="line">hide(<span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>))</span><br></pre></td></tr></table></figure></div><h2 id="2-如何检查元素是否具有指定的类？"><a href="#2-如何检查元素是否具有指定的类？" class="headerlink" title="2.如何检查元素是否具有指定的类？"></a>2.如何检查元素是否具有指定的类？</h2><p>页面DOM里的每个节点上都有一个<code>classList</code>对象，程序员可以使用里面的方法新增、删除、修改节点上的CSS类。使用<code>classList</code>，程序员还可以用它来判断某个节点是否被赋予了某个CSS类。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> el.classList.contains(className)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">hasClass(<span class="built_in">document</span>.querySelector(<span class="string">'p.special'</span>), <span class="string">'special'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="3-如何切换一个元素的类"><a href="#3-如何切换一个元素的类" class="headerlink" title="3.如何切换一个元素的类?"></a>3.如何切换一个元素的类?</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toggleClass = <span class="function">(<span class="params">el, className</span>) =&gt;</span> el.classList.toggle(className)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例 移除 p 具有类`special`的 special 类</span></span><br><span class="line">toggleClass(<span class="built_in">document</span>.querySelector(<span class="string">'p.special'</span>), <span class="string">'special'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="4-如何获取当前页面的滚动位置？"><a href="#4-如何获取当前页面的滚动位置？" class="headerlink" title="4.如何获取当前页面的滚动位置？"></a>4.如何获取当前页面的滚动位置？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  x: el.pageXOffset !== <span class="literal">undefined</span> ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">  y: el.pageYOffset !== <span class="literal">undefined</span> ? el.pageYOffset : el.scrollTop</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">getScrollPosition(); <span class="comment">// &#123;x: 0, y: 200&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="5-如何平滑滚动到页面顶部"><a href="#5-如何平滑滚动到页面顶部" class="headerlink" title="5.如何平滑滚动到页面顶部"></a>5.如何平滑滚动到页面顶部</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollToTop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">scrollToTop()</span><br></pre></td></tr></table></figure></div><p><code>window.requestAnimationFrame()</code> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p><code>requestAnimationFrame</code>：优势：由系统决定回调函数的执行时机。60Hz的刷新频率，那么每次刷新的间隔中会执行一次回调函数，不会引起丢帧，不会卡顿。</p><h2 id="6-如何检查父元素是否包含子元素？"><a href="#6-如何检查父元素是否包含子元素？" class="headerlink" title="6.如何检查父元素是否包含子元素？"></a>6.如何检查父元素是否包含子元素？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementContains = <span class="function">(<span class="params">parent, child</span>) =&gt;</span> parent !== child &amp;&amp; parent.contains(child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">elementContains(<span class="built_in">document</span>.querySelector(<span class="string">'head'</span>), <span class="built_in">document</span>.querySelector(<span class="string">'title'</span>)); </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">elementContains(<span class="built_in">document</span>.querySelector(<span class="string">'body'</span>), <span class="built_in">document</span>.querySelector(<span class="string">'body'</span>)); </span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><h2 id="7-如何检查指定的元素在视口中是否可见？"><a href="#7-如何检查指定的元素在视口中是否可见？" class="headerlink" title="7.如何检查指定的元素在视口中是否可见？"></a>7.如何检查指定的元素在视口中是否可见？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementIsVisibleInViewport = <span class="function">(<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">return</span> partiallyVisible</span><br><span class="line">    ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">        ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">elementIsVisibleInViewport(el); <span class="comment">// 需要左右可见</span></span><br><span class="line">elementIsVisibleInViewport(el, <span class="literal">true</span>); <span class="comment">// 需要全屏(上下左右)可以见</span></span><br></pre></td></tr></table></figure></div><h2 id="8-如何获取元素中的所有图像？"><a href="#8-如何获取元素中的所有图像？" class="headerlink" title="8.如何获取元素中的所有图像？"></a>8.如何获取元素中的所有图像？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getImages = <span class="function">(<span class="params">el, includeDuplicates = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> images = [...el.getElementsByTagName(<span class="string">'img'</span>)].map(<span class="function"><span class="params">img</span> =&gt;</span> img.getAttribute(<span class="string">'src'</span>));</span><br><span class="line">  <span class="keyword">return</span> includeDuplicates ? images : [...new <span class="built_in">Set</span>(images)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例：includeDuplicates 为 true 表示需要排除重复元素</span></span><br><span class="line">getImages(<span class="built_in">document</span>, <span class="literal">true</span>); <span class="comment">// ['image1.jpg', 'image2.png', 'image1.png', '...']</span></span><br><span class="line">getImages(<span class="built_in">document</span>, <span class="literal">false</span>); <span class="comment">// ['image1.jpg', 'image2.png', '...']</span></span><br></pre></td></tr></table></figure></div><h2 id="9-如何确定设备是移动设备还是台式机-笔记本电脑？"><a href="#9-如何确定设备是移动设备还是台式机-笔记本电脑？" class="headerlink" title="9.如何确定设备是移动设备还是台式机/笔记本电脑？"></a>9.如何确定设备是移动设备还是台式机/笔记本电脑？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> detectDeviceType = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)</span><br><span class="line">    ? <span class="string">'Mobile'</span></span><br><span class="line">    : <span class="string">'Desktop'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">detectDeviceType(); <span class="comment">// "Mobile" or "Desktop"</span></span><br></pre></td></tr></table></figure></div><h2 id="10-How-to-get-the-current-URL"><a href="#10-How-to-get-the-current-URL" class="headerlink" title="10.How to get the current URL?"></a>10.How to get the current URL?</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentURL = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.location.href</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">currentURL() <span class="comment">// 'https://google.com'</span></span><br></pre></td></tr></table></figure></div><h2 id="11-如何创建一个包含当前URL参数的对象？"><a href="#11-如何创建一个包含当前URL参数的对象？" class="headerlink" title="11.如何创建一个包含当前URL参数的对象？"></a>11.如何创建一个包含当前URL参数的对象？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getURLParameters = <span class="function"><span class="params">url</span> =&gt;</span></span><br><span class="line">  (url.match(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>) || []).reduce(</span><br><span class="line">    (a, v) =&gt; ((a[v.slice(<span class="number">0</span>, v.indexOf(<span class="string">'='</span>))] = v.slice(v.indexOf(<span class="string">'='</span>) + <span class="number">1</span>)), a),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">getURLParameters(<span class="string">'http://url.com/page?n=Adam&amp;s=Smith'</span>); <span class="comment">// &#123;n: 'Adam', s: 'Smith'&#125;</span></span><br><span class="line">getURLParameters(<span class="string">'google.com'</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="12-如何将一组表单元素转化为对象？"><a href="#12-如何将一组表单元素转化为对象？" class="headerlink" title="12.如何将一组表单元素转化为对象？"></a>12.如何将一组表单元素转化为对象？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formToObject = <span class="function"><span class="params">form</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(<span class="keyword">new</span> FormData(form)).reduce(</span><br><span class="line">    (acc, [key, value]) =&gt; (&#123;</span><br><span class="line">      ...acc,</span><br><span class="line">      [key]: value</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">formToObject(<span class="built_in">document</span>.querySelector(<span class="string">'#form'</span>)); </span><br><span class="line"><span class="comment">// &#123; email: 'test@email.com', name: 'Test Name' &#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="13-如何从对象检索给定选择器指示的一组属性？"><a href="#13-如何从对象检索给定选择器指示的一组属性？" class="headerlink" title="13.如何从对象检索给定选择器指示的一组属性？"></a>13.如何从对象检索给定选择器指示的一组属性？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = (from, ...selectors) =&gt;</span><br><span class="line">  [...selectors].map(s =&gt;</span><br><span class="line">    s</span><br><span class="line">      .replace(/\[([^\[\]]*)\]/g, '.$1.')</span><br><span class="line">      .split('.')</span><br><span class="line">      .filter(t =&gt; t !== '')</span><br><span class="line">      .reduce((prev, cur) =&gt; prev &amp;&amp; prev[cur], from)</span><br><span class="line">  );</span><br><span class="line">const obj = &#123; selector: &#123; <span class="attr">to</span>: &#123; <span class="attr">val</span>: <span class="string">'val to select'</span> &#125; &#125;, <span class="attr">target</span>: [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="string">'test'</span> &#125;] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example</span></span><br><span class="line"><span class="keyword">get</span>(obj, 'selector.to.val', 'target[0]', 'target[2].a'); </span><br><span class="line">// ['val to select', 1, 'test']</span><br></pre></td></tr></table></figure></div><h2 id="14-如何在等待指定时间后调用提供的函数？"><a href="#14-如何在等待指定时间后调用提供的函数？" class="headerlink" title="14.如何在等待指定时间后调用提供的函数？"></a>14.如何在等待指定时间后调用提供的函数？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function">(<span class="params">fn, wait, ...args</span>) =&gt;</span> setTimeout(fn, wait, ...args);</span><br><span class="line">delay(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1000</span>,</span><br><span class="line">  <span class="string">'later'</span></span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后打印 'later'</span></span><br></pre></td></tr></table></figure></div><h2 id="15-如何在给定元素上触发特定事件且能选择地传递自定义数据？"><a href="#15-如何在给定元素上触发特定事件且能选择地传递自定义数据？" class="headerlink" title="15.如何在给定元素上触发特定事件且能选择地传递自定义数据？"></a>15.如何在给定元素上触发特定事件且能选择地传递自定义数据？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> triggerEvent = <span class="function">(<span class="params">el, eventType, detail</span>) =&gt;</span></span><br><span class="line">  el.dispatchEvent(<span class="keyword">new</span> CustomEvent(eventType, &#123; detail &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">triggerEvent(<span class="built_in">document</span>.getElementById(<span class="string">'myId'</span>), <span class="string">'click'</span>);</span><br><span class="line">triggerEvent(<span class="built_in">document</span>.getElementById(<span class="string">'myId'</span>), <span class="string">'click'</span>, &#123; <span class="attr">username</span>: <span class="string">'bob'</span> &#125;);</span><br></pre></td></tr></table></figure></div><p>自定义事件的函数有 <code>Event</code>、<code>CustomEvent</code> 和 <code>dispatchEvent</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 window派发一个resize内置事件</span></span><br><span class="line"><span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'resize'</span>))</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接自定义事件，使用 Event 构造函数：</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'build'</span>);</span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">'#id'</span>)</span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">elem.addEventListener(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; ... &#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 触发事件.</span></span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure></div><p><code>CustomEvent</code> 可以创建一个更高度自定义事件，还可以附带一些数据，具体用法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myEvent = <span class="keyword">new</span> CustomEvent(eventname, options);</span><br><span class="line">其中 options 可以是：</span><br><span class="line">&#123;</span><br><span class="line">  detail: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  bubbles: <span class="literal">true</span>,    <span class="comment">//是否冒泡</span></span><br><span class="line">  cancelable: <span class="literal">false</span> <span class="comment">//是否取消默认事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中 <code>detail</code> 可以存放一些初始化的信息，可以在触发的时候调用。其他属性就是定义该事件是否具有冒泡等等功能。</p><p>内置的事件会由浏览器根据某些操作进行触发，自定义的事件就需要人工触发。 <code>dispatchEvent</code> 函数就是用来触发某个事件：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.dispatchEvent(customEvent);</span><br></pre></td></tr></table></figure></div><p>上面代码表示，在 <code>element</code> 上面触发 <code>customEvent</code> 这个事件。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add an appropriate event listener</span></span><br><span class="line">obj.addEventListener(<span class="string">"cat"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; process(e.detail) &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// create and dispatch the event</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> CustomEvent(<span class="string">"cat"</span>, &#123;<span class="string">"detail"</span>:&#123;<span class="string">"hazcheeseburger"</span>:<span class="literal">true</span>&#125;&#125;);</span><br><span class="line">obj.dispatchEvent(event);</span><br><span class="line">使用自定义事件需要注意兼容性问题，而使用 jQuery 就简单多了：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定自定义事件</span></span><br><span class="line">$(element).on(<span class="string">'myCustomEvent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">$(element).trigger(<span class="string">'myCustomEvent'</span>);</span><br><span class="line"><span class="comment">// 此外，你还可以在触发自定义事件时传递更多参数信息：</span></span><br><span class="line"> </span><br><span class="line">$( <span class="string">"p"</span> ).on( <span class="string">"myCustomEvent"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> event, myName </span>) </span>&#123;</span><br><span class="line">  $( <span class="keyword">this</span> ).text( myName + <span class="string">", hi there!"</span> );</span><br><span class="line">&#125;);</span><br><span class="line">$( <span class="string">"button"</span> ).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $( <span class="string">"p"</span> ).trigger( <span class="string">"myCustomEvent"</span>, [ <span class="string">"John"</span> ] );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><h2 id="16-如何从元素中移除事件监听器"><a href="#16-如何从元素中移除事件监听器" class="headerlink" title="16.如何从元素中移除事件监听器?"></a>16.如何从元素中移除事件监听器?</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> off = <span class="function">(<span class="params">el, evt, fn, opts = <span class="literal">false</span></span>) =&gt;</span> el.removeEventListener(evt, fn, opts);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'!'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, fn);</span><br><span class="line">off(<span class="built_in">document</span>.body, <span class="string">'click'</span>, fn);</span><br></pre></td></tr></table></figure></div><h2 id="17-如何获得给定毫秒数的可读格式？"><a href="#17-如何获得给定毫秒数的可读格式？" class="headerlink" title="17.如何获得给定毫秒数的可读格式？"></a>17.如何获得给定毫秒数的可读格式？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatDuration = <span class="function"><span class="params">ms</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ms &lt; <span class="number">0</span>) ms = -ms;</span><br><span class="line">  <span class="keyword">const</span> time = &#123;</span><br><span class="line">    day: <span class="built_in">Math</span>.floor(ms / <span class="number">86400000</span>),</span><br><span class="line">    hour: <span class="built_in">Math</span>.floor(ms / <span class="number">3600000</span>) % <span class="number">24</span>,</span><br><span class="line">    minute: <span class="built_in">Math</span>.floor(ms / <span class="number">60000</span>) % <span class="number">60</span>,</span><br><span class="line">    second: <span class="built_in">Math</span>.floor(ms / <span class="number">1000</span>) % <span class="number">60</span>,</span><br><span class="line">    millisecond: <span class="built_in">Math</span>.floor(ms) % <span class="number">1000</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.entries(time)</span><br><span class="line">    .filter(<span class="function"><span class="params">val</span> =&gt;</span> val[<span class="number">1</span>] !== <span class="number">0</span>)</span><br><span class="line">    .map(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;val&#125;</span> <span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;val !== <span class="number">1</span> ? <span class="string">'s'</span> : <span class="string">''</span>&#125;</span>`</span>)</span><br><span class="line">    .join(<span class="string">', '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">formatDuration(<span class="number">1001</span>); <span class="comment">// '1 second, 1 millisecond'</span></span><br><span class="line">formatDuration(<span class="number">34325055574</span>); </span><br><span class="line"><span class="comment">// '397 days, 6 hours, 44 minutes, 15 seconds, 574 milliseconds'</span></span><br></pre></td></tr></table></figure></div><h2 id="18-如何获得两个日期之间的差异（以天为单位）？"><a href="#18-如何获得两个日期之间的差异（以天为单位）？" class="headerlink" title="18.如何获得两个日期之间的差异（以天为单位）？"></a>18.如何获得两个日期之间的差异（以天为单位）？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateInitial, dateFinal</span>) =&gt;</span></span><br><span class="line">  (dateFinal - dateInitial) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">getDaysDiffBetweenDates(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-12-13'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-12-22'</span>)); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></div><h2 id="19-如何向传递的URL发出GET请求？"><a href="#19-如何向传递的URL发出GET请求？" class="headerlink" title="19.如何向传递的URL发出GET请求？"></a>19.如何向传递的URL发出GET请求？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> httpGet = <span class="function">(<span class="params">url, callback, err = <span class="built_in">console</span>.error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  request.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  request.onload = <span class="function"><span class="params">()</span> =&gt;</span> callback(request.responseText);</span><br><span class="line">  request.onerror = <span class="function"><span class="params">()</span> =&gt;</span> err(request);</span><br><span class="line">  request.send();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">httpGet(</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"userId": 1, "id": 1, "title": "sample title", "body": "my text"&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="20-如何对传递的URL发出POST请求？"><a href="#20-如何对传递的URL发出POST请求？" class="headerlink" title="20.如何对传递的URL发出POST请求？"></a>20.如何对传递的URL发出POST请求？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> httpPost = <span class="function">(<span class="params">url, data, callback, err = <span class="built_in">console</span>.error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  request.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  request.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/json; charset=utf-8'</span>);</span><br><span class="line">  request.onload = <span class="function"><span class="params">()</span> =&gt;</span> callback(request.responseText);</span><br><span class="line">  request.onerror = <span class="function"><span class="params">()</span> =&gt;</span> err(request);</span><br><span class="line">  request.send(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newPost = &#123;</span><br><span class="line">  userId: <span class="number">1</span>,</span><br><span class="line">  id: <span class="number">1337</span>,</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'bar bar bar'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(newPost);</span><br><span class="line">httpPost(</span><br><span class="line">  <span class="string">'https://jsonplaceholder.typicode.com/posts'</span>,</span><br><span class="line">  data,</span><br><span class="line">  <span class="built_in">console</span>.log</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;"userId": 1, "id": 1337, "title": "Foo", "body": "bar bar bar"&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="21-如何为指定选择器创建具有指定范围，步长和持续时间的计数器？"><a href="#21-如何为指定选择器创建具有指定范围，步长和持续时间的计数器？" class="headerlink" title="21.如何为指定选择器创建具有指定范围，步长和持续时间的计数器？"></a>21.如何为指定选择器创建具有指定范围，步长和持续时间的计数器？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">selector, start, end, step = <span class="number">1</span>, duration = <span class="number">2000</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> current = start,</span><br><span class="line">    _step = (end - start) * step &lt; <span class="number">0</span> ? -step : step,</span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      current += _step;</span><br><span class="line">      <span class="built_in">document</span>.querySelector(selector).innerHTML = current;</span><br><span class="line">      <span class="keyword">if</span> (current &gt;= end) <span class="built_in">document</span>.querySelector(selector).innerHTML = end;</span><br><span class="line">      <span class="keyword">if</span> (current &gt;= end) clearInterval(timer);</span><br><span class="line">    &#125;, <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.floor(duration / (end - start))));</span><br><span class="line">  <span class="keyword">return</span> timer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">counter(<span class="string">'#my-id'</span>, <span class="number">1</span>, <span class="number">1000</span>, <span class="number">5</span>, <span class="number">2000</span>); </span><br><span class="line"><span class="comment">// 让 `id=“my-id”`的元素创建一个2秒计时器</span></span><br></pre></td></tr></table></figure></div><h2 id="22-如何将字符串复制到剪贴板？"><a href="#22-如何将字符串复制到剪贴板？" class="headerlink" title="22.如何将字符串复制到剪贴板？"></a>22.如何将字符串复制到剪贴板？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</span><br><span class="line">  el.value = str;</span><br><span class="line">  el.setAttribute(<span class="string">'readonly'</span>, <span class="string">''</span>);</span><br><span class="line">  el.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">  el.style.left = <span class="string">'-9999px'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">  <span class="keyword">const</span> selected =</span><br><span class="line">    <span class="built_in">document</span>.getSelection().rangeCount &gt; <span class="number">0</span> ? <span class="built_in">document</span>.getSelection().getRangeAt(<span class="number">0</span>) : <span class="literal">false</span>;</span><br><span class="line">  el.select();</span><br><span class="line">  <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(el);</span><br><span class="line">  <span class="keyword">if</span> (selected) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getSelection().removeAllRanges();</span><br><span class="line">    <span class="built_in">document</span>.getSelection().addRange(selected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">copyToClipboard(<span class="string">'Lorem ipsum'</span>); </span><br><span class="line"><span class="comment">// 'Lorem ipsum' copied to clipboard</span></span><br></pre></td></tr></table></figure></div><h2 id="23-如何确定页面的浏览器选项卡是否聚焦？"><a href="#23-如何确定页面的浏览器选项卡是否聚焦？" class="headerlink" title="23.如何确定页面的浏览器选项卡是否聚焦？"></a>23.如何确定页面的浏览器选项卡是否聚焦？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isBrowserTabFocused = <span class="function"><span class="params">()</span> =&gt;</span> !<span class="built_in">document</span>.hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">isBrowserTabFocused(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><h2 id="24-如何创建目录（如果不存在）？"><a href="#24-如何创建目录（如果不存在）？" class="headerlink" title="24.如何创建目录（如果不存在）？"></a>24.如何创建目录（如果不存在）？</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> createDirIfNotExists = <span class="function"><span class="params">dir</span> =&gt;</span> (!fs.existsSync(dir) ? fs.mkdirSync(dir) : <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">createDirIfNotExists(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure></div><p>这里面的方法大都挺实用，可以解决很多开发过程问题，大家就好好利用起来吧。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本文主要介绍 24 中 es6 方法，这些方法都挺实用的，本本请记好，时不时翻出来看看。&lt;/p&gt;&lt;h2 id=&quot;1-如何隐藏所有指定的元素&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://www.yptup.top/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://www.yptup.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>与Promise血脉相连的async/await</title>
    <link href="http://www.yptup.top/posts/cda9cb27.html"/>
    <id>http://www.yptup.top/posts/cda9cb27.html</id>
    <published>2019-06-20T15:40:05.000Z</published>
    <updated>2020-03-07T15:51:34.981Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>async/await是JavaScript为了解决异步问题而提出的一种解决方案，许多人将其称为异步的终极解决方案。JavaScript的发展也经历了回调、Promise、async/await三个阶段，本篇文章记录了我自己对于async/await的理解。因为async/await的使用离不开Promise，如果对于Promise不熟悉的话，可以看下这篇介绍：<a href="/posts/54b11a0c.html">Promise详解</a></p><a id="more"></a><h2 id="一、async-await的具体使用规则"><a href="#一、async-await的具体使用规则" class="headerlink" title="一、async/await的具体使用规则"></a>一、async/await的具体使用规则</h2><p>在我们处理异步的时候，比起回调函数，<code>Promise</code>的then方法会显得较为简洁和清晰，但是在处理<strong>多个彼此之间相互依赖的请求的时候</strong>，就会显的有些累赘。这时候，用<code>async</code>和<code>await</code>更加优雅，后面会详情说明。</p><ol><li>async/await使用规则一：凡是在前面添加了<code>async</code>的函数在执行后都会自动返回一个<code>Promise</code>对象</li></ol><p>例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = test()</span><br><span class="line"><span class="built_in">console</span>.log(result)  <span class="comment">//即便代码里test函数什么都没返回，我们依然打出了Promise对象</span></span><br></pre></td></tr></table></figure></div><ol start="2"><li>async/await使用规则二：await必须在async函数里使用，不能单独使用</li></ol><p>错误的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()   <span class="comment">//执行以后会报错</span></span><br></pre></td></tr></table></figure></div><p>正确的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> test() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div><ol start="3"><li>async/await使用规则三：await后面需要跟Promise对象，不然就没有意义，而且await后面的Promise对象不必写then，因为await的作用之一就是获取后面Promise对象成功状态传递出来的参数。</li></ol><p>正确的例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">'success'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> test() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> fn() <span class="comment">//因为fn会返回一个Promise对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)    <span class="comment">//这里会打出Promise成功后传递过来的'success'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div><p>没有意义的例子（不会报错）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> test() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="number">123</span></span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure></div><h2 id="二、async-await的错误处理方式"><a href="#二、async-await的错误处理方式" class="headerlink" title="二、async/await的错误处理方式"></a>二、async/await的错误处理方式</h2><p><strong>关于错误处理，如规则三所说，await可以直接获取到后面Promise成功状态传递的参数，但是却捕捉不到失败状态。在这里，我们通过给包裹await的async函数添加then/catch方法来解决，因为根据规则一，async函数本身就会返回一个Promise对象。</strong></p><p>一个包含错误处理的完整的async/await例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promiseDemo = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">        <span class="keyword">if</span> (random &gt;= <span class="number">0.5</span>) &#123;</span><br><span class="line">            resolve(<span class="string">'success'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">'failed'</span>)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promiseDemo</span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment">//这里的result是promiseDemo成功状态的值，如果失败了，代码就直接跳到下面的catch了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response) </span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面的代码需要注意两个地方，一是async函数需要主动return一下，如果Promise的状态是成功的，那么return的这个值就会被下面的then方法捕捉到；二是，如果async函数有任何错误，都被catch捕捉到！</p><h2 id="三、同步与异步"><a href="#三、同步与异步" class="headerlink" title="三、同步与异步"></a>三、同步与异步</h2><p>在<code>async</code>函数中使用<code>await</code>，那么<code>await</code>这里的代码就会变成同步的了，意思就是说只有等<code>await</code>后面的<code>Promise</code>执行完成得到结果才会继续下去，<code>await</code>就是等待，这样虽然避免了异步，但是它也会阻塞代码，所以使用的时候要考虑周全。</p><p>比如下面的代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">`<span class="subst">$&#123;name&#125;</span>成功`</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">await</span> fn(<span class="string">'小红'</span>)</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">await</span> fn(<span class="string">'小明'</span>)</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="keyword">await</span> fn(<span class="string">'小华'</span>)</span><br><span class="line">    <span class="keyword">return</span> [p1, p2, p3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>这样写虽然是可以的，但是这里await会阻塞代码，每个await都必须等后面的fn()执行完成才会执行下一行代码，所以test函数执行需要3秒。如果不是遇到特定的场景，最好还是不要这样用。</p><h2 id="四、一个小测试"><a href="#四、一个小测试" class="headerlink" title="四、一个小测试"></a>四、一个小测试</h2><p>写到这里，突然想起Promise的代码执行顺序也是挺需要注意的。</p><p>请看下面的代码，执行完以后打出的数字的顺序是怎样的呢？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> promiseDemo = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">        <span class="keyword">if</span> (random &gt;= <span class="number">0.2</span>) &#123;</span><br><span class="line">            resolve(<span class="string">'success'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">'failed'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> promiseDemo</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>)</span><br></pre></td></tr></table></figure></div><p>答案是：1 2 4 6 3 5</p><h2 id="五、一个适合使用async-await的业务场景"><a href="#五、一个适合使用async-await的业务场景" class="headerlink" title="五、一个适合使用async/await的业务场景"></a>五、一个适合使用async/await的业务场景</h2><p>在前端编程中，我们偶尔会遇到这样一个场景：我们需要发送多个请求，而<strong>后面请求的发送总是需要依赖上一个请求返回的数据</strong>。对于这个问题，我们既可以用的Promise的链式调用来解决，也可以用async/await来解决，然而后者会更简洁些。</p><p>使用Promise链式调用来处理：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request(<span class="number">500</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(result + <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request(result + <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>使用async/await的来处理：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getResult</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">await</span> request(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">await</span> request(p1 + <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="keyword">await</span> request(p2 + <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> p3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getResult().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>相对于使用then不停地进行链式调用， 使用async/await会显的更加易读一些。</p><h2 id="六、在循环中使用await"><a href="#六、在循环中使用await" class="headerlink" title="六、在循环中使用await"></a>六、在循环中使用await</h2><p>如果在是循环中使用<code>await</code>，就需要牢记一条：<strong>必须在async函数中使用。</strong></p><p>在<code>for...of</code>中使用<code>await</code>:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(time)</span><br><span class="line">        &#125;, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> times = [<span class="number">1000</span>, <span class="number">500</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> times) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="keyword">await</span> request(item)</span><br><span class="line">        result.push(temp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面就是我今天关于async/await理解的记录，以上内容估计还有错误之处，如果有朋友看到，还望不吝指出！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;async/await是JavaScript为了解决异步问题而提出的一种解决方案，许多人将其称为异步的终极解决方案。JavaScript的发展也经历了回调、Promise、async/await三个阶段，本篇文章记录了我自己对于async/await的理解。因为async/await的使用离不开Promise，如果对于Promise不熟悉的话，可以看下这篇介绍：&lt;a href=&quot;/posts/54b11a0c.html&quot;&gt;Promise详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.yptup.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue之虚拟DOM(vdom)</title>
    <link href="http://www.yptup.top/posts/d495ca98.html"/>
    <id>http://www.yptup.top/posts/d495ca98.html</id>
    <published>2019-06-12T08:21:29.000Z</published>
    <updated>2020-03-17T07:56:23.763Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>以下内容是个人的一些学习总结，如有不对，欢迎大佬指正。</p></blockquote><h2 id="真实DOM和渲染流程"><a href="#真实DOM和渲染流程" class="headerlink" title="真实DOM和渲染流程"></a>真实DOM和渲染流程</h2><p>在开始虚拟DOM之前，让我们先来了解一下真实的DOM以及浏览器是怎么进行解析的。浏览器渲染引擎工作流程大致分为以下四类：<strong>创建DOM树 -&gt; 生成render树 -&gt; 布局render树 -&gt; 绘制render树</strong></p><a id="more"></a><ol><li>创建DOM树：解析HTML生成DOM树 - 渲染引擎首先解析HTML文档，生成DOM树。 用CSS分析器，分析CSS文件和元素上的inline样式，生成页面的样式表。</li><li>生成render树：将DOM树和样式表，关联起来，构建一颗Render(渲染)树</li><li>布局render树：有了Render树，浏览器开始对渲染树的每个节点进行布局处理，确定其在屏幕上的显示位置。</li><li>绘制render树：遍历渲染树并用UI后端层将每一个节点绘制出来</li></ol><p><img src="http://blog.yptup.top/Image.png" alt></p><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="虚拟DOM是什么？"><a href="#虚拟DOM是什么？" class="headerlink" title="虚拟DOM是什么？"></a>虚拟DOM是什么？</h3><p>当用原生js或者jq去操作真实DOM的时候，浏览器会从构建DOM树开始从头到尾执行一遍流程。当操作次数过多时，之前计算DOM节点坐标值等都是白白浪费的性能，虚拟DOM由此诞生。</p><h3 id="虚拟DOM有什么好处？"><a href="#虚拟DOM有什么好处？" class="headerlink" title="虚拟DOM有什么好处？"></a>虚拟DOM有什么好处？</h3><p>假设一次操作中有10次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象一次性attch到DOM树上，再进行后续操作，避免大量无谓的计算量。所以，用JS对象模拟DOM节点的好处是，页面的更新可以先全部反映在虚拟DOM上，操作内存中的JS对象的速度显然要更快，等更新完成后，再将最终的JS对象映射成真实的DOM，交由浏览器去绘制。</p><h2 id="Vue中的虚拟DOM"><a href="#Vue中的虚拟DOM" class="headerlink" title="Vue中的虚拟DOM"></a>Vue中的虚拟DOM</h2><p><img src="/posts/d495ca98/vnode.png" alt></p><ul><li><strong>渲染函数</strong>：渲染函数是用来生成虚拟DOM的。Vue推荐使用模板来构建应用界面，在底层实现中Vue将模板编译成渲染函数。</li><li><strong>Vnode虚拟节点</strong>：它可以代表一个真实的dom节点。通过createElement方法将vnode节点渲染成dom节点。</li><li><strong>patch</strong>：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新</li></ul><blockquote><p>参考文档：<br><a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">渲染函数Vue文档</a><br><a href="https://blog.csdn.net/u010692018/article/details/78799335" target="_blank" rel="noopener">vue 虚拟dom实现原理文章</a><br><a href="https://github.com/vuejs/vue/blob/dev/src/core/vdom/patch.js#L366-L366" target="_blank" rel="noopener">patch算法源码</a><br>ps: 笔者能力有限，原谅我patch源码篇看的不是很懂！在这请尤雨溪大大收下我的膝盖。</p></blockquote><h2 id="模拟Vue虚拟DOM"><a href="#模拟Vue虚拟DOM" class="headerlink" title="模拟Vue虚拟DOM"></a>模拟Vue虚拟DOM</h2><h3 id="安装vue-cli脚手架，部署vue环境。"><a href="#安装vue-cli脚手架，部署vue环境。" class="headerlink" title="安装vue-cli脚手架，部署vue环境。"></a>安装vue-cli脚手架，部署vue环境。</h3><p>这里大家可以自行安装。</p><h3 id="创建虚拟DOM树"><a href="#创建虚拟DOM树" class="headerlink" title="创建虚拟DOM树"></a>创建虚拟DOM树</h3><p>先在element.js文件中实现如何创建虚拟DOM树。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟DOM元素类，用来描述DOM</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Element</span>(<span class="params">type, props, children</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type; <span class="comment">//节点类型</span></span><br><span class="line">  <span class="keyword">this</span>.props = props; <span class="comment">//属性</span></span><br><span class="line">  <span class="keyword">this</span>.children = children; <span class="comment">//子节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建虚拟DOM</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, children</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Element(type, props, children);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向外输出</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  Element,</span><br><span class="line">  createElement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们来到App.vue文件中调用createElement方法来创建一个DOM对象。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123;createElement&#125; <span class="keyword">from</span> <span class="string">'./js/element.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> V_DOM = createElement(<span class="string">'ul'</span>,&#123;<span class="attr">class</span>:<span class="string">'list'</span>&#125;,[</span><br><span class="line">  createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>:<span class="string">'item'</span>&#125;,[<span class="string">'item1'</span>]),</span><br><span class="line">  createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>:<span class="string">'item'</span>&#125;,[<span class="string">'item2'</span>]),</span><br><span class="line">  createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>:<span class="string">'item'</span>&#125;,[<span class="string">'item3'</span>])</span><br><span class="line">])</span><br><span class="line"><span class="comment">//打印虚拟DOM</span></span><br><span class="line"><span class="built_in">console</span>.log(V_DOM);</span><br></pre></td></tr></table></figure></div><blockquote><p>注：因为脚手架里的App.vue的内容没有删除，这里只贴了调用到的代码。</p></blockquote><p>下面我们来看看浏览器里打印出来的虚拟DOM。<br><img src="/posts/d495ca98/log.png" alt></p><h3 id="模拟渲染函数渲染虚拟DOM"><a href="#模拟渲染函数渲染虚拟DOM" class="headerlink" title="模拟渲染函数渲染虚拟DOM"></a>模拟渲染函数渲染虚拟DOM</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据type类型来创建对应的元素</span></span><br><span class="line">  <span class="keyword">let</span> el = <span class="built_in">document</span>.createElement(dom.type);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 再去遍历props属性对象，然后给创建的元素el设置属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> dom.props) &#123;</span><br><span class="line">      <span class="comment">// 设置属性的方法</span></span><br><span class="line">      el.setAttribute(key, dom.props[key]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 遍历子节点</span></span><br><span class="line">  <span class="comment">// // 如果子节点也是虚拟DOM，递归构建DOM节点</span></span><br><span class="line">  <span class="comment">// 不是就代表是文本节点，直接创建</span></span><br><span class="line">  dom.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      child = (child <span class="keyword">instanceof</span> Element) ? render(child) : <span class="built_in">document</span>.createTextNode(child);</span><br><span class="line">      <span class="comment">// 添加到对应元素内</span></span><br><span class="line">      el.appendChild(child);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向外输出</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  Element,</span><br><span class="line">  createElement,</span><br><span class="line">  render,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>回到App.vue我们来调用<strong>render函数</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createElement, render, renderDom&#125; <span class="keyword">from</span> <span class="string">'./js/element.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> V_DOM = createElement(<span class="string">'ul'</span>,&#123;<span class="attr">class</span>:<span class="string">'list'</span>&#125;,[</span><br><span class="line">  createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>:<span class="string">'item'</span>&#125;,[<span class="string">'item1'</span>]),</span><br><span class="line">  createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>:<span class="string">'item'</span>&#125;,[<span class="string">'item2'</span>]),</span><br><span class="line">  createElement(<span class="string">'li'</span>, &#123;<span class="attr">class</span>:<span class="string">'item'</span>&#125;,[<span class="string">'item3'</span>])</span><br><span class="line">])</span><br><span class="line"><span class="comment">//打印虚拟DOM</span></span><br><span class="line"><span class="built_in">console</span>.log(V_DOM);</span><br><span class="line"><span class="keyword">var</span> el = render(V_DOM);</span><br><span class="line"><span class="built_in">console</span>.log(el);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(el);</span><br></pre></td></tr></table></figure></div><p>来看看效果图。</p><p><img src="/posts/d495ca98/create.png" alt></p><p>真实的DOM结构就构建出来了，接下来渲染到页面中。</p><p><img src="/posts/d495ca98/vueCreate.png" alt></p><p>好了，我们已经实现了模拟虚拟DOM并进行了渲染。而diff算法和patch算法才是虚拟DOM最核心的部分，笔者还在努力学习阶段。这里推荐一篇<a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">宝藏文章</a>，这里比较详细的解析了虚拟DOM算法。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;以下内容是个人的一些学习总结，如有不对，欢迎大佬指正。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;真实DOM和渲染流程&quot;&gt;&lt;a href=&quot;#真实DOM和渲染流程&quot; class=&quot;headerlink&quot; title=&quot;真实DOM和渲染流程&quot;&gt;&lt;/a&gt;真实DOM和渲染流程&lt;/h2&gt;&lt;p&gt;在开始虚拟DOM之前，让我们先来了解一下真实的DOM以及浏览器是怎么进行解析的。浏览器渲染引擎工作流程大致分为以下四类：&lt;strong&gt;创建DOM树 -&amp;gt; 生成render树 -&amp;gt; 布局render树 -&amp;gt; 绘制render树&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件生命周期</title>
    <link href="http://www.yptup.top/posts/77185e63.html"/>
    <id>http://www.yptup.top/posts/77185e63.html</id>
    <published>2019-05-25T08:44:44.000Z</published>
    <updated>2020-03-12T13:09:05.653Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>Vue的生命周期一直是vue中的基础以及重要的基石，这里详细解析Vue父子组件的生命周期，单组件生命周期不在详细描述，如需了解请参考我的上一篇文章<a href="/posts/6f7db675.html">Vue组件生命周期</a></p><a id="more"></a><h1 id="Vue父子组件生命周期执行顺序"><a href="#Vue父子组件生命周期执行顺序" class="headerlink" title="Vue父子组件生命周期执行顺序"></a>Vue父子组件生命周期执行顺序</h1><p>下面我们在实际的代码执行过程中理解父子组件生命周期创建过程以及钩子函数执行的实时状态变化。</p><p>测试基于下面的代码，引入vue.js文件后即可执行。（打开页面后，再按一次刷新会自动进入debugger状态）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-components</span> <span class="attr">:msg</span>=<span class="string">"msg1"</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-components</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>from child: </span><span class="template-variable">&#123;&#123;childMsg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">props: [<span class="string">'msg'</span>],</span></span><br><span class="line"><span class="actionscript">data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">childMsg: <span class="string">'child'</span></span></span><br><span class="line">&#125;   </span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeCreate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeMount: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">mounted: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">deactivated: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"keepAlive停用"</span>);</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">activated: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'component activated'</span>);</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeDestroy: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> state = &#123;</span></span><br><span class="line"><span class="actionscript"><span class="string">'el'</span>: <span class="keyword">this</span>.$el,</span></span><br><span class="line"><span class="actionscript"><span class="string">'data'</span>: <span class="keyword">this</span>.$data,</span></span><br><span class="line"><span class="actionscript"><span class="string">'message'</span>: <span class="keyword">this</span>.message</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(state);</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">destroyed: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> state = &#123;</span></span><br><span class="line"><span class="actionscript"><span class="string">'el'</span>: <span class="keyword">this</span>.$el,</span></span><br><span class="line"><span class="actionscript"><span class="string">'data'</span>: <span class="keyword">this</span>.$data,</span></span><br><span class="line"><span class="actionscript"><span class="string">'message'</span>: <span class="keyword">this</span>.message</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(state);</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>,</span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="actionscript">message: <span class="string">'father'</span>,</span></span><br><span class="line"><span class="actionscript">msg1: <span class="string">"hello"</span>,</span></span><br><span class="line"><span class="actionscript">show: <span class="literal">true</span></span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeCreate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeMount: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">mounted: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">debugger</span>;    </span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeUpdate: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"页面视图更新前"</span>);</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">updated: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"页面视图更新后"</span>);</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">beforeDestroy: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> state = &#123;</span></span><br><span class="line"><span class="actionscript"><span class="string">'el'</span>: <span class="keyword">this</span>.$el,</span></span><br><span class="line"><span class="actionscript"><span class="string">'data'</span>: <span class="keyword">this</span>.$data,</span></span><br><span class="line"><span class="actionscript"><span class="string">'message'</span>: <span class="keyword">this</span>.message</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(state);</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">destroyed: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> state = &#123;</span></span><br><span class="line"><span class="actionscript"><span class="string">'el'</span>: <span class="keyword">this</span>.$el,</span></span><br><span class="line"><span class="actionscript"><span class="string">'data'</span>: <span class="keyword">this</span>.$data,</span></span><br><span class="line"><span class="actionscript"><span class="string">'message'</span>: <span class="keyword">this</span>.message</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(state);</span></span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line"><span class="actionscript"><span class="string">'my-components'</span>: child</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="生命周期调试"><a href="#生命周期调试" class="headerlink" title="生命周期调试"></a>生命周期调试</h2><p>首先我们创建了一个Vue实例vm，将其挂载到页面中id为”app”的元素上。</p><h3 id="一、根组件的beforeCreate阶段"><a href="#一、根组件的beforeCreate阶段" class="headerlink" title="一、根组件的beforeCreate阶段"></a>一、根组件的beforeCreate阶段</h3><p><img src="/posts/77185e63/beforeCreate.png" alt><br>可以看出，在调用<code>beforeCreate()</code>函数时，只进行了一些必要的初始化操作（例如一些全局的配置和根实例的一些属性初始化），此时<code>data</code>属性为<code>undefined</code>，没有可供操作的数据。</p><h3 id="二、根组件的Created阶段"><a href="#二、根组件的Created阶段" class="headerlink" title="二、根组件的Created阶段"></a>二、根组件的Created阶段</h3><p><img src="/posts/77185e63/Created.png" alt><br>调用<code>created()</code>函数，在这一步，实例已完成以下的配置：数据代理和动态数据绑定(<code>data observer</code>)，属性和方法的运算， <code>watch/event</code> 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><h3 id="三、根组件的beforeMount阶段"><a href="#三、根组件的beforeMount阶段" class="headerlink" title="三、根组件的beforeMount阶段"></a>三、根组件的beforeMount阶段</h3><p><img src="/posts/77185e63/Vmount.png" alt><br><img src="/posts/77185e63/beforeMount.png" alt></p><p>在调用<code>boforeMount()</code>函数前首先会判断对象是否有el选项。如果有的话就继续向下编译，如果没有el选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用<code>vm.$mount(el)</code></p><p>在这个例子中，我们有el元素，因此会调用<code>boforeMount()</code>函数,此时已经开始执行模板解析函数，但还没有将$el元素挂载页面，页面视图因此也未更新。在标红处，还是 ，这里就是应用的 <code>Virtual DOM（虚拟Dom）</code>技术，先把坑占住了。到后面<code>mounted</code>挂载的时候再把值渲染进去。</p><h3 id="四、子组件的beforeCreate、Created、beforeMount、Mounted阶段"><a href="#四、子组件的beforeCreate、Created、beforeMount、Mounted阶段" class="headerlink" title="四、子组件的beforeCreate、Created、beforeMount、Mounted阶段"></a>四、子组件的beforeCreate、Created、beforeMount、Mounted阶段</h3><p>在父组件执行<code>beforeMount</code>阶段后，进入子组件的<code>beforeCreate、Created、beforeMount</code>阶段，这些阶段和父组件类似。<code>beforeMount</code>阶段后，执行的是<code>Mounted</code>阶段，该阶段时子组件已经挂载到父组件上，并且父组件随之挂载到页面中。</p><p>由下图可以知道，在beforeMount阶段之后、Mounted阶段之前，数据已经被加载到视图上了，即$el元素被挂载到页面时触发了视图的更新。</p><p><img src="/posts/77185e63/child.png" alt></p><h3 id="五、子组件的activated阶段"><a href="#五、子组件的activated阶段" class="headerlink" title="五、子组件的activated阶段"></a>五、子组件的activated阶段</h3><p>我们发现在子父组件全部挂载到页面之后被触发。这是因为子组件<code>my-components</code>被<code>&lt;keep-alive&gt;</code> 包裹，随$el的挂载被触发。如果子组件没有被<code>&lt;keep-alive&gt;</code>包裹，那么该阶段将不会被触发。</p><h3 id="六、父组件的mounted阶段"><a href="#六、父组件的mounted阶段" class="headerlink" title="六、父组件的mounted阶段"></a>六、父组件的mounted阶段</h3><p>mounted执行时：此时el已经渲染完成并挂载到实例上。<br>至此，从Vue实例的初始化到将新的模板挂载到页面上的阶段已经完成，退出debugger。下面我们来看一下<code>deactivated、beforeUpdate、updated、beforeDestroy、destroyed</code>钩子函数。</p><h3 id="七、deactivated、beforeUpdate、updated阶段"><a href="#七、deactivated、beforeUpdate、updated阶段" class="headerlink" title="七、deactivated、beforeUpdate、updated阶段"></a>七、deactivated、beforeUpdate、updated阶段</h3><p>由生命周期函数可知：当数据变化后、虚拟DOM渲染重新渲染页面前会触发<code>beforeUpdate()</code>函数，此时视图还未改变。当虚拟DOM渲染页面视图更新后会触发<code>updated()</code>函数。</p><p><img src="/posts/77185e63/Update.png" alt><br>我们不妨改变<code>vm.show = false</code>，当修改这个属性时，不仅会触发<code>beforeUpdate</code>、<code>updated</code>函数，还会触发<code>deactivated</code>函数（因为keep-alive 组件停用时调用）。我们不妨想一下<code>deactivated</code>函数会在<code>beforeUpdate</code>后还是<code>updated</code>后调用。</p><p>我们在控制台输入<code>vm.show = false</code>。得到三者的调用顺序分别为<code>beforeUpdate</code>、<code>deactivated</code>、<code>updated</code>。我们可以知道的是<code>deactivated</code>函数的触发时间是在视图更新时触发。因为当视图更新时才能知道keep-alive组件被停用了。</p><p><img src="/posts/77185e63/childbeforeUpdate.png" alt></p><p><img src="/posts/77185e63/deactivated.png" alt></p><p><img src="/posts/77185e63/updated.png" alt></p><h3 id="八、beforeDestroy和destroyed钩子函数间的生命周期"><a href="#八、beforeDestroy和destroyed钩子函数间的生命周期" class="headerlink" title="八、beforeDestroy和destroyed钩子函数间的生命周期"></a>八、beforeDestroy和destroyed钩子函数间的生命周期</h3><p>现在我们对Vue实例进行销毁，调用app.$destroy()方法即可将其销毁，控制台测试如下：</p><p><img src="/posts/77185e63/destroyed.png" alt></p><p>我们发现实例依然存在，但是此时变化已经发生在了其他地方。</p><p><code>beforeDestroy</code>钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。</p><p><code>destroyed</code>钩子函数在Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁（也就是说子组件也会触发相应的函数）。这里的销毁并不指代’抹去’，而是表示’解绑’。</p><p>销毁时<code>beforeDestory</code>函数的传递顺序为由父到子，destory的传递顺序为由子到父。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>加载渲染过程<blockquote><p>父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p></blockquote></li><li>子组件更新过程<blockquote><p>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p></blockquote></li><li>父组件更新过程<blockquote><p>父beforeUpdate-&gt;父updated</p></blockquote></li><li>销毁过程<blockquote><p>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Vue的生命周期一直是vue中的基础以及重要的基石，这里详细解析Vue父子组件的生命周期，单组件生命周期不在详细描述，如需了解请参考我的上一篇文章&lt;a href=&quot;/posts/6f7db675.html&quot;&gt;Vue组件生命周期&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue渲染过程</title>
    <link href="http://www.yptup.top/posts/7f8f5d1.html"/>
    <id>http://www.yptup.top/posts/7f8f5d1.html</id>
    <published>2019-05-25T02:28:08.000Z</published>
    <updated>2020-03-12T13:09:50.156Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --><p>Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。但是模板毕竟是模板，不是真实的dom节点。从模板到真实dom节点还需要经过一些步骤</p><a id="more"></a><ol><li>把模板编译为<code>render</code>函数</li><li>实例进行挂载, 根据根节点<code>render</code>函数的调用，递归的生成虚拟dom</li><li>对比虚拟dom，渲染到真实dom</li><li>组件内部data发生变化，组件和子组件引用data作为props重新调用<code>render</code>函数，生成虚拟dom, 返回到步骤3</li></ol><h2 id="第一步-模板到render"><a href="#第一步-模板到render" class="headerlink" title="第一步: 模板到render"></a>第一步: 模板到render</h2><p>在我们使用Vue的组件化进行开发应用的时候, 如果仔细的查看我们要引入的组件, 例子如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue </span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        hello word</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></div><p>在我们的主入口main.js</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(App)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div><p><img src="/posts/7f8f5d1/render.png" alt></p><p>我们能够看到在我们引入的App这个模块，里面是一个对象，对象里面存在一个方法叫做<code>render</code>。在说<code>render</code>函数之前，我们可以想一想，每一次加载一个组件，然后对模板进行解析，解析完后，生成Dom，挂载到页面上。这样会导致效率很低效。而使用Vue-cli进行组件化开发，在我们引入组件的后，其实会有一个解析器(vue-loader)对此模板进行了解析，生成了<code>render</code>函数。当然，如果没有通过解析器解析为<code>render</code>函数，也没有关系，在组件第一次挂载的时候，Vue会自己进行解析</p><p>这样，能保证组件每次调用的都是<code>render</code>函数，使用<code>render</code>函数生成VNode。</p><h2 id="第二步：虚拟节点VNode"><a href="#第二步：虚拟节点VNode" class="headerlink" title="第二步：虚拟节点VNode"></a>第二步：虚拟节点VNode</h2><p>我们把Vue的实例挂载到<code>#app</code>, 会调用实例里面的<code>render</code>方法，生成虚拟DOM。来看看什么是虚拟节点，把例子修改一下。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> root = h(App)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'root:'</span>, root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div><p><img src="/posts/7f8f5d1/vnode.png" alt><br>上面生成的VNode就是虚拟节点，虚拟节点里面有一个属性<code>elm</code>, 这个属性指向真实的DOM节点。因为VNode指向了真实的DOM节点，那么虚拟节点经过对比后，生成的DOM节点就可以直接进行替换。</p><p><strong>这样有什么好处呢？</strong></p><p>一个组件对象，如果内部的<code>data</code>发生变化，触发了<code>render</code>函数，重新生成了VNode节点。那么就可以直接找到所对应的节点，然后直接替换。那么这个过程只会在本组件内发生，不会影响其他的组件。于是组件与组件是隔离的。</p><p>例子如下:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    state: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="literal">false</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; state &#125; = <span class="keyword">this</span> <span class="comment">// state 变化重新触发render</span></span><br><span class="line">    <span class="keyword">let</span> root = h(App)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'root:'</span>, root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> app = h(<span class="string">'h1'</span>, [<span class="string">'hello world'</span>])</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app:'</span>, app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p><img src="/posts/7f8f5d1/Vnode2.png" alt><br>我们可以看到，当<code>main.js</code>中重新触发<code>render</code>函数的时候，<code>render</code>方法里面有引用App.vue这个子组件。但是并没有触发App.vue组件的的<code>render</code>函数。</p><p><span style="color:#e83e8c">在一个组件内，什么情况会触发render?</span></p><h2 id="如何才能触发组件的render"><a href="#如何才能触发组件的render" class="headerlink" title="如何才能触发组件的render"></a>如何才能触发组件的render</h2><p>数据劫持是Vue的一大特色，原理官方已经讲的很多了<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">深入响应式原理</a>。在我们给组件的data的属性进行的赋值的时候(set)，此属性如果在组件内部初次渲染过程被引用(<code>data的属性被访问，也就是数据劫持的get</code>), 包括生命周期方法或者render方法。于是会触发组件的update(beforeUpdate -&gt; render -&gt; updated)。</p><blockquote><p>注: 为了防止data被多次set从而触发多次update, Vue把update存放到异步队列中。这样就能保证多次data的set只会触发一次update。</p></blockquote><p><span style="color:#e83e8c">当props会触发组件的重新渲染是怎么发生的呢？</span></p><p>把父组件的<code>data</code>通过<code>props</code>传递给子组件的时候，子组件在初次渲染的时候生命周期或者<code>render</code>方法，有调用<code>data</code>相关的<code>props</code>的属性, 这样子组件也被添加到父组件的<code>data</code>的相关属性依赖中，这样父组件的<code>data</code>在<code>set</code>的时候，就相当于触发自身和子组件的<code>update</code>。</p><p><strong>例子如下:</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    state: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; state &#125; = <span class="keyword">this</span> <span class="comment">// state 变化重新触发render</span></span><br><span class="line">    <span class="keyword">let</span> root = h(App, &#123; <span class="attr">props</span>: &#123; <span class="attr">status</span>: state &#125; &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'root:'</span>, root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.root = root</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    status: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; status &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> app = h(<span class="string">'h1'</span>, [<span class="string">'hello world'</span>])</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app:'</span>, app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><p><img src="/posts/7f8f5d1/render2.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sun Mar 22 2020 17:15:57 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。但是模板毕竟是模板，不是真实的dom节点。从模板到真实dom节点还需要经过一些步骤&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://www.yptup.top/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.yptup.top/tags/Vue/"/>
    
  </entry>
  
</feed>
